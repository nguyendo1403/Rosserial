
0809_RTU_ROS_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08006d5c  08006d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800719c  0800719c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071a4  080071a4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080071a4  080071a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071ac  080071ac  000171ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080071b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000d6c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000dfc  20000dfc  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001773e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ae  00000000  00000000  000377fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  0003abb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001050  00000000  00000000  0003bd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000599f  00000000  00000000  0003cd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015496  00000000  00000000  0004271f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4788  00000000  00000000  00057bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012c33d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c88  00000000  00000000  0012c390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d44 	.word	0x08006d44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006d44 	.word	0x08006d44

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <eMBMasterInit>:
#endif
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode eMBMasterInit( eMBMode eMode, void *dHUART, ULONG ulBaudRate, void *dHTIM )
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	4603      	mov	r3, r0
 80004ea:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eStatus = MB_ENOERR;
 80004ec:	2300      	movs	r3, #0
 80004ee:	75fb      	strb	r3, [r7, #23]

	switch (eMode)
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d11f      	bne.n	8000536 <eMBMasterInit+0x5a>
	{
#if MB_MASTER_RTU_ENABLED > 0
	case MB_RTU:
		pvMBMasterFrameStartCur = eMBMasterRTUStart;
 80004f6:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <eMBMasterInit+0x8c>)
 80004f8:	4a1c      	ldr	r2, [pc, #112]	; (800056c <eMBMasterInit+0x90>)
 80004fa:	601a      	str	r2, [r3, #0]
		pvMBMasterFrameStopCur = eMBMasterRTUStop;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <eMBMasterInit+0x94>)
 80004fe:	4a1d      	ldr	r2, [pc, #116]	; (8000574 <eMBMasterInit+0x98>)
 8000500:	601a      	str	r2, [r3, #0]
		peMBMasterFrameSendCur = eMBMasterRTUSend;
 8000502:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <eMBMasterInit+0x9c>)
 8000504:	4a1d      	ldr	r2, [pc, #116]	; (800057c <eMBMasterInit+0xa0>)
 8000506:	601a      	str	r2, [r3, #0]
		peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 8000508:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <eMBMasterInit+0xa4>)
 800050a:	4a1e      	ldr	r2, [pc, #120]	; (8000584 <eMBMasterInit+0xa8>)
 800050c:	601a      	str	r2, [r3, #0]
		pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
 800050e:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <eMBMasterInit+0xac>)
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
		pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 8000514:	4b1d      	ldr	r3, [pc, #116]	; (800058c <eMBMasterInit+0xb0>)
 8000516:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <eMBMasterInit+0xb4>)
 8000518:	601a      	str	r2, [r3, #0]
		pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 800051a:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <eMBMasterInit+0xb8>)
 800051c:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <eMBMasterInit+0xbc>)
 800051e:	601a      	str	r2, [r3, #0]
		pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <eMBMasterInit+0xc0>)
 8000522:	4a1f      	ldr	r2, [pc, #124]	; (80005a0 <eMBMasterInit+0xc4>)
 8000524:	601a      	str	r2, [r3, #0]

		eStatus = eMBMasterRTUInit(dHUART, ulBaudRate, dHTIM);
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	6879      	ldr	r1, [r7, #4]
 800052a:	68b8      	ldr	r0, [r7, #8]
 800052c:	f000 f89e 	bl	800066c <eMBMasterRTUInit>
 8000530:	4603      	mov	r3, r0
 8000532:	75fb      	strb	r3, [r7, #23]
		break;
 8000534:	e002      	b.n	800053c <eMBMasterInit+0x60>

		eStatus = eMBMasterASCIIInit(dHUART, ulBaudRate, dHTIM );
		break;
#endif
	default:
		eStatus = MB_EINVAL;
 8000536:	2302      	movs	r3, #2
 8000538:	75fb      	strb	r3, [r7, #23]
		break;
 800053a:	bf00      	nop
	}

	if (eStatus == MB_ENOERR)
 800053c:	7dfb      	ldrb	r3, [r7, #23]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d10c      	bne.n	800055c <eMBMasterInit+0x80>
	{
		if (!xMBMasterPortEventInit())
 8000542:	f000 facb 	bl	8000adc <xMBMasterPortEventInit>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d102      	bne.n	8000552 <eMBMasterInit+0x76>
		{
			/* port dependent event module initalization failed. */
			eStatus = MB_EPORTERR;
 800054c:	2303      	movs	r3, #3
 800054e:	75fb      	strb	r3, [r7, #23]
 8000550:	e002      	b.n	8000558 <eMBMasterInit+0x7c>
		}
		else
		{
			eMBState = STATE_DISABLED;
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <eMBMasterInit+0xc8>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
		}
		/* initialize the OS resource for modbus master. */
		vMBMasterOsResInit();
 8000558:	f000 fae4 	bl	8000b24 <vMBMasterOsResInit>
	}
	return eStatus;
 800055c:	7dfb      	ldrb	r3, [r7, #23]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200000b4 	.word	0x200000b4
 800056c:	080006d9 	.word	0x080006d9
 8000570:	200000b8 	.word	0x200000b8
 8000574:	08000701 	.word	0x08000701
 8000578:	200000b0 	.word	0x200000b0
 800057c:	0800078d 	.word	0x0800078d
 8000580:	200000bc 	.word	0x200000bc
 8000584:	0800071d 	.word	0x0800071d
 8000588:	200000c0 	.word	0x200000c0
 800058c:	200000c4 	.word	0x200000c4
 8000590:	08000861 	.word	0x08000861
 8000594:	200000c8 	.word	0x200000c8
 8000598:	0800091d 	.word	0x0800091d
 800059c:	200000cc 	.word	0x200000cc
 80005a0:	080009bd 	.word	0x080009bd
 80005a4:	20000000 	.word	0x20000000

080005a8 <eMBMasterEnable>:
    return eStatus;
}

eMBErrorCode
eMBMasterEnable( void )
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 80005ae:	2300      	movs	r3, #0
 80005b0:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <eMBMasterEnable+0x30>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d106      	bne.n	80005c8 <eMBMasterEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBMasterFrameStartCur(  );
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <eMBMasterEnable+0x34>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <eMBMasterEnable+0x30>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
 80005c6:	e001      	b.n	80005cc <eMBMasterEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80005c8:	2306      	movs	r3, #6
 80005ca:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 80005cc:	79fb      	ldrb	r3, [r7, #7]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000
 80005dc:	200000b4 	.word	0x200000b4

080005e0 <vMBMasterSetErrorType>:
{
	return eMBMasterCurErrorType;
}
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	eMBMasterCurErrorType = errorType;
 80005ea:	4a04      	ldr	r2, [pc, #16]	; (80005fc <vMBMasterSetErrorType+0x1c>)
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	7013      	strb	r3, [r2, #0]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	200000ac 	.word	0x200000ac

08000600 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 800060c:	23ff      	movs	r3, #255	; 0xff
 800060e:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8000610:	23ff      	movs	r3, #255	; 0xff
 8000612:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8000614:	e013      	b.n	800063e <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	1c5a      	adds	r2, r3, #1
 800061a:	607a      	str	r2, [r7, #4]
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	7bbb      	ldrb	r3, [r7, #14]
 8000620:	4053      	eors	r3, r2
 8000622:	b2db      	uxtb	r3, r3
 8000624:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <usMBCRC16+0x64>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4413      	add	r3, r2
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	4053      	eors	r3, r2
 8000632:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8000634:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <usMBCRC16+0x68>)
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	4413      	add	r3, r2
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800063e:	887b      	ldrh	r3, [r7, #2]
 8000640:	1e5a      	subs	r2, r3, #1
 8000642:	807a      	strh	r2, [r7, #2]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1e6      	bne.n	8000616 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	021b      	lsls	r3, r3, #8
 800064c:	b21a      	sxth	r2, r3
 800064e:	7bbb      	ldrb	r3, [r7, #14]
 8000650:	b21b      	sxth	r3, r3
 8000652:	4313      	orrs	r3, r2
 8000654:	b21b      	sxth	r3, r3
 8000656:	b29b      	uxth	r3, r3
}
 8000658:	4618      	mov	r0, r3
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	08006ea8 	.word	0x08006ea8
 8000668:	08006fa8 	.word	0x08006fa8

0800066c <eMBMasterRTUInit>:
static volatile eMBMasterTimerMode eMasterCurTimerMode;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterRTUInit( void *dHUART, ULONG ulBaudRate, void *dHTIM )
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8000678:	2300      	movs	r3, #0
 800067a:	75fb      	strb	r3, [r7, #23]
    ULONG           usTimerT35_50us;

    ENTER_CRITICAL_SECTION(  );
 800067c:	f000 fa0a 	bl	8000a94 <__critical_enter>

    /* Modbus RTU uses 8 Databits. */
    if( xMBMasterPortSerialInit( dHUART, ulBaudRate, dHTIM ) != TRUE )
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	68b9      	ldr	r1, [r7, #8]
 8000684:	68f8      	ldr	r0, [r7, #12]
 8000686:	f000 fa55 	bl	8000b34 <xMBMasterPortSerialInit>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d002      	beq.n	8000696 <eMBMasterRTUInit+0x2a>
    {
        eStatus = MB_EPORTERR;
 8000690:	2303      	movs	r3, #3
 8000692:	75fb      	strb	r3, [r7, #23]
 8000694:	e017      	b.n	80006c6 <eMBMasterRTUInit+0x5a>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800069c:	d902      	bls.n	80006a4 <eMBMasterRTUInit+0x38>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 800069e:	2323      	movs	r3, #35	; 0x23
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	e005      	b.n	80006b0 <eMBMasterRTUInit+0x44>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <eMBMasterRTUInit+0x68>)
 80006aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ae:	613b      	str	r3, [r7, #16]
        }
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us, dHTIM ) != TRUE )
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 faa2 	bl	8000c00 <xMBMasterPortTimersInit>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d001      	beq.n	80006c6 <eMBMasterRTUInit+0x5a>
        {
            eStatus = MB_EPORTERR;
 80006c2:	2303      	movs	r3, #3
 80006c4:	75fb      	strb	r3, [r7, #23]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 80006c6:	f000 f9f5 	bl	8000ab4 <__critical_exit>

    return eStatus;
 80006ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	00177fa0 	.word	0x00177fa0

080006d8 <eMBMasterRTUStart>:

void
eMBMasterRTUStart( void )
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 80006dc:	f000 f9da 	bl	8000a94 <__critical_enter>
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <eMBMasterRTUStart+0x24>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
    vMBMasterPortSerialEnable( TRUE, FALSE );
 80006e6:	2100      	movs	r1, #0
 80006e8:	2001      	movs	r0, #1
 80006ea:	f000 fa35 	bl	8000b58 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersT35Enable(  );
 80006ee:	f000 fa9f 	bl	8000c30 <vMBMasterPortTimersT35Enable>

    EXIT_CRITICAL_SECTION(  );
 80006f2:	f000 f9df 	bl	8000ab4 <__critical_exit>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000d1 	.word	0x200000d1

08000700 <eMBMasterRTUStop>:

void
eMBMasterRTUStop( void )
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8000704:	f000 f9c6 	bl	8000a94 <__critical_enter>
    vMBMasterPortSerialEnable( FALSE, FALSE );
 8000708:	2100      	movs	r1, #0
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fa24 	bl	8000b58 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersDisable(  );
 8000710:	f000 fab0 	bl	8000c74 <vMBMasterPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8000714:	f000 f9ce 	bl	8000ab4 <__critical_exit>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <eMBMasterRTUReceive>:

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8000728:	2300      	movs	r3, #0
 800072a:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 800072c:	f000 f9b2 	bl	8000a94 <__critical_enter>
    assert_param( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <eMBMasterRTUReceive+0x64>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	b29b      	uxth	r3, r3
 8000736:	2b03      	cmp	r3, #3
 8000738:	d919      	bls.n	800076e <eMBMasterRTUReceive+0x52>
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <eMBMasterRTUReceive+0x64>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	b29b      	uxth	r3, r3
 8000740:	4619      	mov	r1, r3
 8000742:	4810      	ldr	r0, [pc, #64]	; (8000784 <eMBMasterRTUReceive+0x68>)
 8000744:	f7ff ff5c 	bl	8000600 <usMBCRC16>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d10f      	bne.n	800076e <eMBMasterRTUReceive+0x52>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <eMBMasterRTUReceive+0x68>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <eMBMasterRTUReceive+0x64>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	b29b      	uxth	r3, r3
 800075e:	3b03      	subs	r3, #3
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	4a07      	ldr	r2, [pc, #28]	; (8000788 <eMBMasterRTUReceive+0x6c>)
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	e001      	b.n	8000772 <eMBMasterRTUReceive+0x56>
    }
    else
    {
        eStatus = MB_EIO;
 800076e:	2305      	movs	r3, #5
 8000770:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 8000772:	f000 f99f 	bl	8000ab4 <__critical_exit>
    return eStatus;
 8000776:	7dfb      	ldrb	r3, [r7, #23]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200002da 	.word	0x200002da
 8000784:	200001d4 	.word	0x200001d4
 8000788:	200001d5 	.word	0x200001d5

0800078c <eMBMasterRTUSend>:

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800079c:	2300      	movs	r3, #0
 800079e:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	2b10      	cmp	r3, #16
 80007a4:	d901      	bls.n	80007aa <eMBMasterRTUSend+0x1e>
 80007a6:	2302      	movs	r3, #2
 80007a8:	e04b      	b.n	8000842 <eMBMasterRTUSend+0xb6>

    ENTER_CRITICAL_SECTION(  );
 80007aa:	f000 f973 	bl	8000a94 <__critical_enter>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
 80007ae:	4b27      	ldr	r3, [pc, #156]	; (800084c <eMBMasterRTUSend+0xc0>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d13f      	bne.n	8000838 <eMBMasterRTUSend+0xac>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	4a24      	ldr	r2, [pc, #144]	; (8000850 <eMBMasterRTUSend+0xc4>)
 80007be:	6013      	str	r3, [r2, #0]
        usMasterSndBufferCount = 1;
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <eMBMasterRTUSend+0xc8>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <eMBMasterRTUSend+0xc4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	79fa      	ldrb	r2, [r7, #7]
 80007cc:	701a      	strb	r2, [r3, #0]
        usMasterSndBufferCount += usLength;
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <eMBMasterRTUSend+0xc8>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	88bb      	ldrh	r3, [r7, #4]
 80007d6:	4413      	add	r3, r2
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <eMBMasterRTUSend+0xc8>)
 80007dc:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <eMBMasterRTUSend+0xc4>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <eMBMasterRTUSend+0xc8>)
 80007e4:	8812      	ldrh	r2, [r2, #0]
 80007e6:	b292      	uxth	r2, r2
 80007e8:	4611      	mov	r1, r2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ff08 	bl	8000600 <usMBCRC16>
 80007f0:	4603      	mov	r3, r0
 80007f2:	81bb      	strh	r3, [r7, #12]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <eMBMasterRTUSend+0xc8>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	b291      	uxth	r1, r2
 80007fe:	4a15      	ldr	r2, [pc, #84]	; (8000854 <eMBMasterRTUSend+0xc8>)
 8000800:	8011      	strh	r1, [r2, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	b2d9      	uxtb	r1, r3
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <eMBMasterRTUSend+0xcc>)
 800080a:	5499      	strb	r1, [r3, r2]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800080c:	89bb      	ldrh	r3, [r7, #12]
 800080e:	0a1b      	lsrs	r3, r3, #8
 8000810:	b299      	uxth	r1, r3
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <eMBMasterRTUSend+0xc8>)
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	b29b      	uxth	r3, r3
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	b290      	uxth	r0, r2
 800081c:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <eMBMasterRTUSend+0xc8>)
 800081e:	8010      	strh	r0, [r2, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	b2c9      	uxtb	r1, r1
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <eMBMasterRTUSend+0xcc>)
 8000826:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <eMBMasterRTUSend+0xd0>)
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
        vMBMasterPortSerialEnable( FALSE, TRUE );
 800082e:	2101      	movs	r1, #1
 8000830:	2000      	movs	r0, #0
 8000832:	f000 f991 	bl	8000b58 <vMBMasterPortSerialEnable>
 8000836:	e001      	b.n	800083c <eMBMasterRTUSend+0xb0>
    }
    else
    {
        eStatus = MB_EIO;
 8000838:	2305      	movs	r3, #5
 800083a:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 800083c:	f000 f93a 	bl	8000ab4 <__critical_exit>
    return eStatus;
 8000840:	7bfb      	ldrb	r3, [r7, #15]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000d1 	.word	0x200000d1
 8000850:	200002d4 	.word	0x200002d4
 8000854:	200002d8 	.word	0x200002d8
 8000858:	200000d4 	.word	0x200000d4
 800085c:	200000d0 	.word	0x200000d0

08000860 <xMBMasterRTUReceiveFSM>:

BOOL
xMBMasterRTUReceiveFSM( void )
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8000866:	2300      	movs	r3, #0
 8000868:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert_param(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));

    /* Always read the character. */
    ( void )xMBMasterPortSerialGetByte( ( CHAR * ) & ucByte );
 800086a:	1dbb      	adds	r3, r7, #6
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f9b5 	bl	8000bdc <xMBMasterPortSerialGetByte>

    switch ( eRcvState )
 8000872:	4b26      	ldr	r3, [pc, #152]	; (800090c <xMBMasterRTUReceiveFSM+0xac>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b03      	cmp	r3, #3
 800087a:	d841      	bhi.n	8000900 <xMBMasterRTUReceiveFSM+0xa0>
 800087c:	a201      	add	r2, pc, #4	; (adr r2, 8000884 <xMBMasterRTUReceiveFSM+0x24>)
 800087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000882:	bf00      	nop
 8000884:	08000895 	.word	0x08000895
 8000888:	080008a1 	.word	0x080008a1
 800088c:	080008d3 	.word	0x080008d3
 8000890:	0800089b 	.word	0x0800089b
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_M_RX_INIT:
        vMBMasterPortTimersT35Enable( );
 8000894:	f000 f9cc 	bl	8000c30 <vMBMasterPortTimersT35Enable>
        break;
 8000898:	e032      	b.n	8000900 <xMBMasterRTUReceiveFSM+0xa0>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_M_RX_ERROR:
        vMBMasterPortTimersT35Enable( );
 800089a:	f000 f9c9 	bl	8000c30 <vMBMasterPortTimersT35Enable>
        break;
 800089e:	e02f      	b.n	8000900 <xMBMasterRTUReceiveFSM+0xa0>
         */
    case STATE_M_RX_IDLE:
    	/* In time of respond timeout,the receiver receive a frame.
    	 * Disable timer of respond timeout and change the transmiter state to idle.
    	 */
    	vMBMasterPortTimersDisable( );
 80008a0:	f000 f9e8 	bl	8000c74 <vMBMasterPortTimersDisable>
    	eSndState = STATE_M_TX_IDLE;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <xMBMasterRTUReceiveFSM+0xb0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

        usMasterRcvBufferPos = 0;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <xMBMasterRTUReceiveFSM+0xb4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	801a      	strh	r2, [r3, #0]
        ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <xMBMasterRTUReceiveFSM+0xb4>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	b291      	uxth	r1, r2
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <xMBMasterRTUReceiveFSM+0xb4>)
 80008bc:	8011      	strh	r1, [r2, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	79b9      	ldrb	r1, [r7, #6]
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <xMBMasterRTUReceiveFSM+0xb8>)
 80008c4:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_M_RX_RCV;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <xMBMasterRTUReceiveFSM+0xac>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBMasterPortTimersT35Enable( );
 80008cc:	f000 f9b0 	bl	8000c30 <vMBMasterPortTimersT35Enable>
        break;
 80008d0:	e016      	b.n	8000900 <xMBMasterRTUReceiveFSM+0xa0>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_M_RX_RCV:
        if( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <xMBMasterRTUReceiveFSM+0xb4>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	2bff      	cmp	r3, #255	; 0xff
 80008da:	d80b      	bhi.n	80008f4 <xMBMasterRTUReceiveFSM+0x94>
        {
            ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <xMBMasterRTUReceiveFSM+0xb4>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	b291      	uxth	r1, r2
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <xMBMasterRTUReceiveFSM+0xb4>)
 80008e8:	8011      	strh	r1, [r2, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	79b9      	ldrb	r1, [r7, #6]
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <xMBMasterRTUReceiveFSM+0xb8>)
 80008f0:	5499      	strb	r1, [r3, r2]
 80008f2:	e002      	b.n	80008fa <xMBMasterRTUReceiveFSM+0x9a>
        }
        else
        {
            eRcvState = STATE_M_RX_ERROR;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <xMBMasterRTUReceiveFSM+0xac>)
 80008f6:	2203      	movs	r2, #3
 80008f8:	701a      	strb	r2, [r3, #0]
        }
        vMBMasterPortTimersT35Enable();
 80008fa:	f000 f999 	bl	8000c30 <vMBMasterPortTimersT35Enable>
        break;
 80008fe:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8000900:	79fb      	ldrb	r3, [r7, #7]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200000d1 	.word	0x200000d1
 8000910:	200000d0 	.word	0x200000d0
 8000914:	200002da 	.word	0x200002da
 8000918:	200001d4 	.word	0x200001d4

0800091c <xMBMasterRTUTransmitFSM>:

BOOL
xMBMasterRTUTransmitFSM( void )
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8000922:	2300      	movs	r3, #0
 8000924:	71fb      	strb	r3, [r7, #7]

    assert_param( eRcvState == STATE_M_RX_IDLE );

    switch ( eSndState )
 8000926:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <xMBMasterRTUTransmitFSM+0x8c>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d002      	beq.n	8000936 <xMBMasterRTUTransmitFSM+0x1a>
 8000930:	2b01      	cmp	r3, #1
 8000932:	d005      	beq.n	8000940 <xMBMasterRTUTransmitFSM+0x24>
            }
        }
        break;

    default:
        break;
 8000934:	e033      	b.n	800099e <xMBMasterRTUTransmitFSM+0x82>
        vMBMasterPortSerialEnable( TRUE, FALSE );
 8000936:	2100      	movs	r1, #0
 8000938:	2001      	movs	r0, #1
 800093a:	f000 f90d 	bl	8000b58 <vMBMasterPortSerialEnable>
        break;
 800093e:	e02e      	b.n	800099e <xMBMasterRTUTransmitFSM+0x82>
        if( usMasterSndBufferCount != 0 )
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <xMBMasterRTUTransmitFSM+0x90>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	b29b      	uxth	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d00c      	beq.n	8000964 <xMBMasterRTUTransmitFSM+0x48>
			xMBMasterPortSerialPutBytes(pucMasterSndBufferCur, usMasterSndBufferCount);
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <xMBMasterRTUTransmitFSM+0x94>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <xMBMasterRTUTransmitFSM+0x90>)
 8000950:	8812      	ldrh	r2, [r2, #0]
 8000952:	b292      	uxth	r2, r2
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f92c 	bl	8000bb4 <xMBMasterPortSerialPutBytes>
			usMasterSndBufferCount = 0;
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <xMBMasterRTUTransmitFSM+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	801a      	strh	r2, [r3, #0]
        break;
 8000962:	e01b      	b.n	800099c <xMBMasterRTUTransmitFSM+0x80>
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <xMBMasterRTUTransmitFSM+0x98>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	bf0c      	ite	eq
 800096e:	2301      	moveq	r3, #1
 8000970:	2300      	movne	r3, #0
 8000972:	b2db      	uxtb	r3, r3
 8000974:	461a      	mov	r2, r3
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <xMBMasterRTUTransmitFSM+0x9c>)
 8000978:	701a      	strb	r2, [r3, #0]
            vMBMasterPortSerialEnable( TRUE, FALSE );
 800097a:	2100      	movs	r1, #0
 800097c:	2001      	movs	r0, #1
 800097e:	f000 f8eb 	bl	8000b58 <vMBMasterPortSerialEnable>
            eSndState = STATE_M_TX_XFWR;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <xMBMasterRTUTransmitFSM+0x8c>)
 8000984:	2202      	movs	r2, #2
 8000986:	701a      	strb	r2, [r3, #0]
            if ( xFrameIsBroadcast == TRUE )
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <xMBMasterRTUTransmitFSM+0x9c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b01      	cmp	r3, #1
 8000990:	d102      	bne.n	8000998 <xMBMasterRTUTransmitFSM+0x7c>
            	vMBMasterPortTimersConvertDelayEnable( );
 8000992:	f000 f961 	bl	8000c58 <vMBMasterPortTimersConvertDelayEnable>
        break;
 8000996:	e001      	b.n	800099c <xMBMasterRTUTransmitFSM+0x80>
            	vMBMasterPortTimersRespondTimeoutEnable( );
 8000998:	f000 f965 	bl	8000c66 <vMBMasterPortTimersRespondTimeoutEnable>
        break;
 800099c:	bf00      	nop
    }

    return xNeedPoll;
 800099e:	79fb      	ldrb	r3, [r7, #7]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000d0 	.word	0x200000d0
 80009ac:	200002d8 	.word	0x200002d8
 80009b0:	200002d4 	.word	0x200002d4
 80009b4:	200000d4 	.word	0x200000d4
 80009b8:	200002dc 	.word	0x200002dc

080009bc <xMBMasterRTUTimerExpired>:

BOOL
xMBMasterRTUTimerExpired(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
	BOOL xNeedPoll = FALSE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	71fb      	strb	r3, [r7, #7]

	switch (eRcvState)
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <xMBMasterRTUTimerExpired+0xa8>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	d012      	beq.n	80009f6 <xMBMasterRTUTimerExpired+0x3a>
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	dc19      	bgt.n	8000a08 <xMBMasterRTUTimerExpired+0x4c>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <xMBMasterRTUTimerExpired+0x22>
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d006      	beq.n	80009ea <xMBMasterRTUTimerExpired+0x2e>
		/* Function called in an illegal state. */
	default:
		assert_param(
				( eRcvState == STATE_M_RX_INIT ) || ( eRcvState == STATE_M_RX_RCV ) ||
				( eRcvState == STATE_M_RX_ERROR ) || ( eRcvState == STATE_M_RX_IDLE ));
		break;
 80009dc:	e014      	b.n	8000a08 <xMBMasterRTUTimerExpired+0x4c>
		xNeedPoll = xMBMasterPortEventPost(EV_MASTER_READY);
 80009de:	2001      	movs	r0, #1
 80009e0:	f000 f88a 	bl	8000af8 <xMBMasterPortEventPost>
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
		break;
 80009e8:	e00f      	b.n	8000a0a <xMBMasterRTUTimerExpired+0x4e>
		xNeedPoll = xMBMasterPortEventPost(EV_MASTER_FRAME_RECEIVED);
 80009ea:	2002      	movs	r0, #2
 80009ec:	f000 f884 	bl	8000af8 <xMBMasterPortEventPost>
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
		break;
 80009f4:	e009      	b.n	8000a0a <xMBMasterRTUTimerExpired+0x4e>
		vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff fdf2 	bl	80005e0 <vMBMasterSetErrorType>
		xNeedPoll = xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 80009fc:	2010      	movs	r0, #16
 80009fe:	f000 f87b 	bl	8000af8 <xMBMasterPortEventPost>
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
		break;
 8000a06:	e000      	b.n	8000a0a <xMBMasterRTUTimerExpired+0x4e>
		break;
 8000a08:	bf00      	nop
	}
	eRcvState = STATE_M_RX_IDLE;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <xMBMasterRTUTimerExpired+0xa8>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]

	switch (eSndState)
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <xMBMasterRTUTimerExpired+0xac>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d10d      	bne.n	8000a36 <xMBMasterRTUTimerExpired+0x7a>
	{
		/* A frame was send finish and convert delay or respond timeout expired.
		 * If the frame is broadcast,The master will idle,and if the frame is not
		 * broadcast.Notify the listener process error.*/
	case STATE_M_TX_XFWR:
		if ( xFrameIsBroadcast == FALSE ) {
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <xMBMasterRTUTimerExpired+0xb0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10a      	bne.n	8000a3a <xMBMasterRTUTimerExpired+0x7e>
			vMBMasterSetErrorType(EV_ERROR_RESPOND_TIMEOUT);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff fddb 	bl	80005e0 <vMBMasterSetErrorType>
			xNeedPoll = xMBMasterPortEventPost(EV_MASTER_ERROR_PROCESS);
 8000a2a:	2010      	movs	r0, #16
 8000a2c:	f000 f864 	bl	8000af8 <xMBMasterPortEventPost>
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]
		}
		break;
 8000a34:	e001      	b.n	8000a3a <xMBMasterRTUTimerExpired+0x7e>
		/* Function called in an illegal state. */
	default:
		assert_param(
				( eSndState == STATE_M_TX_XFWR ) || ( eSndState == STATE_M_TX_IDLE ));
		break;
 8000a36:	bf00      	nop
 8000a38:	e000      	b.n	8000a3c <xMBMasterRTUTimerExpired+0x80>
		break;
 8000a3a:	bf00      	nop
	}
	eSndState = STATE_M_TX_IDLE;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <xMBMasterRTUTimerExpired+0xac>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]

	vMBMasterPortTimersDisable( );
 8000a42:	f000 f917 	bl	8000c74 <vMBMasterPortTimersDisable>
	/* If timer mode is convert delay, the master event then turns EV_MASTER_EXECUTE status. */
	if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <xMBMasterRTUTimerExpired+0xb4>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d104      	bne.n	8000a5a <xMBMasterRTUTimerExpired+0x9e>
		xNeedPoll = xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 8000a50:	2004      	movs	r0, #4
 8000a52:	f000 f851 	bl	8000af8 <xMBMasterPortEventPost>
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	}

	return xNeedPoll;
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200000d1 	.word	0x200000d1
 8000a68:	200000d0 	.word	0x200000d0
 8000a6c:	200002dc 	.word	0x200002dc
 8000a70:	200002dd 	.word	0x200002dd

08000a74 <vMBMasterSetCurTimerMode>:
	return usMasterSendPDULength;
}

/* Set Modbus Master current timer mode.*/
void vMBMasterSetCurTimerMode( eMBMasterTimerMode eMBTimerMode )
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	eMasterCurTimerMode = eMBTimerMode;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <vMBMasterSetCurTimerMode+0x1c>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	7013      	strb	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	200002dd 	.word	0x200002dd

08000a94 <__critical_enter>:
#include "main.h"

static uint32_t lock_count = 0;

void __critical_enter(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
	__disable_irq();
	lock_count++;
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <__critical_enter+0x1c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <__critical_enter+0x1c>)
 8000aa4:	6013      	str	r3, [r2, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	200002e0 	.word	0x200002e0

08000ab4 <__critical_exit>:

void __critical_exit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	lock_count--;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <__critical_exit+0x24>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <__critical_exit+0x24>)
 8000ac0:	6013      	str	r3, [r2, #0]
	if (lock_count == 0)
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <__critical_exit+0x24>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d101      	bne.n	8000ace <__critical_exit+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000aca:	b662      	cpsie	i
}
 8000acc:	bf00      	nop
		__enable_irq();
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	200002e0 	.word	0x200002e0

08000adc <xMBMasterPortEventInit>:
static eMBMasterEventType eQueuedEvent;
static BOOL     xEventInQueue;
BOOL xNeedPoll;
/* ----------------------- Start implementation -----------------------------*/
BOOL xMBMasterPortEventInit( void )
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
	xEventInQueue = FALSE;
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <xMBMasterPortEventInit+0x18>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	200002e6 	.word	0x200002e6

08000af8 <xMBMasterPortEventPost>:

BOOL xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
	xEventInQueue = TRUE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <xMBMasterPortEventPost+0x24>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
	eQueuedEvent = (eMBMasterEventType)eEvent;
 8000b08:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <xMBMasterPortEventPost+0x28>)
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	8013      	strh	r3, [r2, #0]
	return TRUE;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	200002e6 	.word	0x200002e6
 8000b20:	200002e4 	.word	0x200002e4

08000b24 <vMBMasterOsResInit>:
 * This function is initialize the OS resource for modbus master.
 * Note:The resource is define by OS.If you not use OS this function can be empty.
 *
 */
void vMBMasterOsResInit( void )
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <xMBMasterPortSerialInit>:


/* ----------------------- Start implementation -----------------------------*/

BOOL xMBMasterPortSerialInit(void *dHUART, ULONG ulBaudRate, void *dHTIM)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
	uart = (UART_HandleTypeDef *)dHUART;
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <xMBMasterPortSerialInit+0x20>)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	6013      	str	r3, [r2, #0]

	return TRUE;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	200002e8 	.word	0x200002e8

08000b58 <vMBMasterPortSerialEnable>:

void vMBMasterPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	460a      	mov	r2, r1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	4613      	mov	r3, r2
 8000b66:	71bb      	strb	r3, [r7, #6]
	if(xRxEnable)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d007      	beq.n	8000b7e <vMBMasterPortSerialEnable+0x26>
	{

		HAL_UART_Receive_IT(uart, &singlechar, 1);
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <vMBMasterPortSerialEnable+0x50>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2201      	movs	r2, #1
 8000b74:	490d      	ldr	r1, [pc, #52]	; (8000bac <vMBMasterPortSerialEnable+0x54>)
 8000b76:	4618      	mov	r0, r3
 8000b78:	f004 fb8e 	bl	8005298 <HAL_UART_Receive_IT>
 8000b7c:	e004      	b.n	8000b88 <vMBMasterPortSerialEnable+0x30>
	}	
	else
	{
		HAL_UART_AbortReceive_IT(uart);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <vMBMasterPortSerialEnable+0x50>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f004 fcda 	bl	800553c <HAL_UART_AbortReceive_IT>
	}

	if(xTxEnable)
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <vMBMasterPortSerialEnable+0x3e>
	{
		pxMBMasterFrameCBTransmitterEmpty();
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <vMBMasterPortSerialEnable+0x58>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4798      	blx	r3
	}
	else
	{
		HAL_UART_AbortTransmit_IT(uart);
	}
}
 8000b94:	e004      	b.n	8000ba0 <vMBMasterPortSerialEnable+0x48>
		HAL_UART_AbortTransmit_IT(uart);
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <vMBMasterPortSerialEnable+0x50>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f004 fc5a 	bl	8005454 <HAL_UART_AbortTransmit_IT>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200002e8 	.word	0x200002e8
 8000bac:	200002ec 	.word	0x200002ec
 8000bb0:	200000c8 	.word	0x200000c8

08000bb4 <xMBMasterPortSerialPutBytes>:
	HAL_UART_AbortReceive_IT(uart);
	HAL_UART_AbortTransmit_IT(uart);
}

BOOL xMBMasterPortSerialPutBytes(volatile UCHAR *ucByte, USHORT usSize)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(uart, (uint8_t *)ucByte, usSize);
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <xMBMasterPortSerialPutBytes+0x24>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	887a      	ldrh	r2, [r7, #2]
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f004 fb20 	bl	800520e <HAL_UART_Transmit_IT>
	return TRUE;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200002e8 	.word	0x200002e8

08000bdc <xMBMasterPortSerialGetByte>:
	HAL_UART_Transmit_IT(uart, (uint8_t*)&ucByte, 1);
	return TRUE;
}

BOOL xMBMasterPortSerialGetByte(CHAR * pucByte)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	*pucByte = (uint8_t)(singlechar);
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <xMBMasterPortSerialGetByte+0x20>)
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	200002ec 	.word	0x200002ec

08000c00 <xMBMasterPortTimersInit>:
static uint16_t timeout = 0;
volatile uint16_t counter = 0;

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBMasterPortTimersInit( USHORT usTimeOut50us, void *dHTIM )
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	80fb      	strh	r3, [r7, #6]
	tim = (TIM_HandleTypeDef *)dHTIM;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <xMBMasterPortTimersInit+0x28>)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	6013      	str	r3, [r2, #0]
	timeout = usTimeOut50us;
 8000c12:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <xMBMasterPortTimersInit+0x2c>)
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	8013      	strh	r3, [r2, #0]
    return TRUE;
 8000c18:	2301      	movs	r3, #1
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200002f0 	.word	0x200002f0
 8000c2c:	200002f4 	.word	0x200002f4

08000c30 <vMBMasterPortTimersT35Enable>:

void vMBMasterPortTimersT35Enable()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
    vMBMasterSetCurTimerMode(MB_TMODE_T35);
 8000c34:	2000      	movs	r0, #0
 8000c36:	f7ff ff1d 	bl	8000a74 <vMBMasterSetCurTimerMode>
	counter=0;
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <vMBMasterPortTimersT35Enable+0x20>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(tim);
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <vMBMasterPortTimersT35Enable+0x24>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 fe35 	bl	80048b4 <HAL_TIM_Base_Start_IT>
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200002f6 	.word	0x200002f6
 8000c54:	200002f0 	.word	0x200002f0

08000c58 <vMBMasterPortTimersConvertDelayEnable>:

void vMBMasterPortTimersConvertDelayEnable()
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	vMBMasterSetCurTimerMode(MB_TMODE_CONVERT_DELAY);
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	f7ff ff09 	bl	8000a74 <vMBMasterSetCurTimerMode>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <vMBMasterPortTimersRespondTimeoutEnable>:

void vMBMasterPortTimersRespondTimeoutEnable()
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
	vMBMasterSetCurTimerMode(MB_TMODE_RESPOND_TIMEOUT);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff ff02 	bl	8000a74 <vMBMasterSetCurTimerMode>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <vMBMasterPortTimersDisable>:

void vMBMasterPortTimersDisable()
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(tim);
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <vMBMasterPortTimersDisable+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 fe89 	bl	8004994 <HAL_TIM_Base_Stop_IT>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200002f0 	.word	0x200002f0

08000c8c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c9c:	d110      	bne.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x34>
	{

		    HAL_IncTick();
 8000c9e:	f002 fa53 	bl	8003148 <HAL_IncTick>

		if((++counter) >= timeout)
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000cae:	4619      	mov	r1, r3
 8000cb0:	8011      	strh	r1, [r2, #0]
 8000cb2:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000cb4:	8812      	ldrh	r2, [r2, #0]
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d302      	bcc.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x34>
			pxMBMasterPortCBTimerExpired();
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4798      	blx	r3
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200002f6 	.word	0x200002f6
 8000ccc:	200002f4 	.word	0x200002f4
 8000cd0:	200000cc 	.word	0x200000cc

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd8:	f002 f9e4 	bl	80030a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cdc:	f000 f81c 	bl	8000d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce0:	f000 f940 	bl	8000f64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce4:	f000 f916 	bl	8000f14 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ce8:	f000 f8c0 	bl	8000e6c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000cec:	f000 f8e8 	bl	8000ec0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000cf0:	f000 f870 	bl	8000dd4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  eMBMasterInit( MB_RTU, &huart3, 19200, &htim2);
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <main+0x3c>)
 8000cf6:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000cfa:	4906      	ldr	r1, [pc, #24]	; (8000d14 <main+0x40>)
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff fbed 	bl	80004dc <eMBMasterInit>
  eMBMasterEnable( );
 8000d02:	f7ff fc51 	bl	80005a8 <eMBMasterEnable>
  setup();
 8000d06:	f001 fa57 	bl	80021b8 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000d0a:	f001 fa65 	bl	80021d8 <loop>
  {
 8000d0e:	e7fc      	b.n	8000d0a <main+0x36>
 8000d10:	200002f8 	.word	0x200002f8
 8000d14:	20000384 	.word	0x20000384

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b094      	sub	sp, #80	; 0x50
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0320 	add.w	r3, r7, #32
 8000d22:	2230      	movs	r2, #48	; 0x30
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f005 fe82 	bl	8006a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <SystemClock_Config+0xb4>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <SystemClock_Config+0xb4>)
 8000d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <SystemClock_Config+0xb4>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <SystemClock_Config+0xb8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a1b      	ldr	r2, [pc, #108]	; (8000dd0 <SystemClock_Config+0xb8>)
 8000d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <SystemClock_Config+0xb8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d74:	2302      	movs	r3, #2
 8000d76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 0320 	add.w	r3, r7, #32
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 f8eb 	bl	8003f64 <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d94:	f000 f936 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	230f      	movs	r3, #15
 8000d9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 fb4e 	bl	8004454 <HAL_RCC_ClockConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000dbe:	f000 f921 	bl	8001004 <Error_Handler>
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3750      	adds	r7, #80	; 0x50
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40007000 	.word	0x40007000

08000dd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de8:	463b      	mov	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000df2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000dfa:	2253      	movs	r2, #83	; 0x53
 8000dfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000e06:	2231      	movs	r2, #49	; 0x31
 8000e08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e16:	4814      	ldr	r0, [pc, #80]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000e18:	f003 fcfc 	bl	8004814 <HAL_TIM_Base_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000e22:	f000 f8ef 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	4619      	mov	r1, r3
 8000e32:	480d      	ldr	r0, [pc, #52]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000e34:	f003 fee5 	bl	8004c02 <HAL_TIM_ConfigClockSource>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000e3e:	f000 f8e1 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000e50:	f004 f900 	bl	8005054 <HAL_TIMEx_MasterConfigSynchronization>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000e5a:	f000 f8d3 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200002f8 	.word	0x200002f8

08000e6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_USART1_UART_Init+0x4c>)
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <MX_USART1_UART_Init+0x50>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <MX_USART1_UART_Init+0x4c>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_USART1_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_USART1_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_USART1_UART_Init+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_USART1_UART_Init+0x4c>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_USART1_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_USART1_UART_Init+0x4c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_USART1_UART_Init+0x4c>)
 8000ea4:	f004 f966 	bl	8005174 <HAL_UART_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eae:	f000 f8a9 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000340 	.word	0x20000340
 8000ebc:	40011000 	.word	0x40011000

08000ec0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_USART3_UART_Init+0x4c>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <MX_USART3_UART_Init+0x50>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_USART3_UART_Init+0x4c>)
 8000ecc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000ed0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_USART3_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_USART3_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_USART3_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_USART3_UART_Init+0x4c>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_USART3_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_USART3_UART_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_USART3_UART_Init+0x4c>)
 8000ef8:	f004 f93c 	bl	8005174 <HAL_UART_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f02:	f000 f87f 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000384 	.word	0x20000384
 8000f10:	40004800 	.word	0x40004800

08000f14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <MX_DMA_Init+0x4c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <MX_DMA_Init+0x4c>)
 8000f24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <MX_DMA_Init+0x4c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	203a      	movs	r0, #58	; 0x3a
 8000f3c:	f002 fa23 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f40:	203a      	movs	r0, #58	; 0x3a
 8000f42:	f002 fa3c 	bl	80033be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2046      	movs	r0, #70	; 0x46
 8000f4c:	f002 fa1b 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000f50:	2046      	movs	r0, #70	; 0x46
 8000f52:	f002 fa34 	bl	80033be <HAL_NVIC_EnableIRQ>

}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800

08000f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <MX_GPIO_Init+0x98>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a1e      	ldr	r2, [pc, #120]	; (8000ffc <MX_GPIO_Init+0x98>)
 8000f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <MX_GPIO_Init+0x98>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MX_GPIO_Init+0x98>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <MX_GPIO_Init+0x98>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <MX_GPIO_Init+0x98>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_GPIO_Init+0x98>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <MX_GPIO_Init+0x98>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <MX_GPIO_Init+0x98>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	480b      	ldr	r0, [pc, #44]	; (8001000 <MX_GPIO_Init+0x9c>)
 8000fd4:	f002 ffac 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4619      	mov	r1, r3
 8000fee:	4804      	ldr	r0, [pc, #16]	; (8001000 <MX_GPIO_Init+0x9c>)
 8000ff0:	f002 fe02 	bl	8003bf8 <HAL_GPIO_Init>

}
 8000ff4:	bf00      	nop
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40021800 	.word	0x40021800

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	e7fe      	b.n	800100c <Error_Handler+0x8>

0800100e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <_ZN3ros3MsgC1Ev+0x1c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	0800716c 	.word	0x0800716c

08001050 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
      data()
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ffe8 	bl	8001030 <_ZN3ros3MsgC1Ev>
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3304      	adds	r3, #4
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ffcf 	bl	800100e <_ZN3ros4TimeC1Ev>
    {
    }
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	08007154 	.word	0x08007154

08001080 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6859      	ldr	r1, [r3, #4]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	4413      	add	r3, r2
 8001098:	b2ca      	uxtb	r2, r1
 800109a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	0a19      	lsrs	r1, r3, #8
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3301      	adds	r3, #1
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	4413      	add	r3, r2
 80010aa:	b2ca      	uxtb	r2, r1
 80010ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	0c19      	lsrs	r1, r3, #16
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3302      	adds	r3, #2
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	b2ca      	uxtb	r2, r1
 80010be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	0e19      	lsrs	r1, r3, #24
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3303      	adds	r3, #3
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	4413      	add	r3, r2
 80010ce:	b2ca      	uxtb	r2, r1
 80010d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3304      	adds	r3, #4
 80010d6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6899      	ldr	r1, [r3, #8]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	b2ca      	uxtb	r2, r1
 80010e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	0a19      	lsrs	r1, r3, #8
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3301      	adds	r3, #1
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	b2ca      	uxtb	r2, r1
 80010f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	0c19      	lsrs	r1, r3, #16
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3302      	adds	r3, #2
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	4413      	add	r3, r2
 8001106:	b2ca      	uxtb	r2, r1
 8001108:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	0e19      	lsrs	r1, r3, #24
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3303      	adds	r3, #3
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	4413      	add	r3, r2
 8001118:	b2ca      	uxtb	r2, r1
 800111a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3304      	adds	r3, #4
 8001120:	60fb      	str	r3, [r7, #12]
      return offset;
 8001122:	68fb      	ldr	r3, [r7, #12]
    }
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	6839      	ldr	r1, [r7, #0]
 8001156:	440b      	add	r3, r1
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3302      	adds	r3, #2
 800116a:	6839      	ldr	r1, [r7, #0]
 800116c:	440b      	add	r3, r1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	041b      	lsls	r3, r3, #16
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3303      	adds	r3, #3
 8001180:	6839      	ldr	r1, [r7, #0]
 8001182:	440b      	add	r3, r1
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	061b      	lsls	r3, r3, #24
 8001188:	431a      	orrs	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3304      	adds	r3, #4
 8001192:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	4413      	add	r3, r2
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3301      	adds	r3, #1
 80011aa:	6839      	ldr	r1, [r7, #0]
 80011ac:	440b      	add	r3, r1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3302      	adds	r3, #2
 80011c0:	6839      	ldr	r1, [r7, #0]
 80011c2:	440b      	add	r3, r1
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	041b      	lsls	r3, r3, #16
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3303      	adds	r3, #3
 80011d6:	6839      	ldr	r1, [r7, #0]
 80011d8:	440b      	add	r3, r1
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	061b      	lsls	r3, r3, #24
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3304      	adds	r3, #4
 80011e8:	60fb      	str	r3, [r7, #12]
     return offset;
 80011ea:	68fb      	ldr	r3, [r7, #12]
    }
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	08006d5c 	.word	0x08006d5c

08001214 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	08006d6c 	.word	0x08006d6c

08001230 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fef8 	bl	8001030 <_ZN3ros3MsgC1Ev>
 8001240:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	809a      	strh	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a09      	ldr	r2, [pc, #36]	; (8001274 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a07      	ldr	r2, [pc, #28]	; (8001274 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a06      	ldr	r2, [pc, #24]	; (8001274 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800125c:	611a      	str	r2, [r3, #16]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
    {
    }
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0800713c 	.word	0x0800713c
 8001274:	08006d90 	.word	0x08006d90

08001278 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	8899      	ldrh	r1, [r3, #4]
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	4413      	add	r3, r2
 8001290:	b2ca      	uxtb	r2, r1
 8001292:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	889b      	ldrh	r3, [r3, #4]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	b299      	uxth	r1, r3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	3301      	adds	r3, #1
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	b2ca      	uxtb	r2, r1
 80012a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	3302      	adds	r3, #2
 80012ac:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7fe ff88 	bl	80001c8 <strlen>
 80012b8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	69b9      	ldr	r1, [r7, #24]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 ffa2 	bl	800220c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	3304      	adds	r3, #4
 80012cc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	18d0      	adds	r0, r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4619      	mov	r1, r3
 80012dc:	f005 fb9a 	bl	8006a14 <memcpy>
      offset += length_topic_name;
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4413      	add	r3, r2
 80012e6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7fe ff6b 	bl	80001c8 <strlen>
 80012f2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	6979      	ldr	r1, [r7, #20]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 ff85 	bl	800220c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	18d0      	adds	r0, r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4619      	mov	r1, r3
 8001316:	f005 fb7d 	bl	8006a14 <memcpy>
      offset += length_message_type;
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	4413      	add	r3, r2
 8001320:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	4618      	mov	r0, r3
 8001328:	f7fe ff4e 	bl	80001c8 <strlen>
 800132c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	4413      	add	r3, r2
 8001334:	6939      	ldr	r1, [r7, #16]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 ff68 	bl	800220c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	3304      	adds	r3, #4
 8001340:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	18d0      	adds	r0, r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4619      	mov	r1, r3
 8001350:	f005 fb60 	bl	8006a14 <memcpy>
      offset += length_md5sum;
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4413      	add	r3, r2
 800135a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001362:	68f9      	ldr	r1, [r7, #12]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	4413      	add	r3, r2
 800136a:	b2ca      	uxtb	r2, r1
 800136c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	0a19      	lsrs	r1, r3, #8
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3301      	adds	r3, #1
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	4413      	add	r3, r2
 800137a:	b2ca      	uxtb	r2, r1
 800137c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	0c19      	lsrs	r1, r3, #16
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3302      	adds	r3, #2
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	4413      	add	r3, r2
 800138a:	b2ca      	uxtb	r2, r1
 800138c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	0e19      	lsrs	r1, r3, #24
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3303      	adds	r3, #3
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	4413      	add	r3, r2
 800139a:	b2ca      	uxtb	r2, r1
 800139c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	61fb      	str	r3, [r7, #28]
      return offset;
 80013a4:	69fb      	ldr	r3, [r7, #28]
    }
 80013a6:	4618      	mov	r0, r3
 80013a8:	3720      	adds	r7, #32
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b08a      	sub	sp, #40	; 0x28
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	889b      	ldrh	r3, [r3, #4]
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	3301      	adds	r3, #1
 80013d4:	6839      	ldr	r1, [r7, #0]
 80013d6:	440b      	add	r3, r1
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b21b      	sxth	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	3302      	adds	r3, #2
 80013ec:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	441a      	add	r2, r3
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 ff24 	bl	8002248 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	3304      	adds	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	4413      	add	r3, r2
 8001410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001412:	429a      	cmp	r2, r3
 8001414:	d20c      	bcs.n	8001430 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	441a      	add	r2, r3
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	3b01      	subs	r3, #1
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	440b      	add	r3, r1
 8001424:	7812      	ldrb	r2, [r2, #0]
 8001426:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	3301      	adds	r3, #1
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
 800142e:	e7ec      	b.n	800140a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	4413      	add	r3, r2
 8001436:	3b01      	subs	r3, #1
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	4413      	add	r3, r2
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	3b01      	subs	r3, #1
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	441a      	add	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	4413      	add	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	441a      	add	r2, r3
 800145a:	f107 0310 	add.w	r3, r7, #16
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fef1 	bl	8002248 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	3304      	adds	r3, #4
 800146a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	623b      	str	r3, [r7, #32]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4413      	add	r3, r2
 8001476:	6a3a      	ldr	r2, [r7, #32]
 8001478:	429a      	cmp	r2, r3
 800147a:	d20c      	bcs.n	8001496 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	441a      	add	r2, r3
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	3b01      	subs	r3, #1
 8001486:	6839      	ldr	r1, [r7, #0]
 8001488:	440b      	add	r3, r1
 800148a:	7812      	ldrb	r2, [r2, #0]
 800148c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	3301      	adds	r3, #1
 8001492:	623b      	str	r3, [r7, #32]
 8001494:	e7ec      	b.n	8001470 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4413      	add	r3, r2
 800149c:	3b01      	subs	r3, #1
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	441a      	add	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4413      	add	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	441a      	add	r2, r3
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 febe 	bl	8002248 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	3304      	adds	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	69fa      	ldr	r2, [r7, #28]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d20c      	bcs.n	80014fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	441a      	add	r2, r3
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	440b      	add	r3, r1
 80014f0:	7812      	ldrb	r2, [r2, #0]
 80014f2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	3301      	adds	r3, #1
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	e7ec      	b.n	80014d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	3b01      	subs	r3, #1
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	4413      	add	r3, r2
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	3b01      	subs	r3, #1
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	441a      	add	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4413      	add	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	440a      	add	r2, r1
 800152c:	7812      	ldrb	r2, [r2, #0]
 800152e:	4313      	orrs	r3, r2
 8001530:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	3301      	adds	r3, #1
 8001538:	6839      	ldr	r1, [r7, #0]
 800153a:	440b      	add	r3, r1
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	4313      	orrs	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	3302      	adds	r3, #2
 800154a:	6839      	ldr	r1, [r7, #0]
 800154c:	440b      	add	r3, r1
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	041b      	lsls	r3, r3, #16
 8001552:	4313      	orrs	r3, r2
 8001554:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	3303      	adds	r3, #3
 800155c:	6839      	ldr	r1, [r7, #0]
 800155e:	440b      	add	r3, r1
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	061b      	lsls	r3, r3, #24
 8001564:	4313      	orrs	r3, r2
 8001566:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	3304      	adds	r3, #4
 8001572:	61bb      	str	r3, [r7, #24]
     return offset;
 8001574:	69bb      	ldr	r3, [r7, #24]
    }
 8001576:	4618      	mov	r0, r3
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	08006d94 	.word	0x08006d94

0800159c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	08006db0 	.word	0x08006db0

080015b8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fd34 	bl	8001030 <_ZN3ros3MsgC1Ev>
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	711a      	strb	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80015d8:	609a      	str	r2, [r3, #8]
    {
    }
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	08007124 	.word	0x08007124
 80015e8:	08006d90 	.word	0x08006d90

080015ec <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	7912      	ldrb	r2, [r2, #4]
 8001604:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3301      	adds	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe fdd9 	bl	80001c8 <strlen>
 8001616:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	4413      	add	r3, r2
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fdf3 	bl	800220c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3304      	adds	r3, #4
 800162a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	18d0      	adds	r0, r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	4619      	mov	r1, r3
 800163a:	f005 f9eb 	bl	8006a14 <memcpy>
      offset += length_msg;
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
      return offset;
 8001646:	68fb      	ldr	r3, [r7, #12]
    }
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	4413      	add	r3, r2
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	3301      	adds	r3, #1
 800166e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	441a      	add	r2, r3
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fde3 	bl	8002248 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	3304      	adds	r3, #4
 8001686:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	429a      	cmp	r2, r3
 8001696:	d20c      	bcs.n	80016b2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	441a      	add	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	440b      	add	r3, r1
 80016a6:	7812      	ldrb	r2, [r2, #0]
 80016a8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	e7ec      	b.n	800168c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	3b01      	subs	r3, #1
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	441a      	add	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4413      	add	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
     return offset;
 80016d6:	693b      	ldr	r3, [r7, #16]
    }
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	08006dd4 	.word	0x08006dd4

080016fc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	08006de8 	.word	0x08006de8

08001718 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fc84 	bl	8001030 <_ZN3ros3MsgC1Ev>
 8001728:	4a11      	ldr	r2, [pc, #68]	; (8001770 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	0800710c 	.word	0x0800710c

08001774 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6859      	ldr	r1, [r3, #4]
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4413      	add	r3, r2
 800178c:	b2ca      	uxtb	r2, r1
 800178e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	0a19      	lsrs	r1, r3, #8
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	3301      	adds	r3, #1
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	4413      	add	r3, r2
 800179e:	b2ca      	uxtb	r2, r1
 80017a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	0c19      	lsrs	r1, r3, #16
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	3302      	adds	r3, #2
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	b2ca      	uxtb	r2, r1
 80017b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	0e19      	lsrs	r1, r3, #24
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	3303      	adds	r3, #3
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	4413      	add	r3, r2
 80017c2:	b2ca      	uxtb	r2, r1
 80017c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	3304      	adds	r3, #4
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	6a3a      	ldr	r2, [r7, #32]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d22b      	bcs.n	8001832 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80017e8:	6939      	ldr	r1, [r7, #16]
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	b2ca      	uxtb	r2, r1
 80017f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	0a19      	lsrs	r1, r3, #8
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	3301      	adds	r3, #1
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	b2ca      	uxtb	r2, r1
 8001802:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	0c19      	lsrs	r1, r3, #16
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	3302      	adds	r3, #2
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	4413      	add	r3, r2
 8001810:	b2ca      	uxtb	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	0e19      	lsrs	r1, r3, #24
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	3303      	adds	r3, #3
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	4413      	add	r3, r2
 8001820:	b2ca      	uxtb	r2, r1
 8001822:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	3304      	adds	r3, #4
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	3301      	adds	r3, #1
 800182e:	623b      	str	r3, [r7, #32]
 8001830:	e7ce      	b.n	80017d0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6919      	ldr	r1, [r3, #16]
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	4413      	add	r3, r2
 800183c:	b2ca      	uxtb	r2, r1
 800183e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	0a19      	lsrs	r1, r3, #8
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	3301      	adds	r3, #1
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	4413      	add	r3, r2
 800184e:	b2ca      	uxtb	r2, r1
 8001850:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	0c19      	lsrs	r1, r3, #16
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	3302      	adds	r3, #2
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	4413      	add	r3, r2
 8001860:	b2ca      	uxtb	r2, r1
 8001862:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	0e19      	lsrs	r1, r3, #24
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	3303      	adds	r3, #3
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	4413      	add	r3, r2
 8001872:	b2ca      	uxtb	r2, r1
 8001874:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	3304      	adds	r3, #4
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	429a      	cmp	r2, r3
 8001888:	d22b      	bcs.n	80018e2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	699a      	ldr	r2, [r3, #24]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001898:	68f9      	ldr	r1, [r7, #12]
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	b2ca      	uxtb	r2, r1
 80018a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	0a19      	lsrs	r1, r3, #8
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	3301      	adds	r3, #1
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	b2ca      	uxtb	r2, r1
 80018b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	0c19      	lsrs	r1, r3, #16
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	3302      	adds	r3, #2
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	b2ca      	uxtb	r2, r1
 80018c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	0e19      	lsrs	r1, r3, #24
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	3303      	adds	r3, #3
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	b2ca      	uxtb	r2, r1
 80018d2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	3304      	adds	r3, #4
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3301      	adds	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	e7ce      	b.n	8001880 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69d9      	ldr	r1, [r3, #28]
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	b2ca      	uxtb	r2, r1
 80018ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	0a19      	lsrs	r1, r3, #8
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	3301      	adds	r3, #1
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	b2ca      	uxtb	r2, r1
 8001900:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	0c19      	lsrs	r1, r3, #16
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	3302      	adds	r3, #2
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	4413      	add	r3, r2
 8001910:	b2ca      	uxtb	r2, r1
 8001912:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	0e19      	lsrs	r1, r3, #24
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	3303      	adds	r3, #3
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	4413      	add	r3, r2
 8001922:	b2ca      	uxtb	r2, r1
 8001924:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	3304      	adds	r3, #4
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	429a      	cmp	r2, r3
 8001938:	d228      	bcs.n	800198c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fc3e 	bl	80001c8 <strlen>
 800194c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	4413      	add	r3, r2
 8001954:	6979      	ldr	r1, [r7, #20]
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fc58 	bl	800220c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	3304      	adds	r3, #4
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	18d0      	adds	r0, r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	4619      	mov	r1, r3
 8001978:	f005 f84c 	bl	8006a14 <memcpy>
      offset += length_stringsi;
 800197c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	4413      	add	r3, r2
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	3301      	adds	r3, #1
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	e7d1      	b.n	8001930 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800198e:	4618      	mov	r0, r3
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001996:	b580      	push	{r7, lr}
 8001998:	b08e      	sub	sp, #56	; 0x38
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80019a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80019ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b0:	3301      	adds	r3, #1
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	6a3a      	ldr	r2, [r7, #32]
 80019bc:	4313      	orrs	r3, r2
 80019be:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80019c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c2:	3302      	adds	r3, #2
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	6a3a      	ldr	r2, [r7, #32]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80019d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d4:	3303      	adds	r3, #3
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	4413      	add	r3, r2
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	6a3a      	ldr	r2, [r7, #32]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80019e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e6:	3304      	adds	r3, #4
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	6a3a      	ldr	r2, [r7, #32]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d90a      	bls.n	8001a0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4619      	mov	r1, r3
 80019fe:	4610      	mov	r0, r2
 8001a00:	f005 f81e 	bl	8006a40 <realloc>
 8001a04:	4602      	mov	r2, r0
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a3a      	ldr	r2, [r7, #32]
 8001a0e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001a10:	2300      	movs	r3, #0
 8001a12:	633b      	str	r3, [r7, #48]	; 0x30
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d236      	bcs.n	8001a8c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a26:	6839      	ldr	r1, [r7, #0]
 8001a28:	440a      	add	r2, r1
 8001a2a:	7812      	ldrb	r2, [r2, #0]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a34:	3301      	adds	r3, #1
 8001a36:	6839      	ldr	r1, [r7, #0]
 8001a38:	440b      	add	r3, r1
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a46:	3302      	adds	r3, #2
 8001a48:	6839      	ldr	r1, [r7, #0]
 8001a4a:	440b      	add	r3, r1
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a58:	3303      	adds	r3, #3
 8001a5a:	6839      	ldr	r1, [r7, #0]
 8001a5c:	440b      	add	r3, r1
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	061b      	lsls	r3, r3, #24
 8001a62:	4313      	orrs	r3, r2
 8001a64:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6e:	3304      	adds	r3, #4
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	3208      	adds	r2, #8
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a86:	3301      	adds	r3, #1
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
 8001a8a:	e7c3      	b.n	8001a14 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	4413      	add	r3, r2
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a98:	3301      	adds	r3, #1
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aaa:	3302      	adds	r3, #2
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abc:	3303      	adds	r3, #3
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	061b      	lsls	r3, r3, #24
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ace:	3304      	adds	r3, #4
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d90a      	bls.n	8001af2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f004 ffaa 	bl	8006a40 <realloc>
 8001aec:	4602      	mov	r2, r0
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001af8:	2300      	movs	r3, #0
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d236      	bcs.n	8001b74 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b0e:	6839      	ldr	r1, [r7, #0]
 8001b10:	440a      	add	r2, r1
 8001b12:	7812      	ldrb	r2, [r2, #0]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	6839      	ldr	r1, [r7, #0]
 8001b20:	440b      	add	r3, r1
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2e:	3302      	adds	r3, #2
 8001b30:	6839      	ldr	r1, [r7, #0]
 8001b32:	440b      	add	r3, r1
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	041b      	lsls	r3, r3, #16
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b40:	3303      	adds	r3, #3
 8001b42:	6839      	ldr	r1, [r7, #0]
 8001b44:	440b      	add	r3, r1
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	061b      	lsls	r3, r3, #24
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b56:	3304      	adds	r3, #4
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	3214      	adds	r2, #20
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6e:	3301      	adds	r3, #1
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b72:	e7c3      	b.n	8001afc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b80:	3301      	adds	r3, #1
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	4413      	add	r3, r2
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b92:	3302      	adds	r3, #2
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	041b      	lsls	r3, r3, #16
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba4:	3303      	adds	r3, #3
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	061b      	lsls	r3, r3, #24
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d90a      	bls.n	8001bda <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f004 ff36 	bl	8006a40 <realloc>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001be0:	2300      	movs	r3, #0
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d23f      	bcs.n	8001c6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	441a      	add	r2, r3
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 fb24 	bl	8002248 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c02:	3304      	adds	r3, #4
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d20c      	bcs.n	8001c30 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	441a      	add	r2, r3
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6839      	ldr	r1, [r7, #0]
 8001c22:	440b      	add	r3, r1
 8001c24:	7812      	ldrb	r2, [r2, #0]
 8001c26:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2e:	e7ec      	b.n	8001c0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4413      	add	r3, r2
 8001c36:	3b01      	subs	r3, #1
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c42:	3b01      	subs	r3, #1
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	441a      	add	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4413      	add	r3, r2
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	3220      	adds	r2, #32
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	3301      	adds	r3, #1
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c6c:	e7ba      	b.n	8001be4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001c70:	4618      	mov	r0, r3
 8001c72:	3738      	adds	r7, #56	; 0x38
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	080070a8 	.word	0x080070a8

08001c94 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	08006e0c 	.word	0x08006e0c

08001cb0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	611a      	str	r2, [r3, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68d8      	ldr	r0, [r3, #12]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6891      	ldr	r1, [r2, #8]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	4798      	blx	r3
 8001cfc:	4603      	mov	r3, r0
  };
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
  }
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <_ZN13STM32HardwareC1Ev+0x34>)
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	20000340 	.word	0x20000340

08001d7c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f804 	bl	8001d92 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3304      	adds	r3, #4
 8001da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da6:	4619      	mov	r1, r3
 8001da8:	f003 fb24 	bl	80053f4 <HAL_UART_Receive_DMA>
    }
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ffa8 	bl	8001d1e <_ZN13STM32Hardware10getRdmaIndEv>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	429c      	cmp	r4, r3
 8001dd2:	bf14      	ite	ne
 8001dd4:	2301      	movne	r3, #1
 8001dd6:	2300      	moveq	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d012      	beq.n	8001e04 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001de4:	1c59      	adds	r1, r3, #1
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	791b      	ldrb	r3, [r3, #4]
 8001df2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001dfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001e04:	68fb      	ldr	r3, [r7, #12]
    }
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}
	...

08001e10 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d108      	bne.n	8001e38 <_ZN13STM32Hardware5flushEv+0x28>
 8001e26:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	f083 0301 	eor.w	r3, r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <_ZN13STM32Hardware5flushEv+0x28>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <_ZN13STM32Hardware5flushEv+0x2a>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d03f      	beq.n	8001ebe <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001e3e:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d031      	beq.n	8001eb8 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d20a      	bcs.n	8001e7a <_ZN13STM32Hardware5flushEv+0x6a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	e006      	b.n	8001e88 <_ZN13STM32Hardware5flushEv+0x78>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001e94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	89fa      	ldrh	r2, [r7, #14]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f003 fa2a 	bl	80052f8 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001eaa:	89fb      	ldrh	r3, [r7, #14]
 8001eac:	4413      	add	r3, r2
 8001eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
      }
    }
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000488 	.word	0x20000488

08001ecc <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
      int n = length;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee2:	bfa8      	it	ge
 8001ee4:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001ee8:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001ef0:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	bf28      	it	cs
 8001efa:	4613      	movcs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 fd7f 	bl	8006a14 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d00b      	beq.n	8001f4a <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	18d1      	adds	r1, r2, r3
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	f004 fd65 	bl	8006a14 <memcpy>
      }

      flush();
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f7ff ff60 	bl	8001e10 <_ZN13STM32Hardware5flushEv>
    }
 8001f50:	bf00      	nop
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	f001 f906 	bl	8003170 <HAL_GetTick>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
      data("")
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff f858 	bl	8001030 <_ZN3ros3MsgC1Ev>
 8001f80:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <_ZN8std_msgs6StringC1Ev+0x28>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001f8a:	605a      	str	r2, [r3, #4]
    {
    }
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	080070e0 	.word	0x080070e0
 8001f9c:	08006d90 	.word	0x08006d90

08001fa0 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe f908 	bl	80001c8 <strlen>
 8001fb8:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f922 	bl	800220c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	3304      	adds	r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	18d0      	adds	r0, r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f004 fd1a 	bl	8006a14 <memcpy>
      offset += length_data;
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
      return offset;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
    }
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	441a      	add	r2, r3
 8002006:	f107 030c 	add.w	r3, r7, #12
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f000 f91b 	bl	8002248 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	3304      	adds	r3, #4
 8002016:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4413      	add	r3, r2
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	429a      	cmp	r2, r3
 8002026:	d20c      	bcs.n	8002042 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	441a      	add	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3b01      	subs	r3, #1
 8002032:	6839      	ldr	r1, [r7, #0]
 8002034:	440b      	add	r3, r1
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	e7ec      	b.n	800201c <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	3b01      	subs	r3, #1
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	4413      	add	r3, r2
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	3b01      	subs	r3, #1
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	441a      	add	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	605a      	str	r2, [r3, #4]
      offset += length_data;
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
     return offset;
 8002066:	693b      	ldr	r3, [r7, #16]
    }
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <_ZN8std_msgs6String7getTypeEv+0x18>)
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	08006e30 	.word	0x08006e30

0800208c <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	08006e40 	.word	0x08006e40

080020a8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	080070f8 	.word	0x080070f8

080020c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ffe8 	bl	80020a8 <_ZN3ros15NodeHandleBase_C1Ev>
 80020d8:	4a36      	ldr	r2, [pc, #216]	; (80021b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3304      	adds	r3, #4
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fe2e 	bl	8001d44 <_ZN13STM32HardwareC1Ev>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800210e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f004 fc8b 	bl	8006a30 <memset>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f004 fc82 	bl	8006a30 <memset>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002132:	2264      	movs	r2, #100	; 0x64
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f004 fc7a 	bl	8006a30 <memset>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8002142:	2264      	movs	r2, #100	; 0x64
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f004 fc72 	bl	8006a30 <memset>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fab8 	bl	8001718 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	080070cc 	.word	0x080070cc

080021b8 <setup>:
void HAL_UART_RxCpltCallback1(UART_HandleTypeDef *huart){
  nh.getHardware()->reset_rbuf();
}

void setup(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  nh.initNode();
 80021bc:	4804      	ldr	r0, [pc, #16]	; (80021d0 <setup+0x18>)
 80021be:	f000 f868 	bl	8002292 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 80021c2:	4904      	ldr	r1, [pc, #16]	; (80021d4 <setup+0x1c>)
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <setup+0x18>)
 80021c6:	f000 f881 	bl	80022cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2000048c 	.word	0x2000048c
 80021d4:	20000dd0 	.word	0x20000dd0

080021d8 <loop>:

void loop(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  str_msg.data = hello;
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <loop+0x24>)
 80021de:	4a08      	ldr	r2, [pc, #32]	; (8002200 <loop+0x28>)
 80021e0:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 80021e2:	4906      	ldr	r1, [pc, #24]	; (80021fc <loop+0x24>)
 80021e4:	4807      	ldr	r0, [pc, #28]	; (8002204 <loop+0x2c>)
 80021e6:	f7ff fd7a 	bl	8001cde <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 80021ea:	4807      	ldr	r0, [pc, #28]	; (8002208 <loop+0x30>)
 80021ec:	f000 f89e 	bl	800232c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(1000);
 80021f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021f4:	f000 ffc8 	bl	8003188 <HAL_Delay>
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000dc8 	.word	0x20000dc8
 8002200:	20000004 	.word	0x20000004
 8002204:	20000dd0 	.word	0x20000dd0
 8002208:	2000048c 	.word	0x2000048c

0800220c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d80d      	bhi.n	800223c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	fa22 f103 	lsr.w	r1, r2, r3
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	b2ca      	uxtb	r2, r1
 8002232:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	3301      	adds	r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	e7ee      	b.n	800221a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d811      	bhi.n	8002286 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6839      	ldr	r1, [r7, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	440a      	add	r2, r1
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	4611      	mov	r1, r2
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	00d2      	lsls	r2, r2, #3
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3301      	adds	r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e7ea      	b.n	800225c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3304      	adds	r3, #4
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fd6c 	bl	8001d7c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b18      	cmp	r3, #24
 80022de:	dc1e      	bgt.n	800231e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d111      	bne.n	8002316 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	60da      	str	r2, [r3, #12]
        return true;
 8002312:	2301      	movs	r3, #1
 8002314:	e004      	b.n	8002320 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	3301      	adds	r3, #1
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e7dd      	b.n	80022da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 800231e:	2300      	movs	r3, #0
  }
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3304      	adds	r3, #4
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fe0d 	bl	8001f58 <_ZN13STM32Hardware4timeEv>
 800233e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800234e:	4293      	cmp	r3, r2
 8002350:	d903      	bls.n	800235a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002360:	2b00      	cmp	r3, #0
 8002362:	d009      	beq.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	429a      	cmp	r2, r3
 800236e:	d903      	bls.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800237e:	2b00      	cmp	r3, #0
 8002380:	d014      	beq.n	80023ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3304      	adds	r3, #4
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fde6 	bl	8001f58 <_ZN13STM32Hardware4timeEv>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad2      	subs	r2, r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002398:	429a      	cmp	r2, r3
 800239a:	bf8c      	ite	hi
 800239c:	2301      	movhi	r3, #1
 800239e:	2300      	movls	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80023a6:	f06f 0301 	mvn.w	r3, #1
 80023aa:	e194      	b.n	80026d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3304      	adds	r3, #4
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fcff 	bl	8001db4 <_ZN13STM32Hardware4readEv>
 80023b6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f2c0 8174 	blt.w	80026a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	441a      	add	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80023d6:	2b07      	cmp	r3, #7
 80023d8:	d11e      	bne.n	8002418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80023e0:	1c59      	adds	r1, r3, #1
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	b2d1      	uxtb	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	460a      	mov	r2, r1
 80023f2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1b4      	bne.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2208      	movs	r2, #8
 8002412:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002416:	e7af      	b.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800241e:	2b00      	cmp	r3, #0
 8002420:	d128      	bne.n	8002474 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2bff      	cmp	r3, #255	; 0xff
 8002426:	d10d      	bne.n	8002444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f103 0214 	add.w	r2, r3, #20
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002442:	e799      	b.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3304      	adds	r3, #4
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fd85 	bl	8001f58 <_ZN13STM32Hardware4timeEv>
 800244e:	4602      	mov	r2, r0
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	bf8c      	ite	hi
 800245c:	2301      	movhi	r3, #1
 800245e:	2300      	movls	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d088      	beq.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800246e:	f06f 0301 	mvn.w	r3, #1
 8002472:	e130      	b.n	80026d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800247a:	2b01      	cmp	r3, #1
 800247c:	d118      	bne.n	80024b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2bfe      	cmp	r3, #254	; 0xfe
 8002482:	d107      	bne.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002492:	e771      	b.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f47f af68 	bne.w	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f918 	bl	80026de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80024ae:	e763      	b.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d113      	bne.n	80024e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80024e0:	e74a      	b.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d110      	bne.n	800250e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	441a      	add	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800250c:	e734      	b.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002514:	2b04      	cmp	r3, #4
 8002516:	d116      	bne.n	8002546 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800251e:	425a      	negs	r2, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	bf58      	it	pl
 8002526:	4253      	negpl	r3, r2
 8002528:	2bff      	cmp	r3, #255	; 0xff
 800252a:	d107      	bne.n	800253c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800253a:	e71d      	b.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002544:	e718      	b.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800254c:	2b05      	cmp	r3, #5
 800254e:	d10f      	bne.n	8002570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800256e:	e703      	b.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002576:	2b06      	cmp	r3, #6
 8002578:	d117      	bne.n	80025aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	441a      	add	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2207      	movs	r2, #7
 8002590:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800259a:	2b00      	cmp	r3, #0
 800259c:	f47f aeec 	bne.w	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2208      	movs	r2, #8
 80025a4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80025a8:	e6e6      	b.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	f47f aee1 	bne.w	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80025c4:	425a      	negs	r2, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	bf58      	it	pl
 80025cc:	4253      	negpl	r3, r2
 80025ce:	2bff      	cmp	r3, #255	; 0xff
 80025d0:	f47f aed2 	bne.w	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d110      	bne.n	8002600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f87d 	bl	80026de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f898 	bl	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	e06a      	b.n	80026d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002606:	2b0a      	cmp	r3, #10
 8002608:	d107      	bne.n	800261a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002610:	4619      	mov	r1, r3
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f960 	bl	80028d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8002618:	e6ae      	b.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002620:	2b06      	cmp	r3, #6
 8002622:	d10e      	bne.n	8002642 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f7ff f9af 	bl	8001996 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002640:	e69a      	b.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002648:	2b0b      	cmp	r3, #11
 800264a:	d104      	bne.n	8002656 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002654:	e690      	b.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800265c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266a:	2b00      	cmp	r3, #0
 800266c:	f43f ae84 	beq.w	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002676:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002680:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800268a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80026a2:	4611      	mov	r1, r2
 80026a4:	4798      	blx	r3
    while (true)
 80026a6:	e667      	b.n	8002378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80026a8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00f      	beq.n	80026d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d906      	bls.n	80026d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f809 	bl	80026de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80026d4:	2300      	movs	r3, #0
  }
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80026e6:	f107 030c 	add.w	r3, r7, #12
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fcb0 	bl	8001050 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f107 020c 	add.w	r2, r7, #12
 80026fa:	210a      	movs	r1, #10
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	4798      	blx	r3
    rt_time = hardware_.time();
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fc27 	bl	8001f58 <_ZN13STM32Hardware4timeEv>
 800270a:	4602      	mov	r2, r0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8002712:	bf00      	nop
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 800271a:	b590      	push	{r4, r7, lr}
 800271c:	b08b      	sub	sp, #44	; 0x2c
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002722:	f107 030c 	add.w	r3, r7, #12
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fd82 	bl	8001230 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800272c:	2300      	movs	r3, #0
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	2b18      	cmp	r3, #24
 8002734:	dc63      	bgt.n	80027fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d056      	beq.n	80027f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	b29b      	uxth	r3, r3
 800275a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	6859      	ldr	r1, [r3, #4]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3308      	adds	r3, #8
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4608      	mov	r0, r1
 8002796:	4798      	blx	r3
 8002798:	4603      	mov	r3, r0
 800279a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	330c      	adds	r3, #12
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4608      	mov	r0, r1
 80027c4:	4798      	blx	r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80027ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027ce:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681c      	ldr	r4, [r3, #0]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fa8e 	bl	8001d06 <_ZN3ros9Publisher15getEndpointTypeEv>
 80027ea:	4601      	mov	r1, r0
 80027ec:	f107 030c 	add.w	r3, r7, #12
 80027f0:	461a      	mov	r2, r3
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	3301      	adds	r3, #1
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
 80027fc:	e798      	b.n	8002730 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	2b18      	cmp	r3, #24
 8002806:	dc5f      	bgt.n	80028c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d053      	beq.n	80028c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	b29b      	uxth	r3, r3
 8002828:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002842:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800284e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3308      	adds	r3, #8
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4608      	mov	r0, r1
 800285a:	4798      	blx	r3
 800285c:	4603      	mov	r3, r0
 800285e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002864:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002868:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002870:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	330c      	adds	r3, #12
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4608      	mov	r0, r1
 8002880:	4798      	blx	r3
 8002882:	4603      	mov	r3, r0
 8002884:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800288a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681c      	ldr	r4, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002896:	f202 2222 	addw	r2, r2, #546	; 0x222
 800289a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80028a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3304      	adds	r3, #4
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4608      	mov	r0, r1
 80028b2:	4798      	blx	r3
 80028b4:	4601      	mov	r1, r0
 80028b6:	f107 030c 	add.w	r3, r7, #12
 80028ba:	461a      	mov	r2, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	3301      	adds	r3, #1
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
 80028c6:	e79c      	b.n	8002802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80028d0:	bf00      	nop
 80028d2:	372c      	adds	r7, #44	; 0x2c
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd90      	pop	{r4, r7, pc}

080028d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fbb2 	bl	8001050 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fb31 	bl	8001f58 <_ZN13STM32Hardware4timeEv>
 80028f6:	4602      	mov	r2, r0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002902:	f107 0308 	add.w	r3, r7, #8
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fc11 	bl	8001130 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	4915      	ldr	r1, [pc, #84]	; (8002968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002914:	fba1 1303 	umull	r1, r3, r1, r3
 8002918:	099b      	lsrs	r3, r3, #6
 800291a:	4413      	add	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800291e:	6939      	ldr	r1, [r7, #16]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002924:	fba3 0302 	umull	r0, r3, r3, r2
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800292e:	fb00 f303 	mul.w	r3, r0, r3
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	4a0d      	ldr	r2, [pc, #52]	; (800296c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002936:	fb02 f303 	mul.w	r3, r2, r3
 800293a:	440b      	add	r3, r1
 800293c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800293e:	f107 0308 	add.w	r3, r7, #8
 8002942:	3304      	adds	r3, #4
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f8a6 	bl	8002a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3304      	adds	r3, #4
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fb01 	bl	8001f58 <_ZN13STM32Hardware4timeEv>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	10624dd3 	.word	0x10624dd3
 800296c:	000f4240 	.word	0x000f4240

08002970 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b63      	cmp	r3, #99	; 0x63
 8002980:	dd09      	ble.n	8002996 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002988:	f083 0301 	eor.w	r3, r3, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002992:	2300      	movs	r3, #0
 8002994:	e079      	b.n	8002a8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80029a2:	3207      	adds	r2, #7
 80029a4:	4611      	mov	r1, r2
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
 80029aa:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	22ff      	movs	r2, #255	; 0xff
 80029b0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	22fe      	movs	r2, #254	; 0xfe
 80029b8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80029e2:	4413      	add	r3, r2
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	b21b      	sxth	r3, r3
 80029fe:	121b      	asrs	r3, r3, #8
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002a0e:	2305      	movs	r3, #5
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3306      	adds	r3, #6
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	dc0d      	bgt.n	8002a38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4413      	add	r3, r2
 8002a22:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	3301      	adds	r3, #1
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	e7ec      	b.n	8002a12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	3307      	adds	r3, #7
 8002a3c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	425a      	negs	r2, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	bf58      	it	pl
 8002a48:	4253      	negpl	r3, r2
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	1c59      	adds	r1, r3, #1
 8002a50:	6179      	str	r1, [r7, #20]
 8002a52:	43d2      	mvns	r2, r2
 8002a54:	b2d1      	uxtb	r1, r2
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4413      	add	r3, r2
 8002a5a:	460a      	mov	r2, r1
 8002a5c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a66:	dc0a      	bgt.n	8002a7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1d18      	adds	r0, r3, #4
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4619      	mov	r1, r3
 8002a76:	f7ff fa29 	bl	8001ecc <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	e005      	b.n	8002a8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002a7e:	4905      	ldr	r1, [pc, #20]	; (8002a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f849 	bl	8002b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	08006e64 	.word	0x08006e64

08002a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fa56 	bl	8001f58 <_ZN13STM32Hardware4timeEv>
 8002aac:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4915      	ldr	r1, [pc, #84]	; (8002b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002ab6:	fba1 1303 	umull	r1, r3, r1, r3
 8002aba:	099b      	lsrs	r3, r3, #6
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	1e5a      	subs	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6859      	ldr	r1, [r3, #4]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002ace:	fba3 0302 	umull	r0, r3, r3, r2
 8002ad2:	099b      	lsrs	r3, r3, #6
 8002ad4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ad8:	fb00 f303 	mul.w	r3, r0, r3
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	4a0c      	ldr	r2, [pc, #48]	; (8002b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	1aca      	subs	r2, r1, r3
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8002ae8:	4413      	add	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002afc:	4619      	mov	r1, r3
 8002afe:	4610      	mov	r0, r2
 8002b00:	f000 fa7a 	bl	8002ff8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	10624dd3 	.word	0x10624dd3
 8002b10:	000f4240 	.word	0x000f4240
 8002b14:	3b9aca00 	.word	0x3b9aca00

08002b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	2103      	movs	r1, #3
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f804 	bl	8002b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002b42:	f107 0314 	add.w	r3, r7, #20
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fd36 	bl	80015b8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002b4c:	7afb      	ldrb	r3, [r7, #11]
 8002b4e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f107 0214 	add.w	r2, r7, #20
 8002b5e:	2107      	movs	r1, #7
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	4798      	blx	r3
  }
 8002b64:	bf00      	nop
 8002b66:	3720      	adds	r7, #32
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_Z41__static_initialization_and_destruction_0ii>:
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d110      	bne.n	8002b9e <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10b      	bne.n	8002b9e <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8002b86:	4808      	ldr	r0, [pc, #32]	; (8002ba8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002b88:	f7ff fa9e 	bl	80020c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8002b8c:	4807      	ldr	r0, [pc, #28]	; (8002bac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002b8e:	f7ff f9ef 	bl	8001f70 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8002b92:	2300      	movs	r3, #0
 8002b94:	4a05      	ldr	r2, [pc, #20]	; (8002bac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002b96:	4906      	ldr	r1, [pc, #24]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002b98:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002b9a:	f7ff f889 	bl	8001cb0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	2000048c 	.word	0x2000048c
 8002bac:	20000dc8 	.word	0x20000dc8
 8002bb0:	08006ea0 	.word	0x08006ea0
 8002bb4:	20000dd0 	.word	0x20000dd0

08002bb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
    return configured_;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <_GLOBAL__sub_I_nh>:
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f7ff ffc6 	bl	8002b6c <_Z41__static_initialization_and_destruction_0ii>
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_MspInit+0x4c>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <HAL_MspInit+0x4c>)
 8002bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <HAL_MspInit+0x4c>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_MspInit+0x4c>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a08      	ldr	r2, [pc, #32]	; (8002c30 <HAL_MspInit+0x4c>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_MspInit+0x4c>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800

08002c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c44:	d115      	bne.n	8002c72 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <HAL_TIM_Base_MspInit+0x48>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a0b      	ldr	r2, [pc, #44]	; (8002c7c <HAL_TIM_Base_MspInit+0x48>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_TIM_Base_MspInit+0x48>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	201c      	movs	r0, #28
 8002c68:	f000 fb8d 	bl	8003386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c6c:	201c      	movs	r0, #28
 8002c6e:	f000 fba6 	bl	80033be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800

08002c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08c      	sub	sp, #48	; 0x30
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 031c 	add.w	r3, r7, #28
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a6a      	ldr	r2, [pc, #424]	; (8002e48 <HAL_UART_MspInit+0x1c8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	f040 8094 	bne.w	8002dcc <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	4b68      	ldr	r3, [pc, #416]	; (8002e4c <HAL_UART_MspInit+0x1cc>)
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	4a67      	ldr	r2, [pc, #412]	; (8002e4c <HAL_UART_MspInit+0x1cc>)
 8002cae:	f043 0310 	orr.w	r3, r3, #16
 8002cb2:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb4:	4b65      	ldr	r3, [pc, #404]	; (8002e4c <HAL_UART_MspInit+0x1cc>)
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	4b61      	ldr	r3, [pc, #388]	; (8002e4c <HAL_UART_MspInit+0x1cc>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	4a60      	ldr	r2, [pc, #384]	; (8002e4c <HAL_UART_MspInit+0x1cc>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd0:	4b5e      	ldr	r3, [pc, #376]	; (8002e4c <HAL_UART_MspInit+0x1cc>)
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cdc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cea:	2303      	movs	r3, #3
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cee:	2307      	movs	r3, #7
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf2:	f107 031c 	add.w	r3, r7, #28
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4855      	ldr	r0, [pc, #340]	; (8002e50 <HAL_UART_MspInit+0x1d0>)
 8002cfa:	f000 ff7d 	bl	8003bf8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002cfe:	4b55      	ldr	r3, [pc, #340]	; (8002e54 <HAL_UART_MspInit+0x1d4>)
 8002d00:	4a55      	ldr	r2, [pc, #340]	; (8002e58 <HAL_UART_MspInit+0x1d8>)
 8002d02:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002d04:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <HAL_UART_MspInit+0x1d4>)
 8002d06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d0a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d0c:	4b51      	ldr	r3, [pc, #324]	; (8002e54 <HAL_UART_MspInit+0x1d4>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d12:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <HAL_UART_MspInit+0x1d4>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d18:	4b4e      	ldr	r3, [pc, #312]	; (8002e54 <HAL_UART_MspInit+0x1d4>)
 8002d1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d20:	4b4c      	ldr	r3, [pc, #304]	; (8002e54 <HAL_UART_MspInit+0x1d4>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d26:	4b4b      	ldr	r3, [pc, #300]	; (8002e54 <HAL_UART_MspInit+0x1d4>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002d2c:	4b49      	ldr	r3, [pc, #292]	; (8002e54 <HAL_UART_MspInit+0x1d4>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d32:	4b48      	ldr	r3, [pc, #288]	; (8002e54 <HAL_UART_MspInit+0x1d4>)
 8002d34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d38:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d3a:	4b46      	ldr	r3, [pc, #280]	; (8002e54 <HAL_UART_MspInit+0x1d4>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d40:	4844      	ldr	r0, [pc, #272]	; (8002e54 <HAL_UART_MspInit+0x1d4>)
 8002d42:	f000 fb57 	bl	80033f4 <HAL_DMA_Init>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002d4c:	f7fe f95a 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a40      	ldr	r2, [pc, #256]	; (8002e54 <HAL_UART_MspInit+0x1d4>)
 8002d54:	639a      	str	r2, [r3, #56]	; 0x38
 8002d56:	4a3f      	ldr	r2, [pc, #252]	; (8002e54 <HAL_UART_MspInit+0x1d4>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002d5c:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <HAL_UART_MspInit+0x1dc>)
 8002d5e:	4a40      	ldr	r2, [pc, #256]	; (8002e60 <HAL_UART_MspInit+0x1e0>)
 8002d60:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002d62:	4b3e      	ldr	r3, [pc, #248]	; (8002e5c <HAL_UART_MspInit+0x1dc>)
 8002d64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d68:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d6a:	4b3c      	ldr	r3, [pc, #240]	; (8002e5c <HAL_UART_MspInit+0x1dc>)
 8002d6c:	2240      	movs	r2, #64	; 0x40
 8002d6e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d70:	4b3a      	ldr	r3, [pc, #232]	; (8002e5c <HAL_UART_MspInit+0x1dc>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d76:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <HAL_UART_MspInit+0x1dc>)
 8002d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d7c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d7e:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <HAL_UART_MspInit+0x1dc>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d84:	4b35      	ldr	r3, [pc, #212]	; (8002e5c <HAL_UART_MspInit+0x1dc>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d8a:	4b34      	ldr	r3, [pc, #208]	; (8002e5c <HAL_UART_MspInit+0x1dc>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d90:	4b32      	ldr	r3, [pc, #200]	; (8002e5c <HAL_UART_MspInit+0x1dc>)
 8002d92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d96:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d98:	4b30      	ldr	r3, [pc, #192]	; (8002e5c <HAL_UART_MspInit+0x1dc>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d9e:	482f      	ldr	r0, [pc, #188]	; (8002e5c <HAL_UART_MspInit+0x1dc>)
 8002da0:	f000 fb28 	bl	80033f4 <HAL_DMA_Init>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002daa:	f7fe f92b 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a2a      	ldr	r2, [pc, #168]	; (8002e5c <HAL_UART_MspInit+0x1dc>)
 8002db2:	635a      	str	r2, [r3, #52]	; 0x34
 8002db4:	4a29      	ldr	r2, [pc, #164]	; (8002e5c <HAL_UART_MspInit+0x1dc>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2025      	movs	r0, #37	; 0x25
 8002dc0:	f000 fae1 	bl	8003386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dc4:	2025      	movs	r0, #37	; 0x25
 8002dc6:	f000 fafa 	bl	80033be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002dca:	e039      	b.n	8002e40 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART3)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <HAL_UART_MspInit+0x1e4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d134      	bne.n	8002e40 <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	4b1c      	ldr	r3, [pc, #112]	; (8002e4c <HAL_UART_MspInit+0x1cc>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a1b      	ldr	r2, [pc, #108]	; (8002e4c <HAL_UART_MspInit+0x1cc>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
 8002de6:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_UART_MspInit+0x1cc>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <HAL_UART_MspInit+0x1cc>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <HAL_UART_MspInit+0x1cc>)
 8002dfc:	f043 0304 	orr.w	r3, r3, #4
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_UART_MspInit+0x1cc>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e14:	2302      	movs	r3, #2
 8002e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e20:	2307      	movs	r3, #7
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e24:	f107 031c 	add.w	r3, r7, #28
 8002e28:	4619      	mov	r1, r3
 8002e2a:	480f      	ldr	r0, [pc, #60]	; (8002e68 <HAL_UART_MspInit+0x1e8>)
 8002e2c:	f000 fee4 	bl	8003bf8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2100      	movs	r1, #0
 8002e34:	2027      	movs	r0, #39	; 0x27
 8002e36:	f000 faa6 	bl	8003386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e3a:	2027      	movs	r0, #39	; 0x27
 8002e3c:	f000 fabf 	bl	80033be <HAL_NVIC_EnableIRQ>
}
 8002e40:	bf00      	nop
 8002e42:	3730      	adds	r7, #48	; 0x30
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40011000 	.word	0x40011000
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40020000 	.word	0x40020000
 8002e54:	200003c8 	.word	0x200003c8
 8002e58:	40026440 	.word	0x40026440
 8002e5c:	20000428 	.word	0x20000428
 8002e60:	400264b8 	.word	0x400264b8
 8002e64:	40004800 	.word	0x40004800
 8002e68:	40020800 	.word	0x40020800

08002e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e70:	e7fe      	b.n	8002e70 <NMI_Handler+0x4>

08002e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e72:	b480      	push	{r7}
 8002e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e76:	e7fe      	b.n	8002e76 <HardFault_Handler+0x4>

08002e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e7c:	e7fe      	b.n	8002e7c <MemManage_Handler+0x4>

08002e7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e82:	e7fe      	b.n	8002e82 <BusFault_Handler+0x4>

08002e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e88:	e7fe      	b.n	8002e88 <UsageFault_Handler+0x4>

08002e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eb8:	f000 f946 	bl	8003148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <TIM2_IRQHandler+0x10>)
 8002ec6:	f001 fd94 	bl	80049f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200002f8 	.word	0x200002f8

08002ed4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <USART1_IRQHandler+0x10>)
 8002eda:	f002 fbe1 	bl	80056a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000340 	.word	0x20000340

08002ee8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <USART3_IRQHandler+0x10>)
 8002eee:	f002 fbd7 	bl	80056a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000384 	.word	0x20000384

08002efc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002f00:	4802      	ldr	r0, [pc, #8]	; (8002f0c <DMA2_Stream2_IRQHandler+0x10>)
 8002f02:	f000 fc0f 	bl	8003724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	200003c8 	.word	0x200003c8

08002f10 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002f14:	4802      	ldr	r0, [pc, #8]	; (8002f20 <DMA2_Stream7_IRQHandler+0x10>)
 8002f16:	f000 fc05 	bl	8003724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000428 	.word	0x20000428

08002f24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
	return 1;
 8002f28:	2301      	movs	r3, #1
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <_kill>:

int _kill(int pid, int sig)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f3e:	f003 fd3f 	bl	80069c0 <__errno>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2216      	movs	r2, #22
 8002f46:	601a      	str	r2, [r3, #0]
	return -1;
 8002f48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <_exit>:

void _exit (int status)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff ffe7 	bl	8002f34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f66:	e7fe      	b.n	8002f66 <_exit+0x12>

08002f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f70:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <_sbrk+0x5c>)
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <_sbrk+0x60>)
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f7c:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <_sbrk+0x64>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d102      	bne.n	8002f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <_sbrk+0x64>)
 8002f86:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <_sbrk+0x68>)
 8002f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <_sbrk+0x64>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d207      	bcs.n	8002fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f98:	f003 fd12 	bl	80069c0 <__errno>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	220c      	movs	r2, #12
 8002fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa6:	e009      	b.n	8002fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fa8:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <_sbrk+0x64>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <_sbrk+0x64>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	4a05      	ldr	r2, [pc, #20]	; (8002fcc <_sbrk+0x64>)
 8002fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fba:	68fb      	ldr	r3, [r7, #12]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20020000 	.word	0x20020000
 8002fc8:	00000400 	.word	0x00000400
 8002fcc:	20000de4 	.word	0x20000de4
 8002fd0:	20000e00 	.word	0x20000e00

08002fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <SystemInit+0x20>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	4a05      	ldr	r2, [pc, #20]	; (8002ff4 <SystemInit+0x20>)
 8002fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	0a5a      	lsrs	r2, r3, #9
 8003008:	490f      	ldr	r1, [pc, #60]	; (8003048 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800300a:	fba1 1202 	umull	r1, r2, r1, r2
 800300e:	09d2      	lsrs	r2, r2, #7
 8003010:	490e      	ldr	r1, [pc, #56]	; (800304c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8003012:	fb01 f202 	mul.w	r2, r1, r2
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	0a5b      	lsrs	r3, r3, #9
 8003020:	4a09      	ldr	r2, [pc, #36]	; (8003048 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	09db      	lsrs	r3, r3, #7
 8003028:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	441a      	add	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	601a      	str	r2, [r3, #0]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	00044b83 	.word	0x00044b83
 800304c:	3b9aca00 	.word	0x3b9aca00

08003050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003088 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003054:	480d      	ldr	r0, [pc, #52]	; (800308c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003056:	490e      	ldr	r1, [pc, #56]	; (8003090 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003058:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800305a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800305c:	e002      	b.n	8003064 <LoopCopyDataInit>

0800305e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800305e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003062:	3304      	adds	r3, #4

08003064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003068:	d3f9      	bcc.n	800305e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306a:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800306c:	4c0b      	ldr	r4, [pc, #44]	; (800309c <LoopFillZerobss+0x26>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003070:	e001      	b.n	8003076 <LoopFillZerobss>

08003072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003074:	3204      	adds	r2, #4

08003076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003078:	d3fb      	bcc.n	8003072 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800307a:	f7ff ffab 	bl	8002fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800307e:	f003 fca5 	bl	80069cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003082:	f7fd fe27 	bl	8000cd4 <main>
  bx  lr    
 8003086:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800308c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003090:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003094:	080071b0 	.word	0x080071b0
  ldr r2, =_sbss
 8003098:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800309c:	20000dfc 	.word	0x20000dfc

080030a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a0:	e7fe      	b.n	80030a0 <ADC_IRQHandler>
	...

080030a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HAL_Init+0x40>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <HAL_Init+0x40>)
 80030ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_Init+0x40>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <HAL_Init+0x40>)
 80030ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <HAL_Init+0x40>)
 80030c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030cc:	2003      	movs	r0, #3
 80030ce:	f000 f94f 	bl	8003370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d2:	200f      	movs	r0, #15
 80030d4:	f000 f808 	bl	80030e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030d8:	f7ff fd84 	bl	8002be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023c00 	.word	0x40023c00

080030e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_InitTick+0x54>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_InitTick+0x58>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	4618      	mov	r0, r3
 8003108:	f000 f967 	bl	80033da <HAL_SYSTICK_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e00e      	b.n	8003134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b0f      	cmp	r3, #15
 800311a:	d80a      	bhi.n	8003132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800311c:	2200      	movs	r2, #0
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	f000 f92f 	bl	8003386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003128:	4a06      	ldr	r2, [pc, #24]	; (8003144 <HAL_InitTick+0x5c>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	2000001c 	.word	0x2000001c
 8003140:	20000024 	.word	0x20000024
 8003144:	20000020 	.word	0x20000020

08003148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_IncTick+0x20>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_IncTick+0x24>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4413      	add	r3, r2
 8003158:	4a04      	ldr	r2, [pc, #16]	; (800316c <HAL_IncTick+0x24>)
 800315a:	6013      	str	r3, [r2, #0]
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000024 	.word	0x20000024
 800316c:	20000de8 	.word	0x20000de8

08003170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return uwTick;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <HAL_GetTick+0x14>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000de8 	.word	0x20000de8

08003188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003190:	f7ff ffee 	bl	8003170 <HAL_GetTick>
 8003194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d005      	beq.n	80031ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_Delay+0x44>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ae:	bf00      	nop
 80031b0:	f7ff ffde 	bl	8003170 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d8f7      	bhi.n	80031b0 <HAL_Delay+0x28>
  {
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000024 	.word	0x20000024

080031d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <__NVIC_SetPriorityGrouping+0x44>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031ec:	4013      	ands	r3, r2
 80031ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003202:	4a04      	ldr	r2, [pc, #16]	; (8003214 <__NVIC_SetPriorityGrouping+0x44>)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	60d3      	str	r3, [r2, #12]
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <__NVIC_GetPriorityGrouping+0x18>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	0a1b      	lsrs	r3, r3, #8
 8003222:	f003 0307 	and.w	r3, r3, #7
}
 8003226:	4618      	mov	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	2b00      	cmp	r3, #0
 8003244:	db0b      	blt.n	800325e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	f003 021f 	and.w	r2, r3, #31
 800324c:	4907      	ldr	r1, [pc, #28]	; (800326c <__NVIC_EnableIRQ+0x38>)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2001      	movs	r0, #1
 8003256:	fa00 f202 	lsl.w	r2, r0, r2
 800325a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000e100 	.word	0xe000e100

08003270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	6039      	str	r1, [r7, #0]
 800327a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003280:	2b00      	cmp	r3, #0
 8003282:	db0a      	blt.n	800329a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	b2da      	uxtb	r2, r3
 8003288:	490c      	ldr	r1, [pc, #48]	; (80032bc <__NVIC_SetPriority+0x4c>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	0112      	lsls	r2, r2, #4
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	440b      	add	r3, r1
 8003294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003298:	e00a      	b.n	80032b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4908      	ldr	r1, [pc, #32]	; (80032c0 <__NVIC_SetPriority+0x50>)
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	3b04      	subs	r3, #4
 80032a8:	0112      	lsls	r2, r2, #4
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	440b      	add	r3, r1
 80032ae:	761a      	strb	r2, [r3, #24]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	e000e100 	.word	0xe000e100
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	; 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f1c3 0307 	rsb	r3, r3, #7
 80032de:	2b04      	cmp	r3, #4
 80032e0:	bf28      	it	cs
 80032e2:	2304      	movcs	r3, #4
 80032e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3304      	adds	r3, #4
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d902      	bls.n	80032f4 <NVIC_EncodePriority+0x30>
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3b03      	subs	r3, #3
 80032f2:	e000      	b.n	80032f6 <NVIC_EncodePriority+0x32>
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	f04f 32ff 	mov.w	r2, #4294967295
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43da      	mvns	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	401a      	ands	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800330c:	f04f 31ff 	mov.w	r1, #4294967295
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	43d9      	mvns	r1, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800331c:	4313      	orrs	r3, r2
         );
}
 800331e:	4618      	mov	r0, r3
 8003320:	3724      	adds	r7, #36	; 0x24
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3b01      	subs	r3, #1
 8003338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800333c:	d301      	bcc.n	8003342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800333e:	2301      	movs	r3, #1
 8003340:	e00f      	b.n	8003362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003342:	4a0a      	ldr	r2, [pc, #40]	; (800336c <SysTick_Config+0x40>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3b01      	subs	r3, #1
 8003348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800334a:	210f      	movs	r1, #15
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	f7ff ff8e 	bl	8003270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <SysTick_Config+0x40>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800335a:	4b04      	ldr	r3, [pc, #16]	; (800336c <SysTick_Config+0x40>)
 800335c:	2207      	movs	r2, #7
 800335e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	e000e010 	.word	0xe000e010

08003370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ff29 	bl	80031d0 <__NVIC_SetPriorityGrouping>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003386:	b580      	push	{r7, lr}
 8003388:	b086      	sub	sp, #24
 800338a:	af00      	add	r7, sp, #0
 800338c:	4603      	mov	r3, r0
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003398:	f7ff ff3e 	bl	8003218 <__NVIC_GetPriorityGrouping>
 800339c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	6978      	ldr	r0, [r7, #20]
 80033a4:	f7ff ff8e 	bl	80032c4 <NVIC_EncodePriority>
 80033a8:	4602      	mov	r2, r0
 80033aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff ff5d 	bl	8003270 <__NVIC_SetPriority>
}
 80033b6:	bf00      	nop
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff31 	bl	8003234 <__NVIC_EnableIRQ>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff ffa2 	bl	800332c <SysTick_Config>
 80033e8:	4603      	mov	r3, r0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7ff feb6 	bl	8003170 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e099      	b.n	8003544 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003430:	e00f      	b.n	8003452 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003432:	f7ff fe9d 	bl	8003170 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b05      	cmp	r3, #5
 800343e:	d908      	bls.n	8003452 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2203      	movs	r2, #3
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e078      	b.n	8003544 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e8      	bne.n	8003432 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4b38      	ldr	r3, [pc, #224]	; (800354c <HAL_DMA_Init+0x158>)
 800346c:	4013      	ands	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800347e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003496:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d107      	bne.n	80034bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	4313      	orrs	r3, r2
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f023 0307 	bic.w	r3, r3, #7
 80034d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d117      	bne.n	8003516 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00e      	beq.n	8003516 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fb01 	bl	8003b00 <DMA_CheckFifoParam>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2240      	movs	r2, #64	; 0x40
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003512:	2301      	movs	r3, #1
 8003514:	e016      	b.n	8003544 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fab8 	bl	8003a94 <DMA_CalcBaseAndBitshift>
 8003524:	4603      	mov	r3, r0
 8003526:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	223f      	movs	r2, #63	; 0x3f
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	f010803f 	.word	0xf010803f

08003550 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003566:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_DMA_Start_IT+0x26>
 8003572:	2302      	movs	r3, #2
 8003574:	e040      	b.n	80035f8 <HAL_DMA_Start_IT+0xa8>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d12f      	bne.n	80035ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fa4a 	bl	8003a38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a8:	223f      	movs	r2, #63	; 0x3f
 80035aa:	409a      	lsls	r2, r3
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0216 	orr.w	r2, r2, #22
 80035be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0208 	orr.w	r2, r2, #8
 80035d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	e005      	b.n	80035f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035f2:	2302      	movs	r3, #2
 80035f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800360e:	f7ff fdaf 	bl	8003170 <HAL_GetTick>
 8003612:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d008      	beq.n	8003632 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2280      	movs	r2, #128	; 0x80
 8003624:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e052      	b.n	80036d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0216 	bic.w	r2, r2, #22
 8003640:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003650:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d103      	bne.n	8003662 <HAL_DMA_Abort+0x62>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0208 	bic.w	r2, r2, #8
 8003670:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003682:	e013      	b.n	80036ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003684:	f7ff fd74 	bl	8003170 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b05      	cmp	r3, #5
 8003690:	d90c      	bls.n	80036ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2203      	movs	r2, #3
 800369c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e015      	b.n	80036d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1e4      	bne.n	8003684 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	223f      	movs	r2, #63	; 0x3f
 80036c0:	409a      	lsls	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d004      	beq.n	80036fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2280      	movs	r2, #128	; 0x80
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e00c      	b.n	8003718 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2205      	movs	r2, #5
 8003702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0201 	bic.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003730:	4b8e      	ldr	r3, [pc, #568]	; (800396c <HAL_DMA_IRQHandler+0x248>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a8e      	ldr	r2, [pc, #568]	; (8003970 <HAL_DMA_IRQHandler+0x24c>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	0a9b      	lsrs	r3, r3, #10
 800373c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374e:	2208      	movs	r2, #8
 8003750:	409a      	lsls	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01a      	beq.n	8003790 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d013      	beq.n	8003790 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0204 	bic.w	r2, r2, #4
 8003776:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	2208      	movs	r2, #8
 800377e:	409a      	lsls	r2, r3
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003788:	f043 0201 	orr.w	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003794:	2201      	movs	r2, #1
 8003796:	409a      	lsls	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d012      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b2:	2201      	movs	r2, #1
 80037b4:	409a      	lsls	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	f043 0202 	orr.w	r2, r3, #2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ca:	2204      	movs	r2, #4
 80037cc:	409a      	lsls	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d012      	beq.n	80037fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00b      	beq.n	80037fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e8:	2204      	movs	r2, #4
 80037ea:	409a      	lsls	r2, r3
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f4:	f043 0204 	orr.w	r2, r3, #4
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	2210      	movs	r2, #16
 8003802:	409a      	lsls	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d043      	beq.n	8003894 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d03c      	beq.n	8003894 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	2210      	movs	r2, #16
 8003820:	409a      	lsls	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d018      	beq.n	8003866 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d108      	bne.n	8003854 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d024      	beq.n	8003894 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	4798      	blx	r3
 8003852:	e01f      	b.n	8003894 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01b      	beq.n	8003894 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
 8003864:	e016      	b.n	8003894 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d107      	bne.n	8003884 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0208 	bic.w	r2, r2, #8
 8003882:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003898:	2220      	movs	r2, #32
 800389a:	409a      	lsls	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 808f 	beq.w	80039c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8087 	beq.w	80039c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ba:	2220      	movs	r2, #32
 80038bc:	409a      	lsls	r2, r3
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d136      	bne.n	800393c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0216 	bic.w	r2, r2, #22
 80038dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d103      	bne.n	80038fe <HAL_DMA_IRQHandler+0x1da>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0208 	bic.w	r2, r2, #8
 800390c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	223f      	movs	r2, #63	; 0x3f
 8003914:	409a      	lsls	r2, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392e:	2b00      	cmp	r3, #0
 8003930:	d07e      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4798      	blx	r3
        }
        return;
 800393a:	e079      	b.n	8003a30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d01d      	beq.n	8003986 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10d      	bne.n	8003974 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	2b00      	cmp	r3, #0
 800395e:	d031      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
 8003968:	e02c      	b.n	80039c4 <HAL_DMA_IRQHandler+0x2a0>
 800396a:	bf00      	nop
 800396c:	2000001c 	.word	0x2000001c
 8003970:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d023      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
 8003984:	e01e      	b.n	80039c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10f      	bne.n	80039b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0210 	bic.w	r2, r2, #16
 80039a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d032      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d022      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2205      	movs	r2, #5
 80039dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	3301      	adds	r3, #1
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d307      	bcc.n	8003a0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f2      	bne.n	80039f0 <HAL_DMA_IRQHandler+0x2cc>
 8003a0a:	e000      	b.n	8003a0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	4798      	blx	r3
 8003a2e:	e000      	b.n	8003a32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a30:	bf00      	nop
    }
  }
}
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d108      	bne.n	8003a78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a76:	e007      	b.n	8003a88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	60da      	str	r2, [r3, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	3b10      	subs	r3, #16
 8003aa4:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <DMA_CalcBaseAndBitshift+0x64>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003aae:	4a13      	ldr	r2, [pc, #76]	; (8003afc <DMA_CalcBaseAndBitshift+0x68>)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d909      	bls.n	8003ad6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aca:	f023 0303 	bic.w	r3, r3, #3
 8003ace:	1d1a      	adds	r2, r3, #4
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ad4:	e007      	b.n	8003ae6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	aaaaaaab 	.word	0xaaaaaaab
 8003afc:	08007194 	.word	0x08007194

08003b00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d11f      	bne.n	8003b5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d856      	bhi.n	8003bce <DMA_CheckFifoParam+0xce>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <DMA_CheckFifoParam+0x28>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b39 	.word	0x08003b39
 8003b2c:	08003b4b 	.word	0x08003b4b
 8003b30:	08003b39 	.word	0x08003b39
 8003b34:	08003bcf 	.word	0x08003bcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d046      	beq.n	8003bd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b48:	e043      	b.n	8003bd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b52:	d140      	bne.n	8003bd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b58:	e03d      	b.n	8003bd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b62:	d121      	bne.n	8003ba8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d837      	bhi.n	8003bda <DMA_CheckFifoParam+0xda>
 8003b6a:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <DMA_CheckFifoParam+0x70>)
 8003b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b70:	08003b81 	.word	0x08003b81
 8003b74:	08003b87 	.word	0x08003b87
 8003b78:	08003b81 	.word	0x08003b81
 8003b7c:	08003b99 	.word	0x08003b99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
      break;
 8003b84:	e030      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d025      	beq.n	8003bde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b96:	e022      	b.n	8003bde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ba0:	d11f      	bne.n	8003be2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ba6:	e01c      	b.n	8003be2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d903      	bls.n	8003bb6 <DMA_CheckFifoParam+0xb6>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d003      	beq.n	8003bbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bb4:	e018      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8003bba:	e015      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00e      	beq.n	8003be6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
      break;
 8003bcc:	e00b      	b.n	8003be6 <DMA_CheckFifoParam+0xe6>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e00a      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e008      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e006      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bda:	bf00      	nop
 8003bdc:	e004      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bde:	bf00      	nop
 8003be0:	e002      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      break;
 8003be6:	bf00      	nop
    }
  } 
  
  return status; 
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop

08003bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b089      	sub	sp, #36	; 0x24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	e16b      	b.n	8003eec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c14:	2201      	movs	r2, #1
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	f040 815a 	bne.w	8003ee6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d005      	beq.n	8003c4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d130      	bne.n	8003cac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	2203      	movs	r2, #3
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c80:	2201      	movs	r2, #1
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 0201 	and.w	r2, r3, #1
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d017      	beq.n	8003ce8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d123      	bne.n	8003d3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	08da      	lsrs	r2, r3, #3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3208      	adds	r2, #8
 8003cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	220f      	movs	r2, #15
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	08da      	lsrs	r2, r3, #3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3208      	adds	r2, #8
 8003d36:	69b9      	ldr	r1, [r7, #24]
 8003d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	2203      	movs	r2, #3
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0203 	and.w	r2, r3, #3
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80b4 	beq.w	8003ee6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	4b60      	ldr	r3, [pc, #384]	; (8003f04 <HAL_GPIO_Init+0x30c>)
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	4a5f      	ldr	r2, [pc, #380]	; (8003f04 <HAL_GPIO_Init+0x30c>)
 8003d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d8e:	4b5d      	ldr	r3, [pc, #372]	; (8003f04 <HAL_GPIO_Init+0x30c>)
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d9a:	4a5b      	ldr	r2, [pc, #364]	; (8003f08 <HAL_GPIO_Init+0x310>)
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	3302      	adds	r3, #2
 8003da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	220f      	movs	r2, #15
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a52      	ldr	r2, [pc, #328]	; (8003f0c <HAL_GPIO_Init+0x314>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d02b      	beq.n	8003e1e <HAL_GPIO_Init+0x226>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a51      	ldr	r2, [pc, #324]	; (8003f10 <HAL_GPIO_Init+0x318>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d025      	beq.n	8003e1a <HAL_GPIO_Init+0x222>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a50      	ldr	r2, [pc, #320]	; (8003f14 <HAL_GPIO_Init+0x31c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01f      	beq.n	8003e16 <HAL_GPIO_Init+0x21e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a4f      	ldr	r2, [pc, #316]	; (8003f18 <HAL_GPIO_Init+0x320>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d019      	beq.n	8003e12 <HAL_GPIO_Init+0x21a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a4e      	ldr	r2, [pc, #312]	; (8003f1c <HAL_GPIO_Init+0x324>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <HAL_GPIO_Init+0x216>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a4d      	ldr	r2, [pc, #308]	; (8003f20 <HAL_GPIO_Init+0x328>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00d      	beq.n	8003e0a <HAL_GPIO_Init+0x212>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a4c      	ldr	r2, [pc, #304]	; (8003f24 <HAL_GPIO_Init+0x32c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d007      	beq.n	8003e06 <HAL_GPIO_Init+0x20e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a4b      	ldr	r2, [pc, #300]	; (8003f28 <HAL_GPIO_Init+0x330>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d101      	bne.n	8003e02 <HAL_GPIO_Init+0x20a>
 8003dfe:	2307      	movs	r3, #7
 8003e00:	e00e      	b.n	8003e20 <HAL_GPIO_Init+0x228>
 8003e02:	2308      	movs	r3, #8
 8003e04:	e00c      	b.n	8003e20 <HAL_GPIO_Init+0x228>
 8003e06:	2306      	movs	r3, #6
 8003e08:	e00a      	b.n	8003e20 <HAL_GPIO_Init+0x228>
 8003e0a:	2305      	movs	r3, #5
 8003e0c:	e008      	b.n	8003e20 <HAL_GPIO_Init+0x228>
 8003e0e:	2304      	movs	r3, #4
 8003e10:	e006      	b.n	8003e20 <HAL_GPIO_Init+0x228>
 8003e12:	2303      	movs	r3, #3
 8003e14:	e004      	b.n	8003e20 <HAL_GPIO_Init+0x228>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e002      	b.n	8003e20 <HAL_GPIO_Init+0x228>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <HAL_GPIO_Init+0x228>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	f002 0203 	and.w	r2, r2, #3
 8003e26:	0092      	lsls	r2, r2, #2
 8003e28:	4093      	lsls	r3, r2
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e30:	4935      	ldr	r1, [pc, #212]	; (8003f08 <HAL_GPIO_Init+0x310>)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	089b      	lsrs	r3, r3, #2
 8003e36:	3302      	adds	r3, #2
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e3e:	4b3b      	ldr	r3, [pc, #236]	; (8003f2c <HAL_GPIO_Init+0x334>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	43db      	mvns	r3, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e62:	4a32      	ldr	r2, [pc, #200]	; (8003f2c <HAL_GPIO_Init+0x334>)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e68:	4b30      	ldr	r3, [pc, #192]	; (8003f2c <HAL_GPIO_Init+0x334>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e8c:	4a27      	ldr	r2, [pc, #156]	; (8003f2c <HAL_GPIO_Init+0x334>)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e92:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <HAL_GPIO_Init+0x334>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eb6:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <HAL_GPIO_Init+0x334>)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <HAL_GPIO_Init+0x334>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ee0:	4a12      	ldr	r2, [pc, #72]	; (8003f2c <HAL_GPIO_Init+0x334>)
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b0f      	cmp	r3, #15
 8003ef0:	f67f ae90 	bls.w	8003c14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop
 8003ef8:	3724      	adds	r7, #36	; 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40013800 	.word	0x40013800
 8003f0c:	40020000 	.word	0x40020000
 8003f10:	40020400 	.word	0x40020400
 8003f14:	40020800 	.word	0x40020800
 8003f18:	40020c00 	.word	0x40020c00
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40021400 	.word	0x40021400
 8003f24:	40021800 	.word	0x40021800
 8003f28:	40021c00 	.word	0x40021c00
 8003f2c:	40013c00 	.word	0x40013c00

08003f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f40:	787b      	ldrb	r3, [r7, #1]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f4c:	e003      	b.n	8003f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f4e:	887b      	ldrh	r3, [r7, #2]
 8003f50:	041a      	lsls	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	619a      	str	r2, [r3, #24]
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e267      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d075      	beq.n	800406e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f82:	4b88      	ldr	r3, [pc, #544]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d00c      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8e:	4b85      	ldr	r3, [pc, #532]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d112      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9a:	4b82      	ldr	r3, [pc, #520]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa8:	4b7e      	ldr	r3, [pc, #504]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d05b      	beq.n	800406c <HAL_RCC_OscConfig+0x108>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d157      	bne.n	800406c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e242      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x74>
 8003fca:	4b76      	ldr	r3, [pc, #472]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a75      	ldr	r2, [pc, #468]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e01d      	b.n	8004014 <HAL_RCC_OscConfig+0xb0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x98>
 8003fe2:	4b70      	ldr	r3, [pc, #448]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a6f      	ldr	r2, [pc, #444]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	4b6d      	ldr	r3, [pc, #436]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a6c      	ldr	r2, [pc, #432]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e00b      	b.n	8004014 <HAL_RCC_OscConfig+0xb0>
 8003ffc:	4b69      	ldr	r3, [pc, #420]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a68      	ldr	r2, [pc, #416]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b66      	ldr	r3, [pc, #408]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a65      	ldr	r2, [pc, #404]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 800400e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7ff f8a8 	bl	8003170 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004024:	f7ff f8a4 	bl	8003170 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e207      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	4b5b      	ldr	r3, [pc, #364]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0xc0>
 8004042:	e014      	b.n	800406e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004044:	f7ff f894 	bl	8003170 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800404c:	f7ff f890 	bl	8003170 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	; 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1f3      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405e:	4b51      	ldr	r3, [pc, #324]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0xe8>
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d063      	beq.n	8004142 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800407a:	4b4a      	ldr	r3, [pc, #296]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004086:	4b47      	ldr	r3, [pc, #284]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800408e:	2b08      	cmp	r3, #8
 8004090:	d11c      	bne.n	80040cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004092:	4b44      	ldr	r3, [pc, #272]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d116      	bne.n	80040cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409e:	4b41      	ldr	r3, [pc, #260]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_RCC_OscConfig+0x152>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e1c7      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b6:	4b3b      	ldr	r3, [pc, #236]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4937      	ldr	r1, [pc, #220]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ca:	e03a      	b.n	8004142 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d4:	4b34      	ldr	r3, [pc, #208]	; (80041a8 <HAL_RCC_OscConfig+0x244>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040da:	f7ff f849 	bl	8003170 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e2:	f7ff f845 	bl	8003170 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e1a8      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f4:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004100:	4b28      	ldr	r3, [pc, #160]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4925      	ldr	r1, [pc, #148]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004110:	4313      	orrs	r3, r2
 8004112:	600b      	str	r3, [r1, #0]
 8004114:	e015      	b.n	8004142 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <HAL_RCC_OscConfig+0x244>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7ff f828 	bl	8003170 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004124:	f7ff f824 	bl	8003170 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e187      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004136:	4b1b      	ldr	r3, [pc, #108]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d036      	beq.n	80041bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d016      	beq.n	8004184 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004156:	4b15      	ldr	r3, [pc, #84]	; (80041ac <HAL_RCC_OscConfig+0x248>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7ff f808 	bl	8003170 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004164:	f7ff f804 	bl	8003170 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e167      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004176:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0x200>
 8004182:	e01b      	b.n	80041bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCC_OscConfig+0x248>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418a:	f7fe fff1 	bl	8003170 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004190:	e00e      	b.n	80041b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004192:	f7fe ffed 	bl	8003170 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d907      	bls.n	80041b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e150      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
 80041a4:	40023800 	.word	0x40023800
 80041a8:	42470000 	.word	0x42470000
 80041ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b0:	4b88      	ldr	r3, [pc, #544]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ea      	bne.n	8004192 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8097 	beq.w	80042f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ca:	2300      	movs	r3, #0
 80041cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ce:	4b81      	ldr	r3, [pc, #516]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10f      	bne.n	80041fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	4b7d      	ldr	r3, [pc, #500]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	4a7c      	ldr	r2, [pc, #496]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ea:	4b7a      	ldr	r3, [pc, #488]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f6:	2301      	movs	r3, #1
 80041f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fa:	4b77      	ldr	r3, [pc, #476]	; (80043d8 <HAL_RCC_OscConfig+0x474>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d118      	bne.n	8004238 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004206:	4b74      	ldr	r3, [pc, #464]	; (80043d8 <HAL_RCC_OscConfig+0x474>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a73      	ldr	r2, [pc, #460]	; (80043d8 <HAL_RCC_OscConfig+0x474>)
 800420c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004212:	f7fe ffad 	bl	8003170 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421a:	f7fe ffa9 	bl	8003170 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e10c      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	4b6a      	ldr	r3, [pc, #424]	; (80043d8 <HAL_RCC_OscConfig+0x474>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x2ea>
 8004240:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	4a63      	ldr	r2, [pc, #396]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6713      	str	r3, [r2, #112]	; 0x70
 800424c:	e01c      	b.n	8004288 <HAL_RCC_OscConfig+0x324>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b05      	cmp	r3, #5
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x30c>
 8004256:	4b5f      	ldr	r3, [pc, #380]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	4a5e      	ldr	r2, [pc, #376]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 800425c:	f043 0304 	orr.w	r3, r3, #4
 8004260:	6713      	str	r3, [r2, #112]	; 0x70
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	4a5b      	ldr	r2, [pc, #364]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	6713      	str	r3, [r2, #112]	; 0x70
 800426e:	e00b      	b.n	8004288 <HAL_RCC_OscConfig+0x324>
 8004270:	4b58      	ldr	r3, [pc, #352]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	4a57      	ldr	r2, [pc, #348]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004276:	f023 0301 	bic.w	r3, r3, #1
 800427a:	6713      	str	r3, [r2, #112]	; 0x70
 800427c:	4b55      	ldr	r3, [pc, #340]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	4a54      	ldr	r2, [pc, #336]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004282:	f023 0304 	bic.w	r3, r3, #4
 8004286:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d015      	beq.n	80042bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004290:	f7fe ff6e 	bl	8003170 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004296:	e00a      	b.n	80042ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004298:	f7fe ff6a 	bl	8003170 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e0cb      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ae:	4b49      	ldr	r3, [pc, #292]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0ee      	beq.n	8004298 <HAL_RCC_OscConfig+0x334>
 80042ba:	e014      	b.n	80042e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042bc:	f7fe ff58 	bl	8003170 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c2:	e00a      	b.n	80042da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c4:	f7fe ff54 	bl	8003170 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e0b5      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042da:	4b3e      	ldr	r3, [pc, #248]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1ee      	bne.n	80042c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d105      	bne.n	80042f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ec:	4b39      	ldr	r3, [pc, #228]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	4a38      	ldr	r2, [pc, #224]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80a1 	beq.w	8004444 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004302:	4b34      	ldr	r3, [pc, #208]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b08      	cmp	r3, #8
 800430c:	d05c      	beq.n	80043c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d141      	bne.n	800439a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004316:	4b31      	ldr	r3, [pc, #196]	; (80043dc <HAL_RCC_OscConfig+0x478>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fe ff28 	bl	8003170 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004324:	f7fe ff24 	bl	8003170 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e087      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	4b27      	ldr	r3, [pc, #156]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69da      	ldr	r2, [r3, #28]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	019b      	lsls	r3, r3, #6
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	085b      	lsrs	r3, r3, #1
 800435a:	3b01      	subs	r3, #1
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	061b      	lsls	r3, r3, #24
 8004366:	491b      	ldr	r1, [pc, #108]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800436c:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <HAL_RCC_OscConfig+0x478>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004372:	f7fe fefd 	bl	8003170 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437a:	f7fe fef9 	bl	8003170 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e05c      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438c:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x416>
 8004398:	e054      	b.n	8004444 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <HAL_RCC_OscConfig+0x478>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fe fee6 	bl	8003170 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a8:	f7fe fee2 	bl	8003170 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e045      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x444>
 80043c6:	e03d      	b.n	8004444 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d107      	bne.n	80043e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e038      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40007000 	.word	0x40007000
 80043dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043e0:	4b1b      	ldr	r3, [pc, #108]	; (8004450 <HAL_RCC_OscConfig+0x4ec>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d028      	beq.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d121      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004406:	429a      	cmp	r2, r3
 8004408:	d11a      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004410:	4013      	ands	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004416:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004418:	4293      	cmp	r3, r2
 800441a:	d111      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	3b01      	subs	r3, #1
 800442a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d107      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40023800 	.word	0x40023800

08004454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0cc      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004468:	4b68      	ldr	r3, [pc, #416]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d90c      	bls.n	8004490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004476:	4b65      	ldr	r3, [pc, #404]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b63      	ldr	r3, [pc, #396]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0b8      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a8:	4b59      	ldr	r3, [pc, #356]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a58      	ldr	r2, [pc, #352]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c0:	4b53      	ldr	r3, [pc, #332]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4a52      	ldr	r2, [pc, #328]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044cc:	4b50      	ldr	r3, [pc, #320]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	494d      	ldr	r1, [pc, #308]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d044      	beq.n	8004574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	4b47      	ldr	r3, [pc, #284]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d119      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e07f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d003      	beq.n	8004512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450e:	2b03      	cmp	r3, #3
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004512:	4b3f      	ldr	r3, [pc, #252]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e06f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004522:	4b3b      	ldr	r3, [pc, #236]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e067      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004532:	4b37      	ldr	r3, [pc, #220]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f023 0203 	bic.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4934      	ldr	r1, [pc, #208]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	4313      	orrs	r3, r2
 8004542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004544:	f7fe fe14 	bl	8003170 <HAL_GetTick>
 8004548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	e00a      	b.n	8004562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454c:	f7fe fe10 	bl	8003170 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e04f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004562:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 020c 	and.w	r2, r3, #12
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	429a      	cmp	r2, r3
 8004572:	d1eb      	bne.n	800454c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d20c      	bcs.n	800459c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b22      	ldr	r3, [pc, #136]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b20      	ldr	r3, [pc, #128]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e032      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4916      	ldr	r1, [pc, #88]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	490e      	ldr	r1, [pc, #56]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045da:	f000 f821 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80045de:	4602      	mov	r2, r0
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	490a      	ldr	r1, [pc, #40]	; (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 80045ec:	5ccb      	ldrb	r3, [r1, r3]
 80045ee:	fa22 f303 	lsr.w	r3, r2, r3
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80045f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_RCC_ClockConfig+0x1c8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe fd74 	bl	80030e8 <HAL_InitTick>

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023c00 	.word	0x40023c00
 8004610:	40023800 	.word	0x40023800
 8004614:	0800717c 	.word	0x0800717c
 8004618:	2000001c 	.word	0x2000001c
 800461c:	20000020 	.word	0x20000020

08004620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004624:	b090      	sub	sp, #64	; 0x40
 8004626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
 800462c:	2300      	movs	r3, #0
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004630:	2300      	movs	r3, #0
 8004632:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004638:	4b59      	ldr	r3, [pc, #356]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b08      	cmp	r3, #8
 8004642:	d00d      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x40>
 8004644:	2b08      	cmp	r3, #8
 8004646:	f200 80a1 	bhi.w	800478c <HAL_RCC_GetSysClockFreq+0x16c>
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x34>
 800464e:	2b04      	cmp	r3, #4
 8004650:	d003      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0x3a>
 8004652:	e09b      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004654:	4b53      	ldr	r3, [pc, #332]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004656:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004658:	e09b      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800465a:	4b53      	ldr	r3, [pc, #332]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800465c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800465e:	e098      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004660:	4b4f      	ldr	r3, [pc, #316]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800466a:	4b4d      	ldr	r3, [pc, #308]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d028      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004676:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	099b      	lsrs	r3, r3, #6
 800467c:	2200      	movs	r2, #0
 800467e:	623b      	str	r3, [r7, #32]
 8004680:	627a      	str	r2, [r7, #36]	; 0x24
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004688:	2100      	movs	r1, #0
 800468a:	4b47      	ldr	r3, [pc, #284]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800468c:	fb03 f201 	mul.w	r2, r3, r1
 8004690:	2300      	movs	r3, #0
 8004692:	fb00 f303 	mul.w	r3, r0, r3
 8004696:	4413      	add	r3, r2
 8004698:	4a43      	ldr	r2, [pc, #268]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800469a:	fba0 1202 	umull	r1, r2, r0, r2
 800469e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046a0:	460a      	mov	r2, r1
 80046a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80046a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a6:	4413      	add	r3, r2
 80046a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ac:	2200      	movs	r2, #0
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	61fa      	str	r2, [r7, #28]
 80046b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046ba:	f7fb fd8d 	bl	80001d8 <__aeabi_uldivmod>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4613      	mov	r3, r2
 80046c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c6:	e053      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c8:	4b35      	ldr	r3, [pc, #212]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	099b      	lsrs	r3, r3, #6
 80046ce:	2200      	movs	r2, #0
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	617a      	str	r2, [r7, #20]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046da:	f04f 0b00 	mov.w	fp, #0
 80046de:	4652      	mov	r2, sl
 80046e0:	465b      	mov	r3, fp
 80046e2:	f04f 0000 	mov.w	r0, #0
 80046e6:	f04f 0100 	mov.w	r1, #0
 80046ea:	0159      	lsls	r1, r3, #5
 80046ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f0:	0150      	lsls	r0, r2, #5
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	ebb2 080a 	subs.w	r8, r2, sl
 80046fa:	eb63 090b 	sbc.w	r9, r3, fp
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800470a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800470e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004712:	ebb2 0408 	subs.w	r4, r2, r8
 8004716:	eb63 0509 	sbc.w	r5, r3, r9
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	00eb      	lsls	r3, r5, #3
 8004724:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004728:	00e2      	lsls	r2, r4, #3
 800472a:	4614      	mov	r4, r2
 800472c:	461d      	mov	r5, r3
 800472e:	eb14 030a 	adds.w	r3, r4, sl
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	eb45 030b 	adc.w	r3, r5, fp
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004746:	4629      	mov	r1, r5
 8004748:	028b      	lsls	r3, r1, #10
 800474a:	4621      	mov	r1, r4
 800474c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004750:	4621      	mov	r1, r4
 8004752:	028a      	lsls	r2, r1, #10
 8004754:	4610      	mov	r0, r2
 8004756:	4619      	mov	r1, r3
 8004758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475a:	2200      	movs	r2, #0
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	60fa      	str	r2, [r7, #12]
 8004760:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004764:	f7fb fd38 	bl	80001d8 <__aeabi_uldivmod>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4613      	mov	r3, r2
 800476e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	3301      	adds	r3, #1
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	fbb2 f3f3 	udiv	r3, r2, r3
 8004788:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800478a:	e002      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800478e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004794:	4618      	mov	r0, r3
 8004796:	3740      	adds	r7, #64	; 0x40
 8004798:	46bd      	mov	sp, r7
 800479a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800
 80047a4:	00f42400 	.word	0x00f42400
 80047a8:	017d7840 	.word	0x017d7840

080047ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047b0:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047b2:	681b      	ldr	r3, [r3, #0]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	2000001c 	.word	0x2000001c

080047c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047c8:	f7ff fff0 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	0a9b      	lsrs	r3, r3, #10
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	4903      	ldr	r1, [pc, #12]	; (80047e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047da:	5ccb      	ldrb	r3, [r1, r3]
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40023800 	.word	0x40023800
 80047e8:	0800718c 	.word	0x0800718c

080047ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047f0:	f7ff ffdc 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetPCLK2Freq+0x20>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	0b5b      	lsrs	r3, r3, #13
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4903      	ldr	r1, [pc, #12]	; (8004810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004802:	5ccb      	ldrb	r3, [r1, r3]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40023800 	.word	0x40023800
 8004810:	0800718c 	.word	0x0800718c

08004814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e041      	b.n	80048aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fe f9fa 	bl	8002c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3304      	adds	r3, #4
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f000 fac4 	bl	8004de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d001      	beq.n	80048cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e04e      	b.n	800496a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a23      	ldr	r2, [pc, #140]	; (8004978 <HAL_TIM_Base_Start_IT+0xc4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d022      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x80>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f6:	d01d      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x80>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1f      	ldr	r2, [pc, #124]	; (800497c <HAL_TIM_Base_Start_IT+0xc8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d018      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x80>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1e      	ldr	r2, [pc, #120]	; (8004980 <HAL_TIM_Base_Start_IT+0xcc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x80>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <HAL_TIM_Base_Start_IT+0xd0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x80>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1b      	ldr	r2, [pc, #108]	; (8004988 <HAL_TIM_Base_Start_IT+0xd4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x80>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a19      	ldr	r2, [pc, #100]	; (800498c <HAL_TIM_Base_Start_IT+0xd8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x80>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a18      	ldr	r2, [pc, #96]	; (8004990 <HAL_TIM_Base_Start_IT+0xdc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d111      	bne.n	8004958 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b06      	cmp	r3, #6
 8004944:	d010      	beq.n	8004968 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0201 	orr.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004956:	e007      	b.n	8004968 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40010000 	.word	0x40010000
 800497c:	40000400 	.word	0x40000400
 8004980:	40000800 	.word	0x40000800
 8004984:	40000c00 	.word	0x40000c00
 8004988:	40010400 	.word	0x40010400
 800498c:	40014000 	.word	0x40014000
 8004990:	40001800 	.word	0x40001800

08004994 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0201 	bic.w	r2, r2, #1
 80049aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6a1a      	ldr	r2, [r3, #32]
 80049b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10f      	bne.n	80049dc <HAL_TIM_Base_Stop_IT+0x48>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6a1a      	ldr	r2, [r3, #32]
 80049c2:	f240 4344 	movw	r3, #1092	; 0x444
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d107      	bne.n	80049dc <HAL_TIM_Base_Stop_IT+0x48>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0201 	bic.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d122      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d11b      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f06f 0202 	mvn.w	r2, #2
 8004a1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f9b5 	bl	8004da4 <HAL_TIM_IC_CaptureCallback>
 8004a3a:	e005      	b.n	8004a48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f9a7 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f9b8 	bl	8004db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d122      	bne.n	8004aa2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d11b      	bne.n	8004aa2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f06f 0204 	mvn.w	r2, #4
 8004a72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f98b 	bl	8004da4 <HAL_TIM_IC_CaptureCallback>
 8004a8e:	e005      	b.n	8004a9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f97d 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f98e 	bl	8004db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d122      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d11b      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f06f 0208 	mvn.w	r2, #8
 8004ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2204      	movs	r2, #4
 8004acc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f961 	bl	8004da4 <HAL_TIM_IC_CaptureCallback>
 8004ae2:	e005      	b.n	8004af0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f953 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f964 	bl	8004db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d122      	bne.n	8004b4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b10      	cmp	r3, #16
 8004b10:	d11b      	bne.n	8004b4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f06f 0210 	mvn.w	r2, #16
 8004b1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2208      	movs	r2, #8
 8004b20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f937 	bl	8004da4 <HAL_TIM_IC_CaptureCallback>
 8004b36:	e005      	b.n	8004b44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f929 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f93a 	bl	8004db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d10e      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d107      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f06f 0201 	mvn.w	r2, #1
 8004b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7fc f88b 	bl	8000c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b80      	cmp	r3, #128	; 0x80
 8004b82:	d10e      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8e:	2b80      	cmp	r3, #128	; 0x80
 8004b90:	d107      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fadf 	bl	8005160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	d10e      	bne.n	8004bce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	2b40      	cmp	r3, #64	; 0x40
 8004bbc:	d107      	bne.n	8004bce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f8ff 	bl	8004dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d10e      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	d107      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f06f 0220 	mvn.w	r2, #32
 8004bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 faa9 	bl	800514c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_ConfigClockSource+0x1c>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e0b4      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x186>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c44:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c56:	d03e      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0xd4>
 8004c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5c:	f200 8087 	bhi.w	8004d6e <HAL_TIM_ConfigClockSource+0x16c>
 8004c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c64:	f000 8086 	beq.w	8004d74 <HAL_TIM_ConfigClockSource+0x172>
 8004c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6c:	d87f      	bhi.n	8004d6e <HAL_TIM_ConfigClockSource+0x16c>
 8004c6e:	2b70      	cmp	r3, #112	; 0x70
 8004c70:	d01a      	beq.n	8004ca8 <HAL_TIM_ConfigClockSource+0xa6>
 8004c72:	2b70      	cmp	r3, #112	; 0x70
 8004c74:	d87b      	bhi.n	8004d6e <HAL_TIM_ConfigClockSource+0x16c>
 8004c76:	2b60      	cmp	r3, #96	; 0x60
 8004c78:	d050      	beq.n	8004d1c <HAL_TIM_ConfigClockSource+0x11a>
 8004c7a:	2b60      	cmp	r3, #96	; 0x60
 8004c7c:	d877      	bhi.n	8004d6e <HAL_TIM_ConfigClockSource+0x16c>
 8004c7e:	2b50      	cmp	r3, #80	; 0x50
 8004c80:	d03c      	beq.n	8004cfc <HAL_TIM_ConfigClockSource+0xfa>
 8004c82:	2b50      	cmp	r3, #80	; 0x50
 8004c84:	d873      	bhi.n	8004d6e <HAL_TIM_ConfigClockSource+0x16c>
 8004c86:	2b40      	cmp	r3, #64	; 0x40
 8004c88:	d058      	beq.n	8004d3c <HAL_TIM_ConfigClockSource+0x13a>
 8004c8a:	2b40      	cmp	r3, #64	; 0x40
 8004c8c:	d86f      	bhi.n	8004d6e <HAL_TIM_ConfigClockSource+0x16c>
 8004c8e:	2b30      	cmp	r3, #48	; 0x30
 8004c90:	d064      	beq.n	8004d5c <HAL_TIM_ConfigClockSource+0x15a>
 8004c92:	2b30      	cmp	r3, #48	; 0x30
 8004c94:	d86b      	bhi.n	8004d6e <HAL_TIM_ConfigClockSource+0x16c>
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d060      	beq.n	8004d5c <HAL_TIM_ConfigClockSource+0x15a>
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d867      	bhi.n	8004d6e <HAL_TIM_ConfigClockSource+0x16c>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d05c      	beq.n	8004d5c <HAL_TIM_ConfigClockSource+0x15a>
 8004ca2:	2b10      	cmp	r3, #16
 8004ca4:	d05a      	beq.n	8004d5c <HAL_TIM_ConfigClockSource+0x15a>
 8004ca6:	e062      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	6899      	ldr	r1, [r3, #8]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f000 f9ac 	bl	8005014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	609a      	str	r2, [r3, #8]
      break;
 8004cd4:	e04f      	b.n	8004d76 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6899      	ldr	r1, [r3, #8]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f000 f995 	bl	8005014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cf8:	609a      	str	r2, [r3, #8]
      break;
 8004cfa:	e03c      	b.n	8004d76 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	6859      	ldr	r1, [r3, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f000 f909 	bl	8004f20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2150      	movs	r1, #80	; 0x50
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 f962 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004d1a:	e02c      	b.n	8004d76 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f000 f928 	bl	8004f7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2160      	movs	r1, #96	; 0x60
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 f952 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004d3a:	e01c      	b.n	8004d76 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f000 f8e9 	bl	8004f20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2140      	movs	r1, #64	; 0x40
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 f942 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004d5a:	e00c      	b.n	8004d76 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4619      	mov	r1, r3
 8004d66:	4610      	mov	r0, r2
 8004d68:	f000 f939 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004d6c:	e003      	b.n	8004d76 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	73fb      	strb	r3, [r7, #15]
      break;
 8004d72:	e000      	b.n	8004d76 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a40      	ldr	r2, [pc, #256]	; (8004ef4 <TIM_Base_SetConfig+0x114>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d013      	beq.n	8004e20 <TIM_Base_SetConfig+0x40>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfe:	d00f      	beq.n	8004e20 <TIM_Base_SetConfig+0x40>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a3d      	ldr	r2, [pc, #244]	; (8004ef8 <TIM_Base_SetConfig+0x118>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00b      	beq.n	8004e20 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a3c      	ldr	r2, [pc, #240]	; (8004efc <TIM_Base_SetConfig+0x11c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d007      	beq.n	8004e20 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a3b      	ldr	r2, [pc, #236]	; (8004f00 <TIM_Base_SetConfig+0x120>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d003      	beq.n	8004e20 <TIM_Base_SetConfig+0x40>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a3a      	ldr	r2, [pc, #232]	; (8004f04 <TIM_Base_SetConfig+0x124>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d108      	bne.n	8004e32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2f      	ldr	r2, [pc, #188]	; (8004ef4 <TIM_Base_SetConfig+0x114>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d02b      	beq.n	8004e92 <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e40:	d027      	beq.n	8004e92 <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a2c      	ldr	r2, [pc, #176]	; (8004ef8 <TIM_Base_SetConfig+0x118>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d023      	beq.n	8004e92 <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2b      	ldr	r2, [pc, #172]	; (8004efc <TIM_Base_SetConfig+0x11c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01f      	beq.n	8004e92 <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a2a      	ldr	r2, [pc, #168]	; (8004f00 <TIM_Base_SetConfig+0x120>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01b      	beq.n	8004e92 <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a29      	ldr	r2, [pc, #164]	; (8004f04 <TIM_Base_SetConfig+0x124>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d017      	beq.n	8004e92 <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a28      	ldr	r2, [pc, #160]	; (8004f08 <TIM_Base_SetConfig+0x128>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d013      	beq.n	8004e92 <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a27      	ldr	r2, [pc, #156]	; (8004f0c <TIM_Base_SetConfig+0x12c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00f      	beq.n	8004e92 <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a26      	ldr	r2, [pc, #152]	; (8004f10 <TIM_Base_SetConfig+0x130>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00b      	beq.n	8004e92 <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a25      	ldr	r2, [pc, #148]	; (8004f14 <TIM_Base_SetConfig+0x134>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d007      	beq.n	8004e92 <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a24      	ldr	r2, [pc, #144]	; (8004f18 <TIM_Base_SetConfig+0x138>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d003      	beq.n	8004e92 <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a23      	ldr	r2, [pc, #140]	; (8004f1c <TIM_Base_SetConfig+0x13c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d108      	bne.n	8004ea4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a0a      	ldr	r2, [pc, #40]	; (8004ef4 <TIM_Base_SetConfig+0x114>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d003      	beq.n	8004ed8 <TIM_Base_SetConfig+0xf8>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a0c      	ldr	r2, [pc, #48]	; (8004f04 <TIM_Base_SetConfig+0x124>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d103      	bne.n	8004ee0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	615a      	str	r2, [r3, #20]
}
 8004ee6:	bf00      	nop
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40000800 	.word	0x40000800
 8004f00:	40000c00 	.word	0x40000c00
 8004f04:	40010400 	.word	0x40010400
 8004f08:	40014000 	.word	0x40014000
 8004f0c:	40014400 	.word	0x40014400
 8004f10:	40014800 	.word	0x40014800
 8004f14:	40001800 	.word	0x40001800
 8004f18:	40001c00 	.word	0x40001c00
 8004f1c:	40002000 	.word	0x40002000

08004f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f023 0201 	bic.w	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f023 030a 	bic.w	r3, r3, #10
 8004f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b087      	sub	sp, #28
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f023 0210 	bic.w	r2, r3, #16
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	031b      	lsls	r3, r3, #12
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f043 0307 	orr.w	r3, r3, #7
 8005000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	609a      	str	r2, [r3, #8]
}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800502e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	021a      	lsls	r2, r3, #8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	431a      	orrs	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4313      	orrs	r3, r2
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	609a      	str	r2, [r3, #8]
}
 8005048:	bf00      	nop
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005068:	2302      	movs	r3, #2
 800506a:	e05a      	b.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a21      	ldr	r2, [pc, #132]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d022      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b8:	d01d      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d018      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1b      	ldr	r2, [pc, #108]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d013      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1a      	ldr	r2, [pc, #104]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00e      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a18      	ldr	r2, [pc, #96]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d009      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a17      	ldr	r2, [pc, #92]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d004      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a15      	ldr	r2, [pc, #84]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10c      	bne.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	4313      	orrs	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40010000 	.word	0x40010000
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40010400 	.word	0x40010400
 8005144:	40014000 	.word	0x40014000
 8005148:	40001800 	.word	0x40001800

0800514c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e03f      	b.n	8005206 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fd fd70 	bl	8002c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2224      	movs	r2, #36	; 0x24
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f001 f971 	bl	80064a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800520e:	b480      	push	{r7}
 8005210:	b085      	sub	sp, #20
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	4613      	mov	r3, r2
 800521a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b20      	cmp	r3, #32
 8005226:	d130      	bne.n	800528a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <HAL_UART_Transmit_IT+0x26>
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e029      	b.n	800528c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_UART_Transmit_IT+0x38>
 8005242:	2302      	movs	r3, #2
 8005244:	e022      	b.n	800528c <HAL_UART_Transmit_IT+0x7e>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	88fa      	ldrh	r2, [r7, #6]
 8005258:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	88fa      	ldrh	r2, [r7, #6]
 800525e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2221      	movs	r2, #33	; 0x21
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005284:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	e000      	b.n	800528c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800528a:	2302      	movs	r3, #2
  }
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d11d      	bne.n	80052ee <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <HAL_UART_Receive_IT+0x26>
 80052b8:	88fb      	ldrh	r3, [r7, #6]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e016      	b.n	80052f0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_UART_Receive_IT+0x38>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e00f      	b.n	80052f0 <HAL_UART_Receive_IT+0x58>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052de:	88fb      	ldrh	r3, [r7, #6]
 80052e0:	461a      	mov	r2, r3
 80052e2:	68b9      	ldr	r1, [r7, #8]
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 fe0e 	bl	8005f06 <UART_Start_Receive_IT>
 80052ea:	4603      	mov	r3, r0
 80052ec:	e000      	b.n	80052f0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80052ee:	2302      	movs	r3, #2
  }
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08c      	sub	sp, #48	; 0x30
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b20      	cmp	r3, #32
 8005310:	d165      	bne.n	80053de <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <HAL_UART_Transmit_DMA+0x26>
 8005318:	88fb      	ldrh	r3, [r7, #6]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e05e      	b.n	80053e0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_UART_Transmit_DMA+0x38>
 800532c:	2302      	movs	r3, #2
 800532e:	e057      	b.n	80053e0 <HAL_UART_Transmit_DMA+0xe8>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	88fa      	ldrh	r2, [r7, #6]
 8005342:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	88fa      	ldrh	r2, [r7, #6]
 8005348:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2221      	movs	r2, #33	; 0x21
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535c:	4a22      	ldr	r2, [pc, #136]	; (80053e8 <HAL_UART_Transmit_DMA+0xf0>)
 800535e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005364:	4a21      	ldr	r2, [pc, #132]	; (80053ec <HAL_UART_Transmit_DMA+0xf4>)
 8005366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536c:	4a20      	ldr	r2, [pc, #128]	; (80053f0 <HAL_UART_Transmit_DMA+0xf8>)
 800536e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005374:	2200      	movs	r2, #0
 8005376:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005378:	f107 0308 	add.w	r3, r7, #8
 800537c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005384:	6819      	ldr	r1, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3304      	adds	r3, #4
 800538c:	461a      	mov	r2, r3
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	f7fe f8de 	bl	8003550 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800539c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3314      	adds	r3, #20
 80053ac:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	617b      	str	r3, [r7, #20]
   return(result);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3314      	adds	r3, #20
 80053c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c6:	627a      	str	r2, [r7, #36]	; 0x24
 80053c8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ca:	6a39      	ldr	r1, [r7, #32]
 80053cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ce:	e841 2300 	strex	r3, r2, [r1]
 80053d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e5      	bne.n	80053a6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	e000      	b.n	80053e0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80053de:	2302      	movs	r3, #2
  }
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3730      	adds	r7, #48	; 0x30
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	08005c61 	.word	0x08005c61
 80053ec:	08005cfb 	.word	0x08005cfb
 80053f0:	08005e73 	.word	0x08005e73

080053f4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	4613      	mov	r3, r2
 8005400:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b20      	cmp	r3, #32
 800540c:	d11d      	bne.n	800544a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <HAL_UART_Receive_DMA+0x26>
 8005414:	88fb      	ldrh	r3, [r7, #6]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e016      	b.n	800544c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_UART_Receive_DMA+0x38>
 8005428:	2302      	movs	r3, #2
 800542a:	e00f      	b.n	800544c <HAL_UART_Receive_DMA+0x58>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	461a      	mov	r2, r3
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 fd9f 	bl	8005f84 <UART_Start_Receive_DMA>
 8005446:	4603      	mov	r3, r0
 8005448:	e000      	b.n	800544c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800544a:	2302      	movs	r3, #2
  }
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08e      	sub	sp, #56	; 0x38
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	330c      	adds	r3, #12
 8005462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	61fb      	str	r3, [r7, #28]
   return(result);
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	330c      	adds	r3, #12
 800547a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800547c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e5      	bne.n	800545c <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549a:	2b80      	cmp	r3, #128	; 0x80
 800549c:	d13c      	bne.n	8005518 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3314      	adds	r3, #20
 80054a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b4:	633b      	str	r3, [r7, #48]	; 0x30
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3314      	adds	r3, #20
 80054bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054be:	61ba      	str	r2, [r7, #24]
 80054c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	6979      	ldr	r1, [r7, #20]
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	e841 2300 	strex	r3, r2, [r1]
 80054ca:	613b      	str	r3, [r7, #16]
   return(result);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1e5      	bne.n	800549e <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d013      	beq.n	8005502 <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054de:	4a16      	ldr	r2, [pc, #88]	; (8005538 <HAL_UART_AbortTransmit_IT+0xe4>)
 80054e0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fe f8fa 	bl	80036e0 <HAL_DMA_Abort_IT>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01c      	beq.n	800552c <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054fc:	4610      	mov	r0, r2
 80054fe:	4798      	blx	r3
 8005500:	e014      	b.n	800552c <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fb85 	bl	8005c20 <HAL_UART_AbortTransmitCpltCallback>
 8005516:	e009      	b.n	800552c <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fb7a 	bl	8005c20 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3738      	adds	r7, #56	; 0x38
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	080061ff 	.word	0x080061ff

0800553c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b09a      	sub	sp, #104	; 0x68
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005556:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800555a:	667b      	str	r3, [r7, #100]	; 0x64
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005564:	657a      	str	r2, [r7, #84]	; 0x54
 8005566:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800556a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e5      	bne.n	8005544 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3314      	adds	r3, #20
 800557e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	f023 0301 	bic.w	r3, r3, #1
 800558e:	663b      	str	r3, [r7, #96]	; 0x60
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3314      	adds	r3, #20
 8005596:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005598:	643a      	str	r2, [r7, #64]	; 0x40
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800559e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055a0:	e841 2300 	strex	r3, r2, [r1]
 80055a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e5      	bne.n	8005578 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d119      	bne.n	80055e8 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	330c      	adds	r3, #12
 80055ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f023 0310 	bic.w	r3, r3, #16
 80055ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	330c      	adds	r3, #12
 80055d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e5      	bne.n	80055b4 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f2:	2b40      	cmp	r3, #64	; 0x40
 80055f4:	d13f      	bne.n	8005676 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3314      	adds	r3, #20
 80055fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	60bb      	str	r3, [r7, #8]
   return(result);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800560c:	65bb      	str	r3, [r7, #88]	; 0x58
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3314      	adds	r3, #20
 8005614:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005616:	61ba      	str	r2, [r7, #24]
 8005618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6979      	ldr	r1, [r7, #20]
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	613b      	str	r3, [r7, #16]
   return(result);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e5      	bne.n	80055f6 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	2b00      	cmp	r3, #0
 8005630:	d013      	beq.n	800565a <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	4a19      	ldr	r2, [pc, #100]	; (800569c <HAL_UART_AbortReceive_IT+0x160>)
 8005638:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe f84e 	bl	80036e0 <HAL_DMA_Abort_IT>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d022      	beq.n	8005690 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005654:	4610      	mov	r0, r2
 8005656:	4798      	blx	r3
 8005658:	e01a      	b.n	8005690 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fae0 	bl	8005c34 <HAL_UART_AbortReceiveCpltCallback>
 8005674:	e00c      	b.n	8005690 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fad2 	bl	8005c34 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3768      	adds	r7, #104	; 0x68
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	08006229 	.word	0x08006229

080056a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b0ba      	sub	sp, #232	; 0xe8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80056de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10f      	bne.n	8005706 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <HAL_UART_IRQHandler+0x66>
 80056f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fe12 	bl	8006328 <UART_Receive_IT>
      return;
 8005704:	e256      	b.n	8005bb4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 80de 	beq.w	80058cc <HAL_UART_IRQHandler+0x22c>
 8005710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800571c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005720:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 80d1 	beq.w	80058cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800572a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00b      	beq.n	800574e <HAL_UART_IRQHandler+0xae>
 8005736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800573a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f043 0201 	orr.w	r2, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800574e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00b      	beq.n	8005772 <HAL_UART_IRQHandler+0xd2>
 800575a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f043 0202 	orr.w	r2, r3, #2
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <HAL_UART_IRQHandler+0xf6>
 800577e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	f043 0204 	orr.w	r2, r3, #4
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d011      	beq.n	80057c6 <HAL_UART_IRQHandler+0x126>
 80057a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d105      	bne.n	80057ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f043 0208 	orr.w	r2, r3, #8
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 81ed 	beq.w	8005baa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_UART_IRQHandler+0x14e>
 80057dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fd9d 	bl	8006328 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f8:	2b40      	cmp	r3, #64	; 0x40
 80057fa:	bf0c      	ite	eq
 80057fc:	2301      	moveq	r3, #1
 80057fe:	2300      	movne	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <HAL_UART_IRQHandler+0x17a>
 8005812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005816:	2b00      	cmp	r3, #0
 8005818:	d04f      	beq.n	80058ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fc78 	bl	8006110 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582a:	2b40      	cmp	r3, #64	; 0x40
 800582c:	d141      	bne.n	80058b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3314      	adds	r3, #20
 8005834:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005844:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800584c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3314      	adds	r3, #20
 8005856:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800585a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800585e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005866:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1d9      	bne.n	800582e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	2b00      	cmp	r3, #0
 8005880:	d013      	beq.n	80058aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005886:	4a7d      	ldr	r2, [pc, #500]	; (8005a7c <HAL_UART_IRQHandler+0x3dc>)
 8005888:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	4618      	mov	r0, r3
 8005890:	f7fd ff26 	bl	80036e0 <HAL_DMA_Abort_IT>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d016      	beq.n	80058c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058a4:	4610      	mov	r0, r2
 80058a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a8:	e00e      	b.n	80058c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f9ae 	bl	8005c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b0:	e00a      	b.n	80058c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f9aa 	bl	8005c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b8:	e006      	b.n	80058c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f9a6 	bl	8005c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80058c6:	e170      	b.n	8005baa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	bf00      	nop
    return;
 80058ca:	e16e      	b.n	8005baa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	f040 814a 	bne.w	8005b6a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 8143 	beq.w	8005b6a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 813c 	beq.w	8005b6a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058f2:	2300      	movs	r3, #0
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	60bb      	str	r3, [r7, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	60bb      	str	r3, [r7, #8]
 8005906:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005912:	2b40      	cmp	r3, #64	; 0x40
 8005914:	f040 80b4 	bne.w	8005a80 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005924:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 8140 	beq.w	8005bae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005936:	429a      	cmp	r2, r3
 8005938:	f080 8139 	bcs.w	8005bae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005942:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594e:	f000 8088 	beq.w	8005a62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	330c      	adds	r3, #12
 8005958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800596c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005970:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	330c      	adds	r3, #12
 800597a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800597e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800598a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1d9      	bne.n	8005952 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3314      	adds	r3, #20
 80059a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059b0:	f023 0301 	bic.w	r3, r3, #1
 80059b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3314      	adds	r3, #20
 80059be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e1      	bne.n	800599e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3314      	adds	r3, #20
 80059e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3314      	adds	r3, #20
 80059fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e3      	bne.n	80059da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	330c      	adds	r3, #12
 8005a26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a32:	f023 0310 	bic.w	r3, r3, #16
 8005a36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	330c      	adds	r3, #12
 8005a40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a44:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e3      	bne.n	8005a20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fd fdcf 	bl	8003600 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	4619      	mov	r1, r3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f8e8 	bl	8005c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a78:	e099      	b.n	8005bae <HAL_UART_IRQHandler+0x50e>
 8005a7a:	bf00      	nop
 8005a7c:	080061d7 	.word	0x080061d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 808b 	beq.w	8005bb2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 8086 	beq.w	8005bb2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	330c      	adds	r3, #12
 8005aac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005abc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	330c      	adds	r3, #12
 8005ac6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005aca:	647a      	str	r2, [r7, #68]	; 0x44
 8005acc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ad0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e3      	bne.n	8005aa6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3314      	adds	r3, #20
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	623b      	str	r3, [r7, #32]
   return(result);
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3314      	adds	r3, #20
 8005afe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b02:	633a      	str	r2, [r7, #48]	; 0x30
 8005b04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e3      	bne.n	8005ade <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	330c      	adds	r3, #12
 8005b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0310 	bic.w	r3, r3, #16
 8005b3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	330c      	adds	r3, #12
 8005b44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b48:	61fa      	str	r2, [r7, #28]
 8005b4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	69b9      	ldr	r1, [r7, #24]
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	617b      	str	r3, [r7, #20]
   return(result);
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e3      	bne.n	8005b24 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f870 	bl	8005c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b68:	e023      	b.n	8005bb2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <HAL_UART_IRQHandler+0x4ea>
 8005b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fb68 	bl	8006258 <UART_Transmit_IT>
    return;
 8005b88:	e014      	b.n	8005bb4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00e      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x514>
 8005b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fba8 	bl	80062f8 <UART_EndTransmit_IT>
    return;
 8005ba8:	e004      	b.n	8005bb4 <HAL_UART_IRQHandler+0x514>
    return;
 8005baa:	bf00      	nop
 8005bac:	e002      	b.n	8005bb4 <HAL_UART_IRQHandler+0x514>
      return;
 8005bae:	bf00      	nop
 8005bb0:	e000      	b.n	8005bb4 <HAL_UART_IRQHandler+0x514>
      return;
 8005bb2:	bf00      	nop
  }
}
 8005bb4:	37e8      	adds	r7, #232	; 0xe8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop

08005bbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b090      	sub	sp, #64	; 0x40
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d137      	bne.n	8005cec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7e:	2200      	movs	r2, #0
 8005c80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3314      	adds	r3, #20
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	623b      	str	r3, [r7, #32]
   return(result);
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3314      	adds	r3, #20
 8005ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ca2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005caa:	e841 2300 	strex	r3, r2, [r1]
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e5      	bne.n	8005c82 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	330c      	adds	r3, #12
 8005cbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8005cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cd6:	61fa      	str	r2, [r7, #28]
 8005cd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cda:	69b9      	ldr	r1, [r7, #24]
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	e841 2300 	strex	r3, r2, [r1]
 8005ce2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1e5      	bne.n	8005cb6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cea:	e002      	b.n	8005cf2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005cec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005cee:	f7ff ff65 	bl	8005bbc <HAL_UART_TxCpltCallback>
}
 8005cf2:	bf00      	nop
 8005cf4:	3740      	adds	r7, #64	; 0x40
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f7ff ff61 	bl	8005bd0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d0e:	bf00      	nop
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b09c      	sub	sp, #112	; 0x70
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d22:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d172      	bne.n	8005e18 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d34:	2200      	movs	r2, #0
 8005d36:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d42:	e853 3f00 	ldrex	r3, [r3]
 8005d46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	330c      	adds	r3, #12
 8005d56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d58:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d60:	e841 2300 	strex	r3, r2, [r1]
 8005d64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1e5      	bne.n	8005d38 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d76:	e853 3f00 	ldrex	r3, [r3]
 8005d7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7e:	f023 0301 	bic.w	r3, r3, #1
 8005d82:	667b      	str	r3, [r7, #100]	; 0x64
 8005d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3314      	adds	r3, #20
 8005d8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005d8c:	647a      	str	r2, [r7, #68]	; 0x44
 8005d8e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d94:	e841 2300 	strex	r3, r2, [r1]
 8005d98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e5      	bne.n	8005d6c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3314      	adds	r3, #20
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	e853 3f00 	ldrex	r3, [r3]
 8005dae:	623b      	str	r3, [r7, #32]
   return(result);
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db6:	663b      	str	r3, [r7, #96]	; 0x60
 8005db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3314      	adds	r3, #20
 8005dbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005dc0:	633a      	str	r2, [r7, #48]	; 0x30
 8005dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e5      	bne.n	8005da0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d119      	bne.n	8005e18 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	330c      	adds	r3, #12
 8005dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0310 	bic.w	r3, r3, #16
 8005dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	330c      	adds	r3, #12
 8005e02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e04:	61fa      	str	r2, [r7, #28]
 8005e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e08:	69b9      	ldr	r1, [r7, #24]
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	e841 2300 	strex	r3, r2, [r1]
 8005e10:	617b      	str	r3, [r7, #20]
   return(result);
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e5      	bne.n	8005de4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d106      	bne.n	8005e2e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e24:	4619      	mov	r1, r3
 8005e26:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e28:	f7ff ff0e 	bl	8005c48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e2c:	e002      	b.n	8005e34 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005e2e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e30:	f7ff fed8 	bl	8005be4 <HAL_UART_RxCpltCallback>
}
 8005e34:	bf00      	nop
 8005e36:	3770      	adds	r7, #112	; 0x70
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d108      	bne.n	8005e64 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e56:	085b      	lsrs	r3, r3, #1
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7ff fef3 	bl	8005c48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e62:	e002      	b.n	8005e6a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f7ff fec7 	bl	8005bf8 <HAL_UART_RxHalfCpltCallback>
}
 8005e6a:	bf00      	nop
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8e:	2b80      	cmp	r3, #128	; 0x80
 8005e90:	bf0c      	ite	eq
 8005e92:	2301      	moveq	r3, #1
 8005e94:	2300      	movne	r3, #0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b21      	cmp	r3, #33	; 0x21
 8005ea4:	d108      	bne.n	8005eb8 <UART_DMAError+0x46>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005eb2:	68b8      	ldr	r0, [r7, #8]
 8005eb4:	f000 f904 	bl	80060c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec2:	2b40      	cmp	r3, #64	; 0x40
 8005ec4:	bf0c      	ite	eq
 8005ec6:	2301      	moveq	r3, #1
 8005ec8:	2300      	movne	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b22      	cmp	r3, #34	; 0x22
 8005ed8:	d108      	bne.n	8005eec <UART_DMAError+0x7a>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ee6:	68b8      	ldr	r0, [r7, #8]
 8005ee8:	f000 f912 	bl	8006110 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	f043 0210 	orr.w	r2, r3, #16
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ef8:	68b8      	ldr	r0, [r7, #8]
 8005efa:	f7ff fe87 	bl	8005c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005efe:	bf00      	nop
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	4613      	mov	r3, r2
 8005f12:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	88fa      	ldrh	r2, [r7, #6]
 8005f1e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	88fa      	ldrh	r2, [r7, #6]
 8005f24:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2222      	movs	r2, #34	; 0x22
 8005f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f52:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	695a      	ldr	r2, [r3, #20]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0220 	orr.w	r2, r2, #32
 8005f72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b098      	sub	sp, #96	; 0x60
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	88fa      	ldrh	r2, [r7, #6]
 8005f9c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2222      	movs	r2, #34	; 0x22
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	4a40      	ldr	r2, [pc, #256]	; (80060b4 <UART_Start_Receive_DMA+0x130>)
 8005fb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb8:	4a3f      	ldr	r2, [pc, #252]	; (80060b8 <UART_Start_Receive_DMA+0x134>)
 8005fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	4a3e      	ldr	r2, [pc, #248]	; (80060bc <UART_Start_Receive_DMA+0x138>)
 8005fc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc8:	2200      	movs	r2, #0
 8005fca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005fcc:	f107 0308 	add.w	r3, r7, #8
 8005fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	88fb      	ldrh	r3, [r7, #6]
 8005fe4:	f7fd fab4 	bl	8003550 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005fe8:	2300      	movs	r3, #0
 8005fea:	613b      	str	r3, [r7, #16]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	613b      	str	r3, [r7, #16]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	613b      	str	r3, [r7, #16]
 8005ffc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d019      	beq.n	8006042 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	330c      	adds	r3, #12
 8006014:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800601e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006024:	65bb      	str	r3, [r7, #88]	; 0x58
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	330c      	adds	r3, #12
 800602c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800602e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006030:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800603c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e5      	bne.n	800600e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3314      	adds	r3, #20
 8006048:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	657b      	str	r3, [r7, #84]	; 0x54
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3314      	adds	r3, #20
 8006060:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006062:	63ba      	str	r2, [r7, #56]	; 0x38
 8006064:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800606a:	e841 2300 	strex	r3, r2, [r1]
 800606e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1e5      	bne.n	8006042 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3314      	adds	r3, #20
 800607c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	e853 3f00 	ldrex	r3, [r3]
 8006084:	617b      	str	r3, [r7, #20]
   return(result);
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800608c:	653b      	str	r3, [r7, #80]	; 0x50
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3314      	adds	r3, #20
 8006094:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006096:	627a      	str	r2, [r7, #36]	; 0x24
 8006098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609a:	6a39      	ldr	r1, [r7, #32]
 800609c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609e:	e841 2300 	strex	r3, r2, [r1]
 80060a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1e5      	bne.n	8006076 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3760      	adds	r7, #96	; 0x60
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	08005d17 	.word	0x08005d17
 80060b8:	08005e3d 	.word	0x08005e3d
 80060bc:	08005e73 	.word	0x08005e73

080060c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b089      	sub	sp, #36	; 0x24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060de:	61fb      	str	r3, [r7, #28]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	330c      	adds	r3, #12
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	61ba      	str	r2, [r7, #24]
 80060ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6979      	ldr	r1, [r7, #20]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	613b      	str	r3, [r7, #16]
   return(result);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e5      	bne.n	80060c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006104:	bf00      	nop
 8006106:	3724      	adds	r7, #36	; 0x24
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006110:	b480      	push	{r7}
 8006112:	b095      	sub	sp, #84	; 0x54
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	330c      	adds	r3, #12
 800611e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800612e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	330c      	adds	r3, #12
 8006136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006138:	643a      	str	r2, [r7, #64]	; 0x40
 800613a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800613e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006140:	e841 2300 	strex	r3, r2, [r1]
 8006144:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e5      	bne.n	8006118 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3314      	adds	r3, #20
 8006152:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	e853 3f00 	ldrex	r3, [r3]
 800615a:	61fb      	str	r3, [r7, #28]
   return(result);
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f023 0301 	bic.w	r3, r3, #1
 8006162:	64bb      	str	r3, [r7, #72]	; 0x48
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3314      	adds	r3, #20
 800616a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800616c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800616e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006174:	e841 2300 	strex	r3, r2, [r1]
 8006178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1e5      	bne.n	800614c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	2b01      	cmp	r3, #1
 8006186:	d119      	bne.n	80061bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	330c      	adds	r3, #12
 800618e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	e853 3f00 	ldrex	r3, [r3]
 8006196:	60bb      	str	r3, [r7, #8]
   return(result);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f023 0310 	bic.w	r3, r3, #16
 800619e:	647b      	str	r3, [r7, #68]	; 0x44
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	330c      	adds	r3, #12
 80061a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061a8:	61ba      	str	r2, [r7, #24]
 80061aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ac:	6979      	ldr	r1, [r7, #20]
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	e841 2300 	strex	r3, r2, [r1]
 80061b4:	613b      	str	r3, [r7, #16]
   return(result);
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1e5      	bne.n	8006188 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2220      	movs	r2, #32
 80061c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061ca:	bf00      	nop
 80061cc:	3754      	adds	r7, #84	; 0x54
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7ff fd0b 	bl	8005c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f6:	bf00      	nop
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2220      	movs	r2, #32
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f7ff fd00 	bl	8005c20 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006220:	bf00      	nop
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f7ff fcf2 	bl	8005c34 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006250:	bf00      	nop
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b21      	cmp	r3, #33	; 0x21
 800626a:	d13e      	bne.n	80062ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006274:	d114      	bne.n	80062a0 <UART_Transmit_IT+0x48>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d110      	bne.n	80062a0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	461a      	mov	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006292:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	1c9a      	adds	r2, r3, #2
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	621a      	str	r2, [r3, #32]
 800629e:	e008      	b.n	80062b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	1c59      	adds	r1, r3, #1
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6211      	str	r1, [r2, #32]
 80062aa:	781a      	ldrb	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	4619      	mov	r1, r3
 80062c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10f      	bne.n	80062e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	e000      	b.n	80062ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062ea:	2302      	movs	r3, #2
  }
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800630e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7ff fc4f 	bl	8005bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08c      	sub	sp, #48	; 0x30
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b22      	cmp	r3, #34	; 0x22
 800633a:	f040 80ab 	bne.w	8006494 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006346:	d117      	bne.n	8006378 <UART_Receive_IT+0x50>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d113      	bne.n	8006378 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006350:	2300      	movs	r3, #0
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	b29b      	uxth	r3, r3
 8006362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006366:	b29a      	uxth	r2, r3
 8006368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006370:	1c9a      	adds	r2, r3, #2
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	629a      	str	r2, [r3, #40]	; 0x28
 8006376:	e026      	b.n	80063c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800637e:	2300      	movs	r3, #0
 8006380:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638a:	d007      	beq.n	800639c <UART_Receive_IT+0x74>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <UART_Receive_IT+0x82>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d106      	bne.n	80063aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	e008      	b.n	80063bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	4619      	mov	r1, r3
 80063d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d15a      	bne.n	8006490 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0220 	bic.w	r2, r2, #32
 80063e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	695a      	ldr	r2, [r3, #20]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0201 	bic.w	r2, r2, #1
 8006408:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2220      	movs	r2, #32
 800640e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	2b01      	cmp	r3, #1
 8006418:	d135      	bne.n	8006486 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	330c      	adds	r3, #12
 8006426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	613b      	str	r3, [r7, #16]
   return(result);
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f023 0310 	bic.w	r3, r3, #16
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006440:	623a      	str	r2, [r7, #32]
 8006442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	69f9      	ldr	r1, [r7, #28]
 8006446:	6a3a      	ldr	r2, [r7, #32]
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	61bb      	str	r3, [r7, #24]
   return(result);
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e5      	bne.n	8006420 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0310 	and.w	r3, r3, #16
 800645e:	2b10      	cmp	r3, #16
 8006460:	d10a      	bne.n	8006478 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff fbe2 	bl	8005c48 <HAL_UARTEx_RxEventCallback>
 8006484:	e002      	b.n	800648c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff fbac 	bl	8005be4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	e002      	b.n	8006496 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	e000      	b.n	8006496 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006494:	2302      	movs	r3, #2
  }
}
 8006496:	4618      	mov	r0, r3
 8006498:	3730      	adds	r7, #48	; 0x30
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064a4:	b0c0      	sub	sp, #256	; 0x100
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064bc:	68d9      	ldr	r1, [r3, #12]
 80064be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	ea40 0301 	orr.w	r3, r0, r1
 80064c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	431a      	orrs	r2, r3
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064f8:	f021 010c 	bic.w	r1, r1, #12
 80064fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006506:	430b      	orrs	r3, r1
 8006508:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800650a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651a:	6999      	ldr	r1, [r3, #24]
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	ea40 0301 	orr.w	r3, r0, r1
 8006526:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4b8f      	ldr	r3, [pc, #572]	; (800676c <UART_SetConfig+0x2cc>)
 8006530:	429a      	cmp	r2, r3
 8006532:	d005      	beq.n	8006540 <UART_SetConfig+0xa0>
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	4b8d      	ldr	r3, [pc, #564]	; (8006770 <UART_SetConfig+0x2d0>)
 800653c:	429a      	cmp	r2, r3
 800653e:	d104      	bne.n	800654a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006540:	f7fe f954 	bl	80047ec <HAL_RCC_GetPCLK2Freq>
 8006544:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006548:	e003      	b.n	8006552 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800654a:	f7fe f93b 	bl	80047c4 <HAL_RCC_GetPCLK1Freq>
 800654e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800655c:	f040 810c 	bne.w	8006778 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006564:	2200      	movs	r2, #0
 8006566:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800656a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800656e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006572:	4622      	mov	r2, r4
 8006574:	462b      	mov	r3, r5
 8006576:	1891      	adds	r1, r2, r2
 8006578:	65b9      	str	r1, [r7, #88]	; 0x58
 800657a:	415b      	adcs	r3, r3
 800657c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800657e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006582:	4621      	mov	r1, r4
 8006584:	eb12 0801 	adds.w	r8, r2, r1
 8006588:	4629      	mov	r1, r5
 800658a:	eb43 0901 	adc.w	r9, r3, r1
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	f04f 0300 	mov.w	r3, #0
 8006596:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800659a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800659e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065a2:	4690      	mov	r8, r2
 80065a4:	4699      	mov	r9, r3
 80065a6:	4623      	mov	r3, r4
 80065a8:	eb18 0303 	adds.w	r3, r8, r3
 80065ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065b0:	462b      	mov	r3, r5
 80065b2:	eb49 0303 	adc.w	r3, r9, r3
 80065b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80065ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065ce:	460b      	mov	r3, r1
 80065d0:	18db      	adds	r3, r3, r3
 80065d2:	653b      	str	r3, [r7, #80]	; 0x50
 80065d4:	4613      	mov	r3, r2
 80065d6:	eb42 0303 	adc.w	r3, r2, r3
 80065da:	657b      	str	r3, [r7, #84]	; 0x54
 80065dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065e4:	f7f9 fdf8 	bl	80001d8 <__aeabi_uldivmod>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4b61      	ldr	r3, [pc, #388]	; (8006774 <UART_SetConfig+0x2d4>)
 80065ee:	fba3 2302 	umull	r2, r3, r3, r2
 80065f2:	095b      	lsrs	r3, r3, #5
 80065f4:	011c      	lsls	r4, r3, #4
 80065f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006600:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006604:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006608:	4642      	mov	r2, r8
 800660a:	464b      	mov	r3, r9
 800660c:	1891      	adds	r1, r2, r2
 800660e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006610:	415b      	adcs	r3, r3
 8006612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006614:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006618:	4641      	mov	r1, r8
 800661a:	eb12 0a01 	adds.w	sl, r2, r1
 800661e:	4649      	mov	r1, r9
 8006620:	eb43 0b01 	adc.w	fp, r3, r1
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	f04f 0300 	mov.w	r3, #0
 800662c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006630:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006638:	4692      	mov	sl, r2
 800663a:	469b      	mov	fp, r3
 800663c:	4643      	mov	r3, r8
 800663e:	eb1a 0303 	adds.w	r3, sl, r3
 8006642:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006646:	464b      	mov	r3, r9
 8006648:	eb4b 0303 	adc.w	r3, fp, r3
 800664c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800665c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006660:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006664:	460b      	mov	r3, r1
 8006666:	18db      	adds	r3, r3, r3
 8006668:	643b      	str	r3, [r7, #64]	; 0x40
 800666a:	4613      	mov	r3, r2
 800666c:	eb42 0303 	adc.w	r3, r2, r3
 8006670:	647b      	str	r3, [r7, #68]	; 0x44
 8006672:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006676:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800667a:	f7f9 fdad 	bl	80001d8 <__aeabi_uldivmod>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4611      	mov	r1, r2
 8006684:	4b3b      	ldr	r3, [pc, #236]	; (8006774 <UART_SetConfig+0x2d4>)
 8006686:	fba3 2301 	umull	r2, r3, r3, r1
 800668a:	095b      	lsrs	r3, r3, #5
 800668c:	2264      	movs	r2, #100	; 0x64
 800668e:	fb02 f303 	mul.w	r3, r2, r3
 8006692:	1acb      	subs	r3, r1, r3
 8006694:	00db      	lsls	r3, r3, #3
 8006696:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800669a:	4b36      	ldr	r3, [pc, #216]	; (8006774 <UART_SetConfig+0x2d4>)
 800669c:	fba3 2302 	umull	r2, r3, r3, r2
 80066a0:	095b      	lsrs	r3, r3, #5
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066a8:	441c      	add	r4, r3
 80066aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ae:	2200      	movs	r2, #0
 80066b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80066b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80066bc:	4642      	mov	r2, r8
 80066be:	464b      	mov	r3, r9
 80066c0:	1891      	adds	r1, r2, r2
 80066c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80066c4:	415b      	adcs	r3, r3
 80066c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066cc:	4641      	mov	r1, r8
 80066ce:	1851      	adds	r1, r2, r1
 80066d0:	6339      	str	r1, [r7, #48]	; 0x30
 80066d2:	4649      	mov	r1, r9
 80066d4:	414b      	adcs	r3, r1
 80066d6:	637b      	str	r3, [r7, #52]	; 0x34
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	f04f 0300 	mov.w	r3, #0
 80066e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066e4:	4659      	mov	r1, fp
 80066e6:	00cb      	lsls	r3, r1, #3
 80066e8:	4651      	mov	r1, sl
 80066ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066ee:	4651      	mov	r1, sl
 80066f0:	00ca      	lsls	r2, r1, #3
 80066f2:	4610      	mov	r0, r2
 80066f4:	4619      	mov	r1, r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	4642      	mov	r2, r8
 80066fa:	189b      	adds	r3, r3, r2
 80066fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006700:	464b      	mov	r3, r9
 8006702:	460a      	mov	r2, r1
 8006704:	eb42 0303 	adc.w	r3, r2, r3
 8006708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800670c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006718:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800671c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006720:	460b      	mov	r3, r1
 8006722:	18db      	adds	r3, r3, r3
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
 8006726:	4613      	mov	r3, r2
 8006728:	eb42 0303 	adc.w	r3, r2, r3
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800672e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006732:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006736:	f7f9 fd4f 	bl	80001d8 <__aeabi_uldivmod>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4b0d      	ldr	r3, [pc, #52]	; (8006774 <UART_SetConfig+0x2d4>)
 8006740:	fba3 1302 	umull	r1, r3, r3, r2
 8006744:	095b      	lsrs	r3, r3, #5
 8006746:	2164      	movs	r1, #100	; 0x64
 8006748:	fb01 f303 	mul.w	r3, r1, r3
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	3332      	adds	r3, #50	; 0x32
 8006752:	4a08      	ldr	r2, [pc, #32]	; (8006774 <UART_SetConfig+0x2d4>)
 8006754:	fba2 2303 	umull	r2, r3, r2, r3
 8006758:	095b      	lsrs	r3, r3, #5
 800675a:	f003 0207 	and.w	r2, r3, #7
 800675e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4422      	add	r2, r4
 8006766:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006768:	e105      	b.n	8006976 <UART_SetConfig+0x4d6>
 800676a:	bf00      	nop
 800676c:	40011000 	.word	0x40011000
 8006770:	40011400 	.word	0x40011400
 8006774:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800677c:	2200      	movs	r2, #0
 800677e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006782:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006786:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800678a:	4642      	mov	r2, r8
 800678c:	464b      	mov	r3, r9
 800678e:	1891      	adds	r1, r2, r2
 8006790:	6239      	str	r1, [r7, #32]
 8006792:	415b      	adcs	r3, r3
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
 8006796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800679a:	4641      	mov	r1, r8
 800679c:	1854      	adds	r4, r2, r1
 800679e:	4649      	mov	r1, r9
 80067a0:	eb43 0501 	adc.w	r5, r3, r1
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	f04f 0300 	mov.w	r3, #0
 80067ac:	00eb      	lsls	r3, r5, #3
 80067ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067b2:	00e2      	lsls	r2, r4, #3
 80067b4:	4614      	mov	r4, r2
 80067b6:	461d      	mov	r5, r3
 80067b8:	4643      	mov	r3, r8
 80067ba:	18e3      	adds	r3, r4, r3
 80067bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067c0:	464b      	mov	r3, r9
 80067c2:	eb45 0303 	adc.w	r3, r5, r3
 80067c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067da:	f04f 0200 	mov.w	r2, #0
 80067de:	f04f 0300 	mov.w	r3, #0
 80067e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067e6:	4629      	mov	r1, r5
 80067e8:	008b      	lsls	r3, r1, #2
 80067ea:	4621      	mov	r1, r4
 80067ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067f0:	4621      	mov	r1, r4
 80067f2:	008a      	lsls	r2, r1, #2
 80067f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067f8:	f7f9 fcee 	bl	80001d8 <__aeabi_uldivmod>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4b60      	ldr	r3, [pc, #384]	; (8006984 <UART_SetConfig+0x4e4>)
 8006802:	fba3 2302 	umull	r2, r3, r3, r2
 8006806:	095b      	lsrs	r3, r3, #5
 8006808:	011c      	lsls	r4, r3, #4
 800680a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800680e:	2200      	movs	r2, #0
 8006810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006814:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006818:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800681c:	4642      	mov	r2, r8
 800681e:	464b      	mov	r3, r9
 8006820:	1891      	adds	r1, r2, r2
 8006822:	61b9      	str	r1, [r7, #24]
 8006824:	415b      	adcs	r3, r3
 8006826:	61fb      	str	r3, [r7, #28]
 8006828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800682c:	4641      	mov	r1, r8
 800682e:	1851      	adds	r1, r2, r1
 8006830:	6139      	str	r1, [r7, #16]
 8006832:	4649      	mov	r1, r9
 8006834:	414b      	adcs	r3, r1
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006844:	4659      	mov	r1, fp
 8006846:	00cb      	lsls	r3, r1, #3
 8006848:	4651      	mov	r1, sl
 800684a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800684e:	4651      	mov	r1, sl
 8006850:	00ca      	lsls	r2, r1, #3
 8006852:	4610      	mov	r0, r2
 8006854:	4619      	mov	r1, r3
 8006856:	4603      	mov	r3, r0
 8006858:	4642      	mov	r2, r8
 800685a:	189b      	adds	r3, r3, r2
 800685c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006860:	464b      	mov	r3, r9
 8006862:	460a      	mov	r2, r1
 8006864:	eb42 0303 	adc.w	r3, r2, r3
 8006868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800686c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	67bb      	str	r3, [r7, #120]	; 0x78
 8006876:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	f04f 0300 	mov.w	r3, #0
 8006880:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006884:	4649      	mov	r1, r9
 8006886:	008b      	lsls	r3, r1, #2
 8006888:	4641      	mov	r1, r8
 800688a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800688e:	4641      	mov	r1, r8
 8006890:	008a      	lsls	r2, r1, #2
 8006892:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006896:	f7f9 fc9f 	bl	80001d8 <__aeabi_uldivmod>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	4b39      	ldr	r3, [pc, #228]	; (8006984 <UART_SetConfig+0x4e4>)
 80068a0:	fba3 1302 	umull	r1, r3, r3, r2
 80068a4:	095b      	lsrs	r3, r3, #5
 80068a6:	2164      	movs	r1, #100	; 0x64
 80068a8:	fb01 f303 	mul.w	r3, r1, r3
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	3332      	adds	r3, #50	; 0x32
 80068b2:	4a34      	ldr	r2, [pc, #208]	; (8006984 <UART_SetConfig+0x4e4>)
 80068b4:	fba2 2303 	umull	r2, r3, r2, r3
 80068b8:	095b      	lsrs	r3, r3, #5
 80068ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068be:	441c      	add	r4, r3
 80068c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068c4:	2200      	movs	r2, #0
 80068c6:	673b      	str	r3, [r7, #112]	; 0x70
 80068c8:	677a      	str	r2, [r7, #116]	; 0x74
 80068ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80068ce:	4642      	mov	r2, r8
 80068d0:	464b      	mov	r3, r9
 80068d2:	1891      	adds	r1, r2, r2
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	415b      	adcs	r3, r3
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068de:	4641      	mov	r1, r8
 80068e0:	1851      	adds	r1, r2, r1
 80068e2:	6039      	str	r1, [r7, #0]
 80068e4:	4649      	mov	r1, r9
 80068e6:	414b      	adcs	r3, r1
 80068e8:	607b      	str	r3, [r7, #4]
 80068ea:	f04f 0200 	mov.w	r2, #0
 80068ee:	f04f 0300 	mov.w	r3, #0
 80068f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068f6:	4659      	mov	r1, fp
 80068f8:	00cb      	lsls	r3, r1, #3
 80068fa:	4651      	mov	r1, sl
 80068fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006900:	4651      	mov	r1, sl
 8006902:	00ca      	lsls	r2, r1, #3
 8006904:	4610      	mov	r0, r2
 8006906:	4619      	mov	r1, r3
 8006908:	4603      	mov	r3, r0
 800690a:	4642      	mov	r2, r8
 800690c:	189b      	adds	r3, r3, r2
 800690e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006910:	464b      	mov	r3, r9
 8006912:	460a      	mov	r2, r1
 8006914:	eb42 0303 	adc.w	r3, r2, r3
 8006918:	66fb      	str	r3, [r7, #108]	; 0x6c
 800691a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	663b      	str	r3, [r7, #96]	; 0x60
 8006924:	667a      	str	r2, [r7, #100]	; 0x64
 8006926:	f04f 0200 	mov.w	r2, #0
 800692a:	f04f 0300 	mov.w	r3, #0
 800692e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006932:	4649      	mov	r1, r9
 8006934:	008b      	lsls	r3, r1, #2
 8006936:	4641      	mov	r1, r8
 8006938:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800693c:	4641      	mov	r1, r8
 800693e:	008a      	lsls	r2, r1, #2
 8006940:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006944:	f7f9 fc48 	bl	80001d8 <__aeabi_uldivmod>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <UART_SetConfig+0x4e4>)
 800694e:	fba3 1302 	umull	r1, r3, r3, r2
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	2164      	movs	r1, #100	; 0x64
 8006956:	fb01 f303 	mul.w	r3, r1, r3
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	3332      	adds	r3, #50	; 0x32
 8006960:	4a08      	ldr	r2, [pc, #32]	; (8006984 <UART_SetConfig+0x4e4>)
 8006962:	fba2 2303 	umull	r2, r3, r2, r3
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	f003 020f 	and.w	r2, r3, #15
 800696c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4422      	add	r2, r4
 8006974:	609a      	str	r2, [r3, #8]
}
 8006976:	bf00      	nop
 8006978:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800697c:	46bd      	mov	sp, r7
 800697e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006982:	bf00      	nop
 8006984:	51eb851f 	.word	0x51eb851f

08006988 <__cxa_pure_virtual>:
 8006988:	b508      	push	{r3, lr}
 800698a:	f000 f80d 	bl	80069a8 <_ZSt9terminatev>

0800698e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800698e:	b508      	push	{r3, lr}
 8006990:	4780      	blx	r0
 8006992:	f000 f80e 	bl	80069b2 <abort>
	...

08006998 <_ZSt13get_terminatev>:
 8006998:	4b02      	ldr	r3, [pc, #8]	; (80069a4 <_ZSt13get_terminatev+0xc>)
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	f3bf 8f5b 	dmb	ish
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	20000028 	.word	0x20000028

080069a8 <_ZSt9terminatev>:
 80069a8:	b508      	push	{r3, lr}
 80069aa:	f7ff fff5 	bl	8006998 <_ZSt13get_terminatev>
 80069ae:	f7ff ffee 	bl	800698e <_ZN10__cxxabiv111__terminateEPFvvE>

080069b2 <abort>:
 80069b2:	b508      	push	{r3, lr}
 80069b4:	2006      	movs	r0, #6
 80069b6:	f000 f873 	bl	8006aa0 <raise>
 80069ba:	2001      	movs	r0, #1
 80069bc:	f7fc faca 	bl	8002f54 <_exit>

080069c0 <__errno>:
 80069c0:	4b01      	ldr	r3, [pc, #4]	; (80069c8 <__errno+0x8>)
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	2000002c 	.word	0x2000002c

080069cc <__libc_init_array>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	4d0d      	ldr	r5, [pc, #52]	; (8006a04 <__libc_init_array+0x38>)
 80069d0:	4c0d      	ldr	r4, [pc, #52]	; (8006a08 <__libc_init_array+0x3c>)
 80069d2:	1b64      	subs	r4, r4, r5
 80069d4:	10a4      	asrs	r4, r4, #2
 80069d6:	2600      	movs	r6, #0
 80069d8:	42a6      	cmp	r6, r4
 80069da:	d109      	bne.n	80069f0 <__libc_init_array+0x24>
 80069dc:	4d0b      	ldr	r5, [pc, #44]	; (8006a0c <__libc_init_array+0x40>)
 80069de:	4c0c      	ldr	r4, [pc, #48]	; (8006a10 <__libc_init_array+0x44>)
 80069e0:	f000 f9b0 	bl	8006d44 <_init>
 80069e4:	1b64      	subs	r4, r4, r5
 80069e6:	10a4      	asrs	r4, r4, #2
 80069e8:	2600      	movs	r6, #0
 80069ea:	42a6      	cmp	r6, r4
 80069ec:	d105      	bne.n	80069fa <__libc_init_array+0x2e>
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f4:	4798      	blx	r3
 80069f6:	3601      	adds	r6, #1
 80069f8:	e7ee      	b.n	80069d8 <__libc_init_array+0xc>
 80069fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80069fe:	4798      	blx	r3
 8006a00:	3601      	adds	r6, #1
 8006a02:	e7f2      	b.n	80069ea <__libc_init_array+0x1e>
 8006a04:	080071a4 	.word	0x080071a4
 8006a08:	080071a4 	.word	0x080071a4
 8006a0c:	080071a4 	.word	0x080071a4
 8006a10:	080071ac 	.word	0x080071ac

08006a14 <memcpy>:
 8006a14:	440a      	add	r2, r1
 8006a16:	4291      	cmp	r1, r2
 8006a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a1c:	d100      	bne.n	8006a20 <memcpy+0xc>
 8006a1e:	4770      	bx	lr
 8006a20:	b510      	push	{r4, lr}
 8006a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a2a:	4291      	cmp	r1, r2
 8006a2c:	d1f9      	bne.n	8006a22 <memcpy+0xe>
 8006a2e:	bd10      	pop	{r4, pc}

08006a30 <memset>:
 8006a30:	4402      	add	r2, r0
 8006a32:	4603      	mov	r3, r0
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d100      	bne.n	8006a3a <memset+0xa>
 8006a38:	4770      	bx	lr
 8006a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a3e:	e7f9      	b.n	8006a34 <memset+0x4>

08006a40 <realloc>:
 8006a40:	4b02      	ldr	r3, [pc, #8]	; (8006a4c <realloc+0xc>)
 8006a42:	460a      	mov	r2, r1
 8006a44:	4601      	mov	r1, r0
 8006a46:	6818      	ldr	r0, [r3, #0]
 8006a48:	f000 b8da 	b.w	8006c00 <_realloc_r>
 8006a4c:	2000002c 	.word	0x2000002c

08006a50 <_raise_r>:
 8006a50:	291f      	cmp	r1, #31
 8006a52:	b538      	push	{r3, r4, r5, lr}
 8006a54:	4604      	mov	r4, r0
 8006a56:	460d      	mov	r5, r1
 8006a58:	d904      	bls.n	8006a64 <_raise_r+0x14>
 8006a5a:	2316      	movs	r3, #22
 8006a5c:	6003      	str	r3, [r0, #0]
 8006a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a66:	b112      	cbz	r2, 8006a6e <_raise_r+0x1e>
 8006a68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a6c:	b94b      	cbnz	r3, 8006a82 <_raise_r+0x32>
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 f830 	bl	8006ad4 <_getpid_r>
 8006a74:	462a      	mov	r2, r5
 8006a76:	4601      	mov	r1, r0
 8006a78:	4620      	mov	r0, r4
 8006a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a7e:	f000 b817 	b.w	8006ab0 <_kill_r>
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d00a      	beq.n	8006a9c <_raise_r+0x4c>
 8006a86:	1c59      	adds	r1, r3, #1
 8006a88:	d103      	bne.n	8006a92 <_raise_r+0x42>
 8006a8a:	2316      	movs	r3, #22
 8006a8c:	6003      	str	r3, [r0, #0]
 8006a8e:	2001      	movs	r0, #1
 8006a90:	e7e7      	b.n	8006a62 <_raise_r+0x12>
 8006a92:	2400      	movs	r4, #0
 8006a94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a98:	4628      	mov	r0, r5
 8006a9a:	4798      	blx	r3
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	e7e0      	b.n	8006a62 <_raise_r+0x12>

08006aa0 <raise>:
 8006aa0:	4b02      	ldr	r3, [pc, #8]	; (8006aac <raise+0xc>)
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	6818      	ldr	r0, [r3, #0]
 8006aa6:	f7ff bfd3 	b.w	8006a50 <_raise_r>
 8006aaa:	bf00      	nop
 8006aac:	2000002c 	.word	0x2000002c

08006ab0 <_kill_r>:
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	4d07      	ldr	r5, [pc, #28]	; (8006ad0 <_kill_r+0x20>)
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	4608      	mov	r0, r1
 8006aba:	4611      	mov	r1, r2
 8006abc:	602b      	str	r3, [r5, #0]
 8006abe:	f7fc fa39 	bl	8002f34 <_kill>
 8006ac2:	1c43      	adds	r3, r0, #1
 8006ac4:	d102      	bne.n	8006acc <_kill_r+0x1c>
 8006ac6:	682b      	ldr	r3, [r5, #0]
 8006ac8:	b103      	cbz	r3, 8006acc <_kill_r+0x1c>
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	bd38      	pop	{r3, r4, r5, pc}
 8006ace:	bf00      	nop
 8006ad0:	20000df4 	.word	0x20000df4

08006ad4 <_getpid_r>:
 8006ad4:	f7fc ba26 	b.w	8002f24 <_getpid>

08006ad8 <sbrk_aligned>:
 8006ad8:	b570      	push	{r4, r5, r6, lr}
 8006ada:	4e0e      	ldr	r6, [pc, #56]	; (8006b14 <sbrk_aligned+0x3c>)
 8006adc:	460c      	mov	r4, r1
 8006ade:	6831      	ldr	r1, [r6, #0]
 8006ae0:	4605      	mov	r5, r0
 8006ae2:	b911      	cbnz	r1, 8006aea <sbrk_aligned+0x12>
 8006ae4:	f000 f8bc 	bl	8006c60 <_sbrk_r>
 8006ae8:	6030      	str	r0, [r6, #0]
 8006aea:	4621      	mov	r1, r4
 8006aec:	4628      	mov	r0, r5
 8006aee:	f000 f8b7 	bl	8006c60 <_sbrk_r>
 8006af2:	1c43      	adds	r3, r0, #1
 8006af4:	d00a      	beq.n	8006b0c <sbrk_aligned+0x34>
 8006af6:	1cc4      	adds	r4, r0, #3
 8006af8:	f024 0403 	bic.w	r4, r4, #3
 8006afc:	42a0      	cmp	r0, r4
 8006afe:	d007      	beq.n	8006b10 <sbrk_aligned+0x38>
 8006b00:	1a21      	subs	r1, r4, r0
 8006b02:	4628      	mov	r0, r5
 8006b04:	f000 f8ac 	bl	8006c60 <_sbrk_r>
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d101      	bne.n	8006b10 <sbrk_aligned+0x38>
 8006b0c:	f04f 34ff 	mov.w	r4, #4294967295
 8006b10:	4620      	mov	r0, r4
 8006b12:	bd70      	pop	{r4, r5, r6, pc}
 8006b14:	20000df0 	.word	0x20000df0

08006b18 <_malloc_r>:
 8006b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1c:	1ccd      	adds	r5, r1, #3
 8006b1e:	f025 0503 	bic.w	r5, r5, #3
 8006b22:	3508      	adds	r5, #8
 8006b24:	2d0c      	cmp	r5, #12
 8006b26:	bf38      	it	cc
 8006b28:	250c      	movcc	r5, #12
 8006b2a:	2d00      	cmp	r5, #0
 8006b2c:	4607      	mov	r7, r0
 8006b2e:	db01      	blt.n	8006b34 <_malloc_r+0x1c>
 8006b30:	42a9      	cmp	r1, r5
 8006b32:	d905      	bls.n	8006b40 <_malloc_r+0x28>
 8006b34:	230c      	movs	r3, #12
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	2600      	movs	r6, #0
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b40:	4e2e      	ldr	r6, [pc, #184]	; (8006bfc <_malloc_r+0xe4>)
 8006b42:	f000 f89d 	bl	8006c80 <__malloc_lock>
 8006b46:	6833      	ldr	r3, [r6, #0]
 8006b48:	461c      	mov	r4, r3
 8006b4a:	bb34      	cbnz	r4, 8006b9a <_malloc_r+0x82>
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	4638      	mov	r0, r7
 8006b50:	f7ff ffc2 	bl	8006ad8 <sbrk_aligned>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	4604      	mov	r4, r0
 8006b58:	d14d      	bne.n	8006bf6 <_malloc_r+0xde>
 8006b5a:	6834      	ldr	r4, [r6, #0]
 8006b5c:	4626      	mov	r6, r4
 8006b5e:	2e00      	cmp	r6, #0
 8006b60:	d140      	bne.n	8006be4 <_malloc_r+0xcc>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	4631      	mov	r1, r6
 8006b66:	4638      	mov	r0, r7
 8006b68:	eb04 0803 	add.w	r8, r4, r3
 8006b6c:	f000 f878 	bl	8006c60 <_sbrk_r>
 8006b70:	4580      	cmp	r8, r0
 8006b72:	d13a      	bne.n	8006bea <_malloc_r+0xd2>
 8006b74:	6821      	ldr	r1, [r4, #0]
 8006b76:	3503      	adds	r5, #3
 8006b78:	1a6d      	subs	r5, r5, r1
 8006b7a:	f025 0503 	bic.w	r5, r5, #3
 8006b7e:	3508      	adds	r5, #8
 8006b80:	2d0c      	cmp	r5, #12
 8006b82:	bf38      	it	cc
 8006b84:	250c      	movcc	r5, #12
 8006b86:	4629      	mov	r1, r5
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f7ff ffa5 	bl	8006ad8 <sbrk_aligned>
 8006b8e:	3001      	adds	r0, #1
 8006b90:	d02b      	beq.n	8006bea <_malloc_r+0xd2>
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	442b      	add	r3, r5
 8006b96:	6023      	str	r3, [r4, #0]
 8006b98:	e00e      	b.n	8006bb8 <_malloc_r+0xa0>
 8006b9a:	6822      	ldr	r2, [r4, #0]
 8006b9c:	1b52      	subs	r2, r2, r5
 8006b9e:	d41e      	bmi.n	8006bde <_malloc_r+0xc6>
 8006ba0:	2a0b      	cmp	r2, #11
 8006ba2:	d916      	bls.n	8006bd2 <_malloc_r+0xba>
 8006ba4:	1961      	adds	r1, r4, r5
 8006ba6:	42a3      	cmp	r3, r4
 8006ba8:	6025      	str	r5, [r4, #0]
 8006baa:	bf18      	it	ne
 8006bac:	6059      	strne	r1, [r3, #4]
 8006bae:	6863      	ldr	r3, [r4, #4]
 8006bb0:	bf08      	it	eq
 8006bb2:	6031      	streq	r1, [r6, #0]
 8006bb4:	5162      	str	r2, [r4, r5]
 8006bb6:	604b      	str	r3, [r1, #4]
 8006bb8:	4638      	mov	r0, r7
 8006bba:	f104 060b 	add.w	r6, r4, #11
 8006bbe:	f000 f865 	bl	8006c8c <__malloc_unlock>
 8006bc2:	f026 0607 	bic.w	r6, r6, #7
 8006bc6:	1d23      	adds	r3, r4, #4
 8006bc8:	1af2      	subs	r2, r6, r3
 8006bca:	d0b6      	beq.n	8006b3a <_malloc_r+0x22>
 8006bcc:	1b9b      	subs	r3, r3, r6
 8006bce:	50a3      	str	r3, [r4, r2]
 8006bd0:	e7b3      	b.n	8006b3a <_malloc_r+0x22>
 8006bd2:	6862      	ldr	r2, [r4, #4]
 8006bd4:	42a3      	cmp	r3, r4
 8006bd6:	bf0c      	ite	eq
 8006bd8:	6032      	streq	r2, [r6, #0]
 8006bda:	605a      	strne	r2, [r3, #4]
 8006bdc:	e7ec      	b.n	8006bb8 <_malloc_r+0xa0>
 8006bde:	4623      	mov	r3, r4
 8006be0:	6864      	ldr	r4, [r4, #4]
 8006be2:	e7b2      	b.n	8006b4a <_malloc_r+0x32>
 8006be4:	4634      	mov	r4, r6
 8006be6:	6876      	ldr	r6, [r6, #4]
 8006be8:	e7b9      	b.n	8006b5e <_malloc_r+0x46>
 8006bea:	230c      	movs	r3, #12
 8006bec:	603b      	str	r3, [r7, #0]
 8006bee:	4638      	mov	r0, r7
 8006bf0:	f000 f84c 	bl	8006c8c <__malloc_unlock>
 8006bf4:	e7a1      	b.n	8006b3a <_malloc_r+0x22>
 8006bf6:	6025      	str	r5, [r4, #0]
 8006bf8:	e7de      	b.n	8006bb8 <_malloc_r+0xa0>
 8006bfa:	bf00      	nop
 8006bfc:	20000dec 	.word	0x20000dec

08006c00 <_realloc_r>:
 8006c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c04:	4680      	mov	r8, r0
 8006c06:	4614      	mov	r4, r2
 8006c08:	460e      	mov	r6, r1
 8006c0a:	b921      	cbnz	r1, 8006c16 <_realloc_r+0x16>
 8006c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c10:	4611      	mov	r1, r2
 8006c12:	f7ff bf81 	b.w	8006b18 <_malloc_r>
 8006c16:	b92a      	cbnz	r2, 8006c24 <_realloc_r+0x24>
 8006c18:	f000 f83e 	bl	8006c98 <_free_r>
 8006c1c:	4625      	mov	r5, r4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c24:	f000 f884 	bl	8006d30 <_malloc_usable_size_r>
 8006c28:	4284      	cmp	r4, r0
 8006c2a:	4607      	mov	r7, r0
 8006c2c:	d802      	bhi.n	8006c34 <_realloc_r+0x34>
 8006c2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c32:	d812      	bhi.n	8006c5a <_realloc_r+0x5a>
 8006c34:	4621      	mov	r1, r4
 8006c36:	4640      	mov	r0, r8
 8006c38:	f7ff ff6e 	bl	8006b18 <_malloc_r>
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d0ed      	beq.n	8006c1e <_realloc_r+0x1e>
 8006c42:	42bc      	cmp	r4, r7
 8006c44:	4622      	mov	r2, r4
 8006c46:	4631      	mov	r1, r6
 8006c48:	bf28      	it	cs
 8006c4a:	463a      	movcs	r2, r7
 8006c4c:	f7ff fee2 	bl	8006a14 <memcpy>
 8006c50:	4631      	mov	r1, r6
 8006c52:	4640      	mov	r0, r8
 8006c54:	f000 f820 	bl	8006c98 <_free_r>
 8006c58:	e7e1      	b.n	8006c1e <_realloc_r+0x1e>
 8006c5a:	4635      	mov	r5, r6
 8006c5c:	e7df      	b.n	8006c1e <_realloc_r+0x1e>
	...

08006c60 <_sbrk_r>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	4d06      	ldr	r5, [pc, #24]	; (8006c7c <_sbrk_r+0x1c>)
 8006c64:	2300      	movs	r3, #0
 8006c66:	4604      	mov	r4, r0
 8006c68:	4608      	mov	r0, r1
 8006c6a:	602b      	str	r3, [r5, #0]
 8006c6c:	f7fc f97c 	bl	8002f68 <_sbrk>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_sbrk_r+0x1a>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_sbrk_r+0x1a>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	20000df4 	.word	0x20000df4

08006c80 <__malloc_lock>:
 8006c80:	4801      	ldr	r0, [pc, #4]	; (8006c88 <__malloc_lock+0x8>)
 8006c82:	f000 b85d 	b.w	8006d40 <__retarget_lock_acquire_recursive>
 8006c86:	bf00      	nop
 8006c88:	20000df8 	.word	0x20000df8

08006c8c <__malloc_unlock>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	; (8006c94 <__malloc_unlock+0x8>)
 8006c8e:	f000 b858 	b.w	8006d42 <__retarget_lock_release_recursive>
 8006c92:	bf00      	nop
 8006c94:	20000df8 	.word	0x20000df8

08006c98 <_free_r>:
 8006c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c9a:	2900      	cmp	r1, #0
 8006c9c:	d044      	beq.n	8006d28 <_free_r+0x90>
 8006c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ca2:	9001      	str	r0, [sp, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f1a1 0404 	sub.w	r4, r1, #4
 8006caa:	bfb8      	it	lt
 8006cac:	18e4      	addlt	r4, r4, r3
 8006cae:	f7ff ffe7 	bl	8006c80 <__malloc_lock>
 8006cb2:	4a1e      	ldr	r2, [pc, #120]	; (8006d2c <_free_r+0x94>)
 8006cb4:	9801      	ldr	r0, [sp, #4]
 8006cb6:	6813      	ldr	r3, [r2, #0]
 8006cb8:	b933      	cbnz	r3, 8006cc8 <_free_r+0x30>
 8006cba:	6063      	str	r3, [r4, #4]
 8006cbc:	6014      	str	r4, [r2, #0]
 8006cbe:	b003      	add	sp, #12
 8006cc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cc4:	f7ff bfe2 	b.w	8006c8c <__malloc_unlock>
 8006cc8:	42a3      	cmp	r3, r4
 8006cca:	d908      	bls.n	8006cde <_free_r+0x46>
 8006ccc:	6825      	ldr	r5, [r4, #0]
 8006cce:	1961      	adds	r1, r4, r5
 8006cd0:	428b      	cmp	r3, r1
 8006cd2:	bf01      	itttt	eq
 8006cd4:	6819      	ldreq	r1, [r3, #0]
 8006cd6:	685b      	ldreq	r3, [r3, #4]
 8006cd8:	1949      	addeq	r1, r1, r5
 8006cda:	6021      	streq	r1, [r4, #0]
 8006cdc:	e7ed      	b.n	8006cba <_free_r+0x22>
 8006cde:	461a      	mov	r2, r3
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	b10b      	cbz	r3, 8006ce8 <_free_r+0x50>
 8006ce4:	42a3      	cmp	r3, r4
 8006ce6:	d9fa      	bls.n	8006cde <_free_r+0x46>
 8006ce8:	6811      	ldr	r1, [r2, #0]
 8006cea:	1855      	adds	r5, r2, r1
 8006cec:	42a5      	cmp	r5, r4
 8006cee:	d10b      	bne.n	8006d08 <_free_r+0x70>
 8006cf0:	6824      	ldr	r4, [r4, #0]
 8006cf2:	4421      	add	r1, r4
 8006cf4:	1854      	adds	r4, r2, r1
 8006cf6:	42a3      	cmp	r3, r4
 8006cf8:	6011      	str	r1, [r2, #0]
 8006cfa:	d1e0      	bne.n	8006cbe <_free_r+0x26>
 8006cfc:	681c      	ldr	r4, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	6053      	str	r3, [r2, #4]
 8006d02:	4421      	add	r1, r4
 8006d04:	6011      	str	r1, [r2, #0]
 8006d06:	e7da      	b.n	8006cbe <_free_r+0x26>
 8006d08:	d902      	bls.n	8006d10 <_free_r+0x78>
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	6003      	str	r3, [r0, #0]
 8006d0e:	e7d6      	b.n	8006cbe <_free_r+0x26>
 8006d10:	6825      	ldr	r5, [r4, #0]
 8006d12:	1961      	adds	r1, r4, r5
 8006d14:	428b      	cmp	r3, r1
 8006d16:	bf04      	itt	eq
 8006d18:	6819      	ldreq	r1, [r3, #0]
 8006d1a:	685b      	ldreq	r3, [r3, #4]
 8006d1c:	6063      	str	r3, [r4, #4]
 8006d1e:	bf04      	itt	eq
 8006d20:	1949      	addeq	r1, r1, r5
 8006d22:	6021      	streq	r1, [r4, #0]
 8006d24:	6054      	str	r4, [r2, #4]
 8006d26:	e7ca      	b.n	8006cbe <_free_r+0x26>
 8006d28:	b003      	add	sp, #12
 8006d2a:	bd30      	pop	{r4, r5, pc}
 8006d2c:	20000dec 	.word	0x20000dec

08006d30 <_malloc_usable_size_r>:
 8006d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d34:	1f18      	subs	r0, r3, #4
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bfbc      	itt	lt
 8006d3a:	580b      	ldrlt	r3, [r1, r0]
 8006d3c:	18c0      	addlt	r0, r0, r3
 8006d3e:	4770      	bx	lr

08006d40 <__retarget_lock_acquire_recursive>:
 8006d40:	4770      	bx	lr

08006d42 <__retarget_lock_release_recursive>:
 8006d42:	4770      	bx	lr

08006d44 <_init>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	bf00      	nop
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr

08006d50 <_fini>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr
