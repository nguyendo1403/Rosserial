
0809_RTU_ROS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003764  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080038ec  080038ec  000138ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800390c  0800390c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800390c  0800390c  0001390c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003914  08003914  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800391c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001b8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001c4  200001c4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e8a4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fb5  00000000  00000000  0002e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  00030898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c28  00000000  00000000  00031578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001c57  00000000  00000000  000321a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb97  00000000  00000000  00033df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc055  00000000  00000000  0004298e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010e9e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035c0  00000000  00000000  0010ea34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038d4 	.word	0x080038d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080038d4 	.word	0x080038d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_TIM_PeriodElapsedCallback>:
{
	HAL_TIM_Base_Stop_IT(tim);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004dc:	d110      	bne.n	8000500 <HAL_TIM_PeriodElapsedCallback+0x34>
	{

		    HAL_IncTick();
 80004de:	f000 fbc7 	bl	8000c70 <HAL_IncTick>

		if((++counter) >= timeout)
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	3301      	adds	r3, #1
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80004ee:	4619      	mov	r1, r3
 80004f0:	8011      	strh	r1, [r2, #0]
 80004f2:	4a06      	ldr	r2, [pc, #24]	; (800050c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80004f4:	8812      	ldrh	r2, [r2, #0]
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d302      	bcc.n	8000500 <HAL_TIM_PeriodElapsedCallback+0x34>
			pxMBMasterPortCBTimerExpired();
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4798      	blx	r3
	}
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	2000002e 	.word	0x2000002e
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000028 	.word	0x20000028

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb58 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f80c 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f93c 	bl	800079c <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f912 	bl	800074c <MX_DMA_Init>
  MX_TIM2_Init();
 8000528:	f000 f870 	bl	800060c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800052c:	f000 f8ba 	bl	80006a4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000530:	f000 f8e2 	bl	80006f8 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x20>
	...

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f003 f9bc 	bl	80038c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b28      	ldr	r3, [pc, #160]	; (8000604 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a27      	ldr	r2, [pc, #156]	; (8000604 <SystemClock_Config+0xcc>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a21      	ldr	r2, [pc, #132]	; (8000608 <SystemClock_Config+0xd0>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005ac:	23a8      	movs	r3, #168	; 0xa8
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 f9a1 	bl	8001904 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c8:	f000 f91e 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2105      	movs	r1, #5
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fc02 	bl	8001df4 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005f6:	f000 f907 	bl	8000808 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3750      	adds	r7, #80	; 0x50
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_TIM2_Init+0x94>)
 800062a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800062e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_TIM2_Init+0x94>)
 8000632:	2253      	movs	r2, #83	; 0x53
 8000634:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_TIM2_Init+0x94>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_TIM2_Init+0x94>)
 800063e:	2231      	movs	r2, #49	; 0x31
 8000640:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_TIM2_Init+0x94>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_TIM2_Init+0x94>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800064e:	4814      	ldr	r0, [pc, #80]	; (80006a0 <MX_TIM2_Init+0x94>)
 8000650:	f001 fdf0 	bl	8002234 <HAL_TIM_Base_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800065a:	f000 f8d5 	bl	8000808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	4619      	mov	r1, r3
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_TIM2_Init+0x94>)
 800066c:	f001 ff39 	bl	80024e2 <HAL_TIM_ConfigClockSource>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000676:	f000 f8c7 	bl	8000808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067a:	2300      	movs	r3, #0
 800067c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	4619      	mov	r1, r3
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <MX_TIM2_Init+0x94>)
 8000688:	f002 f954 	bl	8002934 <HAL_TIMEx_MasterConfigSynchronization>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000692:	f000 f8b9 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000030 	.word	0x20000030

080006a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_USART1_UART_Init+0x50>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_USART1_UART_Init+0x4c>)
 80006dc:	f002 f9ba 	bl	8002a54 <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006e6:	f000 f88f 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000078 	.word	0x20000078
 80006f4:	40011000 	.word	0x40011000

080006f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART3_UART_Init+0x4c>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_USART3_UART_Init+0x50>)
 8000700:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_USART3_UART_Init+0x4c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART3_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART3_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART3_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART3_UART_Init+0x4c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART3_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART3_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART3_UART_Init+0x4c>)
 8000730:	f002 f990 	bl	8002a54 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800073a:	f000 f865 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000bc 	.word	0x200000bc
 8000748:	40004800 	.word	0x40004800

0800074c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_DMA_Init+0x4c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <MX_DMA_Init+0x4c>)
 800075c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_DMA_Init+0x4c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	203a      	movs	r0, #58	; 0x3a
 8000774:	f000 fb77 	bl	8000e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000778:	203a      	movs	r0, #58	; 0x3a
 800077a:	f000 fb90 	bl	8000e9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	2046      	movs	r0, #70	; 0x46
 8000784:	f000 fb6f 	bl	8000e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000788:	2046      	movs	r0, #70	; 0x46
 800078a:	f000 fb88 	bl	8000e9e <HAL_NVIC_EnableIRQ>

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_GPIO_Init+0x68>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <MX_GPIO_Init+0x68>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_GPIO_Init+0x68>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_GPIO_Init+0x68>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <MX_GPIO_Init+0x68>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_GPIO_Init+0x68>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_GPIO_Init+0x68>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <MX_GPIO_Init+0x68>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_GPIO_Init+0x68>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_MspInit+0x4c>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <HAL_MspInit+0x4c>)
 8000824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000828:	6453      	str	r3, [r2, #68]	; 0x44
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <HAL_MspInit+0x4c>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_MspInit+0x4c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_MspInit+0x4c>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_MspInit+0x4c>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000874:	d115      	bne.n	80008a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_TIM_Base_MspInit+0x48>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <HAL_TIM_Base_MspInit+0x48>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_TIM_Base_MspInit+0x48>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	201c      	movs	r0, #28
 8000898:	f000 fae5 	bl	8000e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800089c:	201c      	movs	r0, #28
 800089e:	f000 fafe 	bl	8000e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	; 0x30
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a6a      	ldr	r2, [pc, #424]	; (8000a78 <HAL_UART_MspInit+0x1c8>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	f040 8094 	bne.w	80009fc <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	4b68      	ldr	r3, [pc, #416]	; (8000a7c <HAL_UART_MspInit+0x1cc>)
 80008da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008dc:	4a67      	ldr	r2, [pc, #412]	; (8000a7c <HAL_UART_MspInit+0x1cc>)
 80008de:	f043 0310 	orr.w	r3, r3, #16
 80008e2:	6453      	str	r3, [r2, #68]	; 0x44
 80008e4:	4b65      	ldr	r3, [pc, #404]	; (8000a7c <HAL_UART_MspInit+0x1cc>)
 80008e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e8:	f003 0310 	and.w	r3, r3, #16
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	4b61      	ldr	r3, [pc, #388]	; (8000a7c <HAL_UART_MspInit+0x1cc>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	4a60      	ldr	r2, [pc, #384]	; (8000a7c <HAL_UART_MspInit+0x1cc>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000900:	4b5e      	ldr	r3, [pc, #376]	; (8000a7c <HAL_UART_MspInit+0x1cc>)
 8000902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800090c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800091e:	2307      	movs	r3, #7
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4855      	ldr	r0, [pc, #340]	; (8000a80 <HAL_UART_MspInit+0x1d0>)
 800092a:	f000 fe4f 	bl	80015cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800092e:	4b55      	ldr	r3, [pc, #340]	; (8000a84 <HAL_UART_MspInit+0x1d4>)
 8000930:	4a55      	ldr	r2, [pc, #340]	; (8000a88 <HAL_UART_MspInit+0x1d8>)
 8000932:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000934:	4b53      	ldr	r3, [pc, #332]	; (8000a84 <HAL_UART_MspInit+0x1d4>)
 8000936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800093c:	4b51      	ldr	r3, [pc, #324]	; (8000a84 <HAL_UART_MspInit+0x1d4>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000942:	4b50      	ldr	r3, [pc, #320]	; (8000a84 <HAL_UART_MspInit+0x1d4>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000948:	4b4e      	ldr	r3, [pc, #312]	; (8000a84 <HAL_UART_MspInit+0x1d4>)
 800094a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800094e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000950:	4b4c      	ldr	r3, [pc, #304]	; (8000a84 <HAL_UART_MspInit+0x1d4>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000956:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <HAL_UART_MspInit+0x1d4>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800095c:	4b49      	ldr	r3, [pc, #292]	; (8000a84 <HAL_UART_MspInit+0x1d4>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000962:	4b48      	ldr	r3, [pc, #288]	; (8000a84 <HAL_UART_MspInit+0x1d4>)
 8000964:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000968:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096a:	4b46      	ldr	r3, [pc, #280]	; (8000a84 <HAL_UART_MspInit+0x1d4>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000970:	4844      	ldr	r0, [pc, #272]	; (8000a84 <HAL_UART_MspInit+0x1d4>)
 8000972:	f000 faaf 	bl	8000ed4 <HAL_DMA_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800097c:	f7ff ff44 	bl	8000808 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a40      	ldr	r2, [pc, #256]	; (8000a84 <HAL_UART_MspInit+0x1d4>)
 8000984:	639a      	str	r2, [r3, #56]	; 0x38
 8000986:	4a3f      	ldr	r2, [pc, #252]	; (8000a84 <HAL_UART_MspInit+0x1d4>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800098c:	4b3f      	ldr	r3, [pc, #252]	; (8000a8c <HAL_UART_MspInit+0x1dc>)
 800098e:	4a40      	ldr	r2, [pc, #256]	; (8000a90 <HAL_UART_MspInit+0x1e0>)
 8000990:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000992:	4b3e      	ldr	r3, [pc, #248]	; (8000a8c <HAL_UART_MspInit+0x1dc>)
 8000994:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000998:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800099a:	4b3c      	ldr	r3, [pc, #240]	; (8000a8c <HAL_UART_MspInit+0x1dc>)
 800099c:	2240      	movs	r2, #64	; 0x40
 800099e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a0:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <HAL_UART_MspInit+0x1dc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009a6:	4b39      	ldr	r3, [pc, #228]	; (8000a8c <HAL_UART_MspInit+0x1dc>)
 80009a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ae:	4b37      	ldr	r3, [pc, #220]	; (8000a8c <HAL_UART_MspInit+0x1dc>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009b4:	4b35      	ldr	r3, [pc, #212]	; (8000a8c <HAL_UART_MspInit+0x1dc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80009ba:	4b34      	ldr	r3, [pc, #208]	; (8000a8c <HAL_UART_MspInit+0x1dc>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80009c0:	4b32      	ldr	r3, [pc, #200]	; (8000a8c <HAL_UART_MspInit+0x1dc>)
 80009c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009c6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009c8:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <HAL_UART_MspInit+0x1dc>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80009ce:	482f      	ldr	r0, [pc, #188]	; (8000a8c <HAL_UART_MspInit+0x1dc>)
 80009d0:	f000 fa80 	bl	8000ed4 <HAL_DMA_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80009da:	f7ff ff15 	bl	8000808 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a2a      	ldr	r2, [pc, #168]	; (8000a8c <HAL_UART_MspInit+0x1dc>)
 80009e2:	635a      	str	r2, [r3, #52]	; 0x34
 80009e4:	4a29      	ldr	r2, [pc, #164]	; (8000a8c <HAL_UART_MspInit+0x1dc>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2025      	movs	r0, #37	; 0x25
 80009f0:	f000 fa39 	bl	8000e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009f4:	2025      	movs	r0, #37	; 0x25
 80009f6:	f000 fa52 	bl	8000e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009fa:	e039      	b.n	8000a70 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART3)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a24      	ldr	r2, [pc, #144]	; (8000a94 <HAL_UART_MspInit+0x1e4>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d134      	bne.n	8000a70 <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_UART_MspInit+0x1cc>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <HAL_UART_MspInit+0x1cc>)
 8000a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <HAL_UART_MspInit+0x1cc>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_UART_MspInit+0x1cc>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <HAL_UART_MspInit+0x1cc>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_UART_MspInit+0x1cc>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a50:	2307      	movs	r3, #7
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480f      	ldr	r0, [pc, #60]	; (8000a98 <HAL_UART_MspInit+0x1e8>)
 8000a5c:	f000 fdb6 	bl	80015cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2027      	movs	r0, #39	; 0x27
 8000a66:	f000 f9fe 	bl	8000e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a6a:	2027      	movs	r0, #39	; 0x27
 8000a6c:	f000 fa17 	bl	8000e9e <HAL_NVIC_EnableIRQ>
}
 8000a70:	bf00      	nop
 8000a72:	3730      	adds	r7, #48	; 0x30
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40011000 	.word	0x40011000
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020000 	.word	0x40020000
 8000a84:	20000100 	.word	0x20000100
 8000a88:	40026440 	.word	0x40026440
 8000a8c:	20000160 	.word	0x20000160
 8000a90:	400264b8 	.word	0x400264b8
 8000a94:	40004800 	.word	0x40004800
 8000a98:	40020800 	.word	0x40020800

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 f8c2 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <TIM2_IRQHandler+0x10>)
 8000af6:	f001 fbec 	bl	80022d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000030 	.word	0x20000030

08000b04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <USART1_IRQHandler+0x10>)
 8000b0a:	f001 fff1 	bl	8002af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000078 	.word	0x20000078

08000b18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <USART3_IRQHandler+0x10>)
 8000b1e:	f001 ffe7 	bl	8002af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000bc 	.word	0x200000bc

08000b2c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <DMA2_Stream2_IRQHandler+0x10>)
 8000b32:	f000 fb0f 	bl	8001154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000100 	.word	0x20000100

08000b40 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <DMA2_Stream7_IRQHandler+0x10>)
 8000b46:	f000 fb05 	bl	8001154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000160 	.word	0x20000160

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b7e:	490e      	ldr	r1, [pc, #56]	; (8000bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b94:	4c0b      	ldr	r4, [pc, #44]	; (8000bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ba2:	f7ff ffd7 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f002 fe69 	bl	800387c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fcb3 	bl	8000514 <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bbc:	0800391c 	.word	0x0800391c
  ldr r2, =_sbss
 8000bc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc4:	200001c4 	.word	0x200001c4

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <HAL_Init+0x40>)
 8000bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_Init+0x40>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_Init+0x40>)
 8000bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f92b 	bl	8000e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	200f      	movs	r0, #15
 8000bfc:	f000 f808 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fe08 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023c00 	.word	0x40023c00

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x54>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x58>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f943 	bl	8000eba <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00e      	b.n	8000c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d80a      	bhi.n	8000c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f90b 	bl	8000e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c50:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <HAL_InitTick+0x5c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000004 	.word	0x20000004

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	200001c0 	.word	0x200001c0

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200001c0 	.word	0x200001c0

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0b      	blt.n	8000d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <__NVIC_EnableIRQ+0x38>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	; (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	; 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e1c:	d301      	bcc.n	8000e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00f      	b.n	8000e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <SysTick_Config+0x40>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f7ff ff8e 	bl	8000d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SysTick_Config+0x40>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <SysTick_Config+0x40>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff29 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e78:	f7ff ff3e 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	6978      	ldr	r0, [r7, #20]
 8000e84:	f7ff ff8e 	bl	8000da4 <NVIC_EncodePriority>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff5d 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff31 	bl	8000d14 <__NVIC_EnableIRQ>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ffa2 	bl	8000e0c <SysTick_Config>
 8000ec8:	4603      	mov	r3, r0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff feda 	bl	8000c98 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e099      	b.n	8001024 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0201 	bic.w	r2, r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f10:	e00f      	b.n	8000f32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f12:	f7ff fec1 	bl	8000c98 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b05      	cmp	r3, #5
 8000f1e:	d908      	bls.n	8000f32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2220      	movs	r2, #32
 8000f24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e078      	b.n	8001024 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1e8      	bne.n	8000f12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	4b38      	ldr	r3, [pc, #224]	; (800102c <HAL_DMA_Init+0x158>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d107      	bne.n	8000f9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	4313      	orrs	r3, r2
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f023 0307 	bic.w	r3, r3, #7
 8000fb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d117      	bne.n	8000ff6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00e      	beq.n	8000ff6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 fa7b 	bl	80014d4 <DMA_CheckFifoParam>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d008      	beq.n	8000ff6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2240      	movs	r2, #64	; 0x40
 8000fe8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e016      	b.n	8001024 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 fa32 	bl	8001468 <DMA_CalcBaseAndBitshift>
 8001004:	4603      	mov	r3, r0
 8001006:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800100c:	223f      	movs	r2, #63	; 0x3f
 800100e:	409a      	lsls	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	f010803f 	.word	0xf010803f

08001030 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800103e:	f7ff fe2b 	bl	8000c98 <HAL_GetTick>
 8001042:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d008      	beq.n	8001062 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e052      	b.n	8001108 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0216 	bic.w	r2, r2, #22
 8001070:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	695a      	ldr	r2, [r3, #20]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001080:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	2b00      	cmp	r3, #0
 8001088:	d103      	bne.n	8001092 <HAL_DMA_Abort+0x62>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108e:	2b00      	cmp	r3, #0
 8001090:	d007      	beq.n	80010a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 0208 	bic.w	r2, r2, #8
 80010a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0201 	bic.w	r2, r2, #1
 80010b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b2:	e013      	b.n	80010dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010b4:	f7ff fdf0 	bl	8000c98 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b05      	cmp	r3, #5
 80010c0:	d90c      	bls.n	80010dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2220      	movs	r2, #32
 80010c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2203      	movs	r2, #3
 80010cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e015      	b.n	8001108 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1e4      	bne.n	80010b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ee:	223f      	movs	r2, #63	; 0x3f
 80010f0:	409a      	lsls	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d004      	beq.n	800112e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00c      	b.n	8001148 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2205      	movs	r2, #5
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0201 	bic.w	r2, r2, #1
 8001144:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001160:	4b8e      	ldr	r3, [pc, #568]	; (800139c <HAL_DMA_IRQHandler+0x248>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a8e      	ldr	r2, [pc, #568]	; (80013a0 <HAL_DMA_IRQHandler+0x24c>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	0a9b      	lsrs	r3, r3, #10
 800116c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117e:	2208      	movs	r2, #8
 8001180:	409a      	lsls	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4013      	ands	r3, r2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d01a      	beq.n	80011c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d013      	beq.n	80011c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0204 	bic.w	r2, r2, #4
 80011a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ac:	2208      	movs	r2, #8
 80011ae:	409a      	lsls	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b8:	f043 0201 	orr.w	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c4:	2201      	movs	r2, #1
 80011c6:	409a      	lsls	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d012      	beq.n	80011f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e2:	2201      	movs	r2, #1
 80011e4:	409a      	lsls	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ee:	f043 0202 	orr.w	r2, r3, #2
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fa:	2204      	movs	r2, #4
 80011fc:	409a      	lsls	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4013      	ands	r3, r2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d012      	beq.n	800122c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00b      	beq.n	800122c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001218:	2204      	movs	r2, #4
 800121a:	409a      	lsls	r2, r3
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001224:	f043 0204 	orr.w	r2, r3, #4
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001230:	2210      	movs	r2, #16
 8001232:	409a      	lsls	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d043      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d03c      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124e:	2210      	movs	r2, #16
 8001250:	409a      	lsls	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d018      	beq.n	8001296 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d108      	bne.n	8001284 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	2b00      	cmp	r3, #0
 8001278:	d024      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	4798      	blx	r3
 8001282:	e01f      	b.n	80012c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001288:	2b00      	cmp	r3, #0
 800128a:	d01b      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	4798      	blx	r3
 8001294:	e016      	b.n	80012c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d107      	bne.n	80012b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0208 	bic.w	r2, r2, #8
 80012b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c8:	2220      	movs	r2, #32
 80012ca:	409a      	lsls	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 808f 	beq.w	80013f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 8087 	beq.w	80013f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ea:	2220      	movs	r2, #32
 80012ec:	409a      	lsls	r2, r3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b05      	cmp	r3, #5
 80012fc:	d136      	bne.n	800136c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0216 	bic.w	r2, r2, #22
 800130c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	695a      	ldr	r2, [r3, #20]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800131c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	2b00      	cmp	r3, #0
 8001324:	d103      	bne.n	800132e <HAL_DMA_IRQHandler+0x1da>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132a:	2b00      	cmp	r3, #0
 800132c:	d007      	beq.n	800133e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0208 	bic.w	r2, r2, #8
 800133c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001342:	223f      	movs	r2, #63	; 0x3f
 8001344:	409a      	lsls	r2, r3
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800135e:	2b00      	cmp	r3, #0
 8001360:	d07e      	beq.n	8001460 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	4798      	blx	r3
        }
        return;
 800136a:	e079      	b.n	8001460 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d01d      	beq.n	80013b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10d      	bne.n	80013a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	2b00      	cmp	r3, #0
 800138e:	d031      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	4798      	blx	r3
 8001398:	e02c      	b.n	80013f4 <HAL_DMA_IRQHandler+0x2a0>
 800139a:	bf00      	nop
 800139c:	20000000 	.word	0x20000000
 80013a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d023      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	4798      	blx	r3
 80013b4:	e01e      	b.n	80013f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10f      	bne.n	80013e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0210 	bic.w	r2, r2, #16
 80013d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d032      	beq.n	8001462 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d022      	beq.n	800144e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2205      	movs	r2, #5
 800140c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0201 	bic.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	3301      	adds	r3, #1
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	429a      	cmp	r2, r3
 800142a:	d307      	bcc.n	800143c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f2      	bne.n	8001420 <HAL_DMA_IRQHandler+0x2cc>
 800143a:	e000      	b.n	800143e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800143c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	4798      	blx	r3
 800145e:	e000      	b.n	8001462 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001460:	bf00      	nop
    }
  }
}
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	3b10      	subs	r3, #16
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <DMA_CalcBaseAndBitshift+0x64>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001482:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <DMA_CalcBaseAndBitshift+0x68>)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d909      	bls.n	80014aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800149e:	f023 0303 	bic.w	r3, r3, #3
 80014a2:	1d1a      	adds	r2, r3, #4
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	659a      	str	r2, [r3, #88]	; 0x58
 80014a8:	e007      	b.n	80014ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014b2:	f023 0303 	bic.w	r3, r3, #3
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	aaaaaaab 	.word	0xaaaaaaab
 80014d0:	08003904 	.word	0x08003904

080014d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d11f      	bne.n	800152e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d856      	bhi.n	80015a2 <DMA_CheckFifoParam+0xce>
 80014f4:	a201      	add	r2, pc, #4	; (adr r2, 80014fc <DMA_CheckFifoParam+0x28>)
 80014f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fa:	bf00      	nop
 80014fc:	0800150d 	.word	0x0800150d
 8001500:	0800151f 	.word	0x0800151f
 8001504:	0800150d 	.word	0x0800150d
 8001508:	080015a3 	.word	0x080015a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d046      	beq.n	80015a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800151c:	e043      	b.n	80015a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001526:	d140      	bne.n	80015aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800152c:	e03d      	b.n	80015aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001536:	d121      	bne.n	800157c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b03      	cmp	r3, #3
 800153c:	d837      	bhi.n	80015ae <DMA_CheckFifoParam+0xda>
 800153e:	a201      	add	r2, pc, #4	; (adr r2, 8001544 <DMA_CheckFifoParam+0x70>)
 8001540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001544:	08001555 	.word	0x08001555
 8001548:	0800155b 	.word	0x0800155b
 800154c:	08001555 	.word	0x08001555
 8001550:	0800156d 	.word	0x0800156d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
      break;
 8001558:	e030      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d025      	beq.n	80015b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800156a:	e022      	b.n	80015b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001574:	d11f      	bne.n	80015b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800157a:	e01c      	b.n	80015b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d903      	bls.n	800158a <DMA_CheckFifoParam+0xb6>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d003      	beq.n	8001590 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001588:	e018      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
      break;
 800158e:	e015      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00e      	beq.n	80015ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
      break;
 80015a0:	e00b      	b.n	80015ba <DMA_CheckFifoParam+0xe6>
      break;
 80015a2:	bf00      	nop
 80015a4:	e00a      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;
 80015a6:	bf00      	nop
 80015a8:	e008      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;
 80015aa:	bf00      	nop
 80015ac:	e006      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;
 80015ae:	bf00      	nop
 80015b0:	e004      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;
 80015b2:	bf00      	nop
 80015b4:	e002      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;   
 80015b6:	bf00      	nop
 80015b8:	e000      	b.n	80015bc <DMA_CheckFifoParam+0xe8>
      break;
 80015ba:	bf00      	nop
    }
  } 
  
  return status; 
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop

080015cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	e16b      	b.n	80018c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e8:	2201      	movs	r2, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	429a      	cmp	r2, r3
 8001602:	f040 815a 	bne.w	80018ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b01      	cmp	r3, #1
 8001610:	d005      	beq.n	800161e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800161a:	2b02      	cmp	r3, #2
 800161c:	d130      	bne.n	8001680 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	2203      	movs	r2, #3
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001654:	2201      	movs	r2, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f003 0201 	and.w	r2, r3, #1
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b03      	cmp	r3, #3
 800168a:	d017      	beq.n	80016bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d123      	bne.n	8001710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3208      	adds	r2, #8
 80016d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	08da      	lsrs	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3208      	adds	r2, #8
 800170a:	69b9      	ldr	r1, [r7, #24]
 800170c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0203 	and.w	r2, r3, #3
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80b4 	beq.w	80018ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b60      	ldr	r3, [pc, #384]	; (80018d8 <HAL_GPIO_Init+0x30c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a5f      	ldr	r2, [pc, #380]	; (80018d8 <HAL_GPIO_Init+0x30c>)
 800175c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b5d      	ldr	r3, [pc, #372]	; (80018d8 <HAL_GPIO_Init+0x30c>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176e:	4a5b      	ldr	r2, [pc, #364]	; (80018dc <HAL_GPIO_Init+0x310>)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3302      	adds	r3, #2
 8001776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	220f      	movs	r2, #15
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <HAL_GPIO_Init+0x314>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d02b      	beq.n	80017f2 <HAL_GPIO_Init+0x226>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a51      	ldr	r2, [pc, #324]	; (80018e4 <HAL_GPIO_Init+0x318>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d025      	beq.n	80017ee <HAL_GPIO_Init+0x222>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a50      	ldr	r2, [pc, #320]	; (80018e8 <HAL_GPIO_Init+0x31c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d01f      	beq.n	80017ea <HAL_GPIO_Init+0x21e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4f      	ldr	r2, [pc, #316]	; (80018ec <HAL_GPIO_Init+0x320>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d019      	beq.n	80017e6 <HAL_GPIO_Init+0x21a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4e      	ldr	r2, [pc, #312]	; (80018f0 <HAL_GPIO_Init+0x324>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_Init+0x216>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4d      	ldr	r2, [pc, #308]	; (80018f4 <HAL_GPIO_Init+0x328>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00d      	beq.n	80017de <HAL_GPIO_Init+0x212>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4c      	ldr	r2, [pc, #304]	; (80018f8 <HAL_GPIO_Init+0x32c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <HAL_GPIO_Init+0x20e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4b      	ldr	r2, [pc, #300]	; (80018fc <HAL_GPIO_Init+0x330>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_GPIO_Init+0x20a>
 80017d2:	2307      	movs	r3, #7
 80017d4:	e00e      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017d6:	2308      	movs	r3, #8
 80017d8:	e00c      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017da:	2306      	movs	r3, #6
 80017dc:	e00a      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017de:	2305      	movs	r3, #5
 80017e0:	e008      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017e2:	2304      	movs	r3, #4
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017e6:	2303      	movs	r3, #3
 80017e8:	e004      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e002      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <HAL_GPIO_Init+0x228>
 80017f2:	2300      	movs	r3, #0
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	f002 0203 	and.w	r2, r2, #3
 80017fa:	0092      	lsls	r2, r2, #2
 80017fc:	4093      	lsls	r3, r2
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001804:	4935      	ldr	r1, [pc, #212]	; (80018dc <HAL_GPIO_Init+0x310>)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	3302      	adds	r3, #2
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <HAL_GPIO_Init+0x334>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001836:	4a32      	ldr	r2, [pc, #200]	; (8001900 <HAL_GPIO_Init+0x334>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800183c:	4b30      	ldr	r3, [pc, #192]	; (8001900 <HAL_GPIO_Init+0x334>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001860:	4a27      	ldr	r2, [pc, #156]	; (8001900 <HAL_GPIO_Init+0x334>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_GPIO_Init+0x334>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800188a:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <HAL_GPIO_Init+0x334>)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_GPIO_Init+0x334>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018b4:	4a12      	ldr	r2, [pc, #72]	; (8001900 <HAL_GPIO_Init+0x334>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3301      	adds	r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	2b0f      	cmp	r3, #15
 80018c4:	f67f ae90 	bls.w	80015e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40013800 	.word	0x40013800
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020400 	.word	0x40020400
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40021400 	.word	0x40021400
 80018f8:	40021800 	.word	0x40021800
 80018fc:	40021c00 	.word	0x40021c00
 8001900:	40013c00 	.word	0x40013c00

08001904 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e267      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d075      	beq.n	8001a0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001922:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b04      	cmp	r3, #4
 800192c:	d00c      	beq.n	8001948 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800192e:	4b85      	ldr	r3, [pc, #532]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001936:	2b08      	cmp	r3, #8
 8001938:	d112      	bne.n	8001960 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193a:	4b82      	ldr	r3, [pc, #520]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001946:	d10b      	bne.n	8001960 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	4b7e      	ldr	r3, [pc, #504]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d05b      	beq.n	8001a0c <HAL_RCC_OscConfig+0x108>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d157      	bne.n	8001a0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e242      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001968:	d106      	bne.n	8001978 <HAL_RCC_OscConfig+0x74>
 800196a:	4b76      	ldr	r3, [pc, #472]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a75      	ldr	r2, [pc, #468]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e01d      	b.n	80019b4 <HAL_RCC_OscConfig+0xb0>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x98>
 8001982:	4b70      	ldr	r3, [pc, #448]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a6f      	ldr	r2, [pc, #444]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b6d      	ldr	r3, [pc, #436]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a6c      	ldr	r2, [pc, #432]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0xb0>
 800199c:	4b69      	ldr	r3, [pc, #420]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a68      	ldr	r2, [pc, #416]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b66      	ldr	r3, [pc, #408]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a65      	ldr	r2, [pc, #404]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff f96c 	bl	8000c98 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff f968 	bl	8000c98 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e207      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	4b5b      	ldr	r3, [pc, #364]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0xc0>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff f958 	bl	8000c98 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff f954 	bl	8000c98 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e1f3      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fe:	4b51      	ldr	r3, [pc, #324]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0xe8>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d063      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a1a:	4b4a      	ldr	r3, [pc, #296]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00b      	beq.n	8001a3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a26:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d11c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a32:	4b44      	ldr	r3, [pc, #272]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d116      	bne.n	8001a6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_RCC_OscConfig+0x152>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d001      	beq.n	8001a56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e1c7      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a56:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4937      	ldr	r1, [pc, #220]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6a:	e03a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d020      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a74:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_RCC_OscConfig+0x244>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff f90d 	bl	8000c98 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a82:	f7ff f909 	bl	8000c98 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e1a8      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a94:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4925      	ldr	r1, [pc, #148]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
 8001ab4:	e015      	b.n	8001ae2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_RCC_OscConfig+0x244>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff f8ec 	bl	8000c98 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac4:	f7ff f8e8 	bl	8000c98 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e187      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d036      	beq.n	8001b5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d016      	beq.n	8001b24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_RCC_OscConfig+0x248>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afc:	f7ff f8cc 	bl	8000c98 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b04:	f7ff f8c8 	bl	8000c98 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e167      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_RCC_OscConfig+0x240>)
 8001b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x200>
 8001b22:	e01b      	b.n	8001b5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_OscConfig+0x248>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff f8b5 	bl	8000c98 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b30:	e00e      	b.n	8001b50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b32:	f7ff f8b1 	bl	8000c98 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d907      	bls.n	8001b50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e150      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
 8001b44:	40023800 	.word	0x40023800
 8001b48:	42470000 	.word	0x42470000
 8001b4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b50:	4b88      	ldr	r3, [pc, #544]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1ea      	bne.n	8001b32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 8097 	beq.w	8001c98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6e:	4b81      	ldr	r3, [pc, #516]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10f      	bne.n	8001b9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	4b7d      	ldr	r3, [pc, #500]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	4a7c      	ldr	r2, [pc, #496]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8a:	4b7a      	ldr	r3, [pc, #488]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b96:	2301      	movs	r3, #1
 8001b98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9a:	4b77      	ldr	r3, [pc, #476]	; (8001d78 <HAL_RCC_OscConfig+0x474>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d118      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba6:	4b74      	ldr	r3, [pc, #464]	; (8001d78 <HAL_RCC_OscConfig+0x474>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a73      	ldr	r2, [pc, #460]	; (8001d78 <HAL_RCC_OscConfig+0x474>)
 8001bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff f871 	bl	8000c98 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bba:	f7ff f86d 	bl	8000c98 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e10c      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_OscConfig+0x474>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d106      	bne.n	8001bee <HAL_RCC_OscConfig+0x2ea>
 8001be0:	4b64      	ldr	r3, [pc, #400]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	4a63      	ldr	r2, [pc, #396]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6713      	str	r3, [r2, #112]	; 0x70
 8001bec:	e01c      	b.n	8001c28 <HAL_RCC_OscConfig+0x324>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b05      	cmp	r3, #5
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x30c>
 8001bf6:	4b5f      	ldr	r3, [pc, #380]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfa:	4a5e      	ldr	r2, [pc, #376]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	6713      	str	r3, [r2, #112]	; 0x70
 8001c02:	4b5c      	ldr	r3, [pc, #368]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c06:	4a5b      	ldr	r2, [pc, #364]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c0e:	e00b      	b.n	8001c28 <HAL_RCC_OscConfig+0x324>
 8001c10:	4b58      	ldr	r3, [pc, #352]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	4a57      	ldr	r2, [pc, #348]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001c16:	f023 0301 	bic.w	r3, r3, #1
 8001c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1c:	4b55      	ldr	r3, [pc, #340]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c20:	4a54      	ldr	r2, [pc, #336]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001c22:	f023 0304 	bic.w	r3, r3, #4
 8001c26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d015      	beq.n	8001c5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c30:	f7ff f832 	bl	8000c98 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c38:	f7ff f82e 	bl	8000c98 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e0cb      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4e:	4b49      	ldr	r3, [pc, #292]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0ee      	beq.n	8001c38 <HAL_RCC_OscConfig+0x334>
 8001c5a:	e014      	b.n	8001c86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5c:	f7ff f81c 	bl	8000c98 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c62:	e00a      	b.n	8001c7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c64:	f7ff f818 	bl	8000c98 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e0b5      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7a:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1ee      	bne.n	8001c64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c86:	7dfb      	ldrb	r3, [r7, #23]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d105      	bne.n	8001c98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c8c:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	4a38      	ldr	r2, [pc, #224]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 80a1 	beq.w	8001de4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ca2:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d05c      	beq.n	8001d68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d141      	bne.n	8001d3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb6:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <HAL_RCC_OscConfig+0x478>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7fe ffec 	bl	8000c98 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7fe ffe8 	bl	8000c98 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e087      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd6:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69da      	ldr	r2, [r3, #28]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	019b      	lsls	r3, r3, #6
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	041b      	lsls	r3, r3, #16
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	061b      	lsls	r3, r3, #24
 8001d06:	491b      	ldr	r1, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <HAL_RCC_OscConfig+0x478>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7fe ffc1 	bl	8000c98 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7fe ffbd 	bl	8000c98 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e05c      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x416>
 8001d38:	e054      	b.n	8001de4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_RCC_OscConfig+0x478>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7fe ffaa 	bl	8000c98 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d48:	f7fe ffa6 	bl	8000c98 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e045      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x444>
 8001d66:	e03d      	b.n	8001de4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e038      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <HAL_RCC_OscConfig+0x4ec>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d028      	beq.n	8001de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d121      	bne.n	8001de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d11a      	bne.n	8001de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001db0:	4013      	ands	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001db6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d111      	bne.n	8001de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	085b      	lsrs	r3, r3, #1
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d107      	bne.n	8001de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800

08001df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0cc      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e08:	4b68      	ldr	r3, [pc, #416]	; (8001fac <HAL_RCC_ClockConfig+0x1b8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d90c      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b65      	ldr	r3, [pc, #404]	; (8001fac <HAL_RCC_ClockConfig+0x1b8>)
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b63      	ldr	r3, [pc, #396]	; (8001fac <HAL_RCC_ClockConfig+0x1b8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0b8      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d020      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e48:	4b59      	ldr	r3, [pc, #356]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4a58      	ldr	r2, [pc, #352]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e60:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a52      	ldr	r2, [pc, #328]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6c:	4b50      	ldr	r3, [pc, #320]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	494d      	ldr	r1, [pc, #308]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d044      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d119      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e07f      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d003      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d107      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb2:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e06f      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec2:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e067      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed2:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f023 0203 	bic.w	r2, r3, #3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4934      	ldr	r1, [pc, #208]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee4:	f7fe fed8 	bl	8000c98 <HAL_GetTick>
 8001ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eec:	f7fe fed4 	bl	8000c98 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e04f      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 020c 	and.w	r2, r3, #12
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d1eb      	bne.n	8001eec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_RCC_ClockConfig+0x1b8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d20c      	bcs.n	8001f3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b22      	ldr	r3, [pc, #136]	; (8001fac <HAL_RCC_ClockConfig+0x1b8>)
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_RCC_ClockConfig+0x1b8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e032      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4916      	ldr	r1, [pc, #88]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f7a:	f000 f821 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	490a      	ldr	r1, [pc, #40]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	5ccb      	ldrb	r3, [r1, r3]
 8001f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fe38 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023c00 	.word	0x40023c00
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	080038ec 	.word	0x080038ec
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc4:	b094      	sub	sp, #80	; 0x50
 8001fc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	647b      	str	r3, [r7, #68]	; 0x44
 8001fcc:	2300      	movs	r3, #0
 8001fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fd8:	4b79      	ldr	r3, [pc, #484]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d00d      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0x40>
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	f200 80e1 	bhi.w	80021ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d003      	beq.n	8001ffa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ff2:	e0db      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ff4:	4b73      	ldr	r3, [pc, #460]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ff6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ff8:	e0db      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ffa:	4b73      	ldr	r3, [pc, #460]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ffc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ffe:	e0d8      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002000:	4b6f      	ldr	r3, [pc, #444]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002008:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800200a:	4b6d      	ldr	r3, [pc, #436]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d063      	beq.n	80020de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002016:	4b6a      	ldr	r3, [pc, #424]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	099b      	lsrs	r3, r3, #6
 800201c:	2200      	movs	r2, #0
 800201e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002020:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002028:	633b      	str	r3, [r7, #48]	; 0x30
 800202a:	2300      	movs	r3, #0
 800202c:	637b      	str	r3, [r7, #52]	; 0x34
 800202e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002032:	4622      	mov	r2, r4
 8002034:	462b      	mov	r3, r5
 8002036:	f04f 0000 	mov.w	r0, #0
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	0159      	lsls	r1, r3, #5
 8002040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002044:	0150      	lsls	r0, r2, #5
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4621      	mov	r1, r4
 800204c:	1a51      	subs	r1, r2, r1
 800204e:	6139      	str	r1, [r7, #16]
 8002050:	4629      	mov	r1, r5
 8002052:	eb63 0301 	sbc.w	r3, r3, r1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002064:	4659      	mov	r1, fp
 8002066:	018b      	lsls	r3, r1, #6
 8002068:	4651      	mov	r1, sl
 800206a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800206e:	4651      	mov	r1, sl
 8002070:	018a      	lsls	r2, r1, #6
 8002072:	4651      	mov	r1, sl
 8002074:	ebb2 0801 	subs.w	r8, r2, r1
 8002078:	4659      	mov	r1, fp
 800207a:	eb63 0901 	sbc.w	r9, r3, r1
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800208a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800208e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002092:	4690      	mov	r8, r2
 8002094:	4699      	mov	r9, r3
 8002096:	4623      	mov	r3, r4
 8002098:	eb18 0303 	adds.w	r3, r8, r3
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	462b      	mov	r3, r5
 80020a0:	eb49 0303 	adc.w	r3, r9, r3
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020b2:	4629      	mov	r1, r5
 80020b4:	024b      	lsls	r3, r1, #9
 80020b6:	4621      	mov	r1, r4
 80020b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020bc:	4621      	mov	r1, r4
 80020be:	024a      	lsls	r2, r1, #9
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c6:	2200      	movs	r2, #0
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020d0:	f7fe f87a 	bl	80001c8 <__aeabi_uldivmod>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4613      	mov	r3, r2
 80020da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020dc:	e058      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020de:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	099b      	lsrs	r3, r3, #6
 80020e4:	2200      	movs	r2, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	4611      	mov	r1, r2
 80020ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020ee:	623b      	str	r3, [r7, #32]
 80020f0:	2300      	movs	r3, #0
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
 80020f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020f8:	4642      	mov	r2, r8
 80020fa:	464b      	mov	r3, r9
 80020fc:	f04f 0000 	mov.w	r0, #0
 8002100:	f04f 0100 	mov.w	r1, #0
 8002104:	0159      	lsls	r1, r3, #5
 8002106:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800210a:	0150      	lsls	r0, r2, #5
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4641      	mov	r1, r8
 8002112:	ebb2 0a01 	subs.w	sl, r2, r1
 8002116:	4649      	mov	r1, r9
 8002118:	eb63 0b01 	sbc.w	fp, r3, r1
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002128:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800212c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002130:	ebb2 040a 	subs.w	r4, r2, sl
 8002134:	eb63 050b 	sbc.w	r5, r3, fp
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	00eb      	lsls	r3, r5, #3
 8002142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002146:	00e2      	lsls	r2, r4, #3
 8002148:	4614      	mov	r4, r2
 800214a:	461d      	mov	r5, r3
 800214c:	4643      	mov	r3, r8
 800214e:	18e3      	adds	r3, r4, r3
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	464b      	mov	r3, r9
 8002154:	eb45 0303 	adc.w	r3, r5, r3
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002166:	4629      	mov	r1, r5
 8002168:	028b      	lsls	r3, r1, #10
 800216a:	4621      	mov	r1, r4
 800216c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002170:	4621      	mov	r1, r4
 8002172:	028a      	lsls	r2, r1, #10
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800217a:	2200      	movs	r2, #0
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	61fa      	str	r2, [r7, #28]
 8002180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002184:	f7fe f820 	bl	80001c8 <__aeabi_uldivmod>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4613      	mov	r3, r2
 800218e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	0c1b      	lsrs	r3, r3, #16
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	3301      	adds	r3, #1
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80021a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021aa:	e002      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80021ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3750      	adds	r7, #80	; 0x50
 80021b8:	46bd      	mov	sp, r7
 80021ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	00f42400 	.word	0x00f42400
 80021c8:	007a1200 	.word	0x007a1200

080021cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000000 	.word	0x20000000

080021e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021e8:	f7ff fff0 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	0a9b      	lsrs	r3, r3, #10
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	4903      	ldr	r1, [pc, #12]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40023800 	.word	0x40023800
 8002208:	080038fc 	.word	0x080038fc

0800220c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002210:	f7ff ffdc 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 8002214:	4602      	mov	r2, r0
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	0b5b      	lsrs	r3, r3, #13
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	4903      	ldr	r1, [pc, #12]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002222:	5ccb      	ldrb	r3, [r1, r3]
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40023800 	.word	0x40023800
 8002230:	080038fc 	.word	0x080038fc

08002234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e041      	b.n	80022ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fb02 	bl	8000864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3304      	adds	r3, #4
 8002270:	4619      	mov	r1, r3
 8002272:	4610      	mov	r0, r2
 8002274:	f000 fa24 	bl	80026c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d122      	bne.n	800232e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d11b      	bne.n	800232e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f06f 0202 	mvn.w	r2, #2
 80022fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f9b5 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 800231a:	e005      	b.n	8002328 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f9a7 	bl	8002670 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f9b8 	bl	8002698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b04      	cmp	r3, #4
 800233a:	d122      	bne.n	8002382 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b04      	cmp	r3, #4
 8002348:	d11b      	bne.n	8002382 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f06f 0204 	mvn.w	r2, #4
 8002352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f98b 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 800236e:	e005      	b.n	800237c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f97d 	bl	8002670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f98e 	bl	8002698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b08      	cmp	r3, #8
 800238e:	d122      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b08      	cmp	r3, #8
 800239c:	d11b      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f06f 0208 	mvn.w	r2, #8
 80023a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2204      	movs	r2, #4
 80023ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f961 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 80023c2:	e005      	b.n	80023d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f953 	bl	8002670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f964 	bl	8002698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d122      	bne.n	800242a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d11b      	bne.n	800242a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f06f 0210 	mvn.w	r2, #16
 80023fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2208      	movs	r2, #8
 8002400:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f937 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 8002416:	e005      	b.n	8002424 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f929 	bl	8002670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f93a 	bl	8002698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10e      	bne.n	8002456 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b01      	cmp	r3, #1
 8002444:	d107      	bne.n	8002456 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f06f 0201 	mvn.w	r2, #1
 800244e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7fe f83b 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002460:	2b80      	cmp	r3, #128	; 0x80
 8002462:	d10e      	bne.n	8002482 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246e:	2b80      	cmp	r3, #128	; 0x80
 8002470:	d107      	bne.n	8002482 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800247a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fadf 	bl	8002a40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248c:	2b40      	cmp	r3, #64	; 0x40
 800248e:	d10e      	bne.n	80024ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	2b40      	cmp	r3, #64	; 0x40
 800249c:	d107      	bne.n	80024ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f8ff 	bl	80026ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d10e      	bne.n	80024da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	d107      	bne.n	80024da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f06f 0220 	mvn.w	r2, #32
 80024d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 faa9 	bl	8002a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_TIM_ConfigClockSource+0x1c>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e0b4      	b.n	8002668 <HAL_TIM_ConfigClockSource+0x186>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2202      	movs	r2, #2
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800251c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002524:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002536:	d03e      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0xd4>
 8002538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800253c:	f200 8087 	bhi.w	800264e <HAL_TIM_ConfigClockSource+0x16c>
 8002540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002544:	f000 8086 	beq.w	8002654 <HAL_TIM_ConfigClockSource+0x172>
 8002548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254c:	d87f      	bhi.n	800264e <HAL_TIM_ConfigClockSource+0x16c>
 800254e:	2b70      	cmp	r3, #112	; 0x70
 8002550:	d01a      	beq.n	8002588 <HAL_TIM_ConfigClockSource+0xa6>
 8002552:	2b70      	cmp	r3, #112	; 0x70
 8002554:	d87b      	bhi.n	800264e <HAL_TIM_ConfigClockSource+0x16c>
 8002556:	2b60      	cmp	r3, #96	; 0x60
 8002558:	d050      	beq.n	80025fc <HAL_TIM_ConfigClockSource+0x11a>
 800255a:	2b60      	cmp	r3, #96	; 0x60
 800255c:	d877      	bhi.n	800264e <HAL_TIM_ConfigClockSource+0x16c>
 800255e:	2b50      	cmp	r3, #80	; 0x50
 8002560:	d03c      	beq.n	80025dc <HAL_TIM_ConfigClockSource+0xfa>
 8002562:	2b50      	cmp	r3, #80	; 0x50
 8002564:	d873      	bhi.n	800264e <HAL_TIM_ConfigClockSource+0x16c>
 8002566:	2b40      	cmp	r3, #64	; 0x40
 8002568:	d058      	beq.n	800261c <HAL_TIM_ConfigClockSource+0x13a>
 800256a:	2b40      	cmp	r3, #64	; 0x40
 800256c:	d86f      	bhi.n	800264e <HAL_TIM_ConfigClockSource+0x16c>
 800256e:	2b30      	cmp	r3, #48	; 0x30
 8002570:	d064      	beq.n	800263c <HAL_TIM_ConfigClockSource+0x15a>
 8002572:	2b30      	cmp	r3, #48	; 0x30
 8002574:	d86b      	bhi.n	800264e <HAL_TIM_ConfigClockSource+0x16c>
 8002576:	2b20      	cmp	r3, #32
 8002578:	d060      	beq.n	800263c <HAL_TIM_ConfigClockSource+0x15a>
 800257a:	2b20      	cmp	r3, #32
 800257c:	d867      	bhi.n	800264e <HAL_TIM_ConfigClockSource+0x16c>
 800257e:	2b00      	cmp	r3, #0
 8002580:	d05c      	beq.n	800263c <HAL_TIM_ConfigClockSource+0x15a>
 8002582:	2b10      	cmp	r3, #16
 8002584:	d05a      	beq.n	800263c <HAL_TIM_ConfigClockSource+0x15a>
 8002586:	e062      	b.n	800264e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6899      	ldr	r1, [r3, #8]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f000 f9ac 	bl	80028f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	609a      	str	r2, [r3, #8]
      break;
 80025b4:	e04f      	b.n	8002656 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6899      	ldr	r1, [r3, #8]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f000 f995 	bl	80028f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025d8:	609a      	str	r2, [r3, #8]
      break;
 80025da:	e03c      	b.n	8002656 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	461a      	mov	r2, r3
 80025ea:	f000 f909 	bl	8002800 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2150      	movs	r1, #80	; 0x50
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 f962 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 80025fa:	e02c      	b.n	8002656 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	461a      	mov	r2, r3
 800260a:	f000 f928 	bl	800285e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2160      	movs	r1, #96	; 0x60
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f952 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 800261a:	e01c      	b.n	8002656 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	6859      	ldr	r1, [r3, #4]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	461a      	mov	r2, r3
 800262a:	f000 f8e9 	bl	8002800 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2140      	movs	r1, #64	; 0x40
 8002634:	4618      	mov	r0, r3
 8002636:	f000 f942 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 800263a:	e00c      	b.n	8002656 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	4610      	mov	r0, r2
 8002648:	f000 f939 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 800264c:	e003      	b.n	8002656 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
      break;
 8002652:	e000      	b.n	8002656 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002654:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a40      	ldr	r2, [pc, #256]	; (80027d4 <TIM_Base_SetConfig+0x114>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d013      	beq.n	8002700 <TIM_Base_SetConfig+0x40>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026de:	d00f      	beq.n	8002700 <TIM_Base_SetConfig+0x40>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a3d      	ldr	r2, [pc, #244]	; (80027d8 <TIM_Base_SetConfig+0x118>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00b      	beq.n	8002700 <TIM_Base_SetConfig+0x40>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a3c      	ldr	r2, [pc, #240]	; (80027dc <TIM_Base_SetConfig+0x11c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d007      	beq.n	8002700 <TIM_Base_SetConfig+0x40>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3b      	ldr	r2, [pc, #236]	; (80027e0 <TIM_Base_SetConfig+0x120>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d003      	beq.n	8002700 <TIM_Base_SetConfig+0x40>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a3a      	ldr	r2, [pc, #232]	; (80027e4 <TIM_Base_SetConfig+0x124>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d108      	bne.n	8002712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a2f      	ldr	r2, [pc, #188]	; (80027d4 <TIM_Base_SetConfig+0x114>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d02b      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002720:	d027      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a2c      	ldr	r2, [pc, #176]	; (80027d8 <TIM_Base_SetConfig+0x118>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d023      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a2b      	ldr	r2, [pc, #172]	; (80027dc <TIM_Base_SetConfig+0x11c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01f      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a2a      	ldr	r2, [pc, #168]	; (80027e0 <TIM_Base_SetConfig+0x120>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01b      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a29      	ldr	r2, [pc, #164]	; (80027e4 <TIM_Base_SetConfig+0x124>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d017      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a28      	ldr	r2, [pc, #160]	; (80027e8 <TIM_Base_SetConfig+0x128>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a27      	ldr	r2, [pc, #156]	; (80027ec <TIM_Base_SetConfig+0x12c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00f      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a26      	ldr	r2, [pc, #152]	; (80027f0 <TIM_Base_SetConfig+0x130>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00b      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a25      	ldr	r2, [pc, #148]	; (80027f4 <TIM_Base_SetConfig+0x134>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a24      	ldr	r2, [pc, #144]	; (80027f8 <TIM_Base_SetConfig+0x138>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d003      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a23      	ldr	r2, [pc, #140]	; (80027fc <TIM_Base_SetConfig+0x13c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d108      	bne.n	8002784 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <TIM_Base_SetConfig+0x114>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_Base_SetConfig+0xf8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <TIM_Base_SetConfig+0x124>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d103      	bne.n	80027c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	615a      	str	r2, [r3, #20]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40010000 	.word	0x40010000
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	40010400 	.word	0x40010400
 80027e8:	40014000 	.word	0x40014000
 80027ec:	40014400 	.word	0x40014400
 80027f0:	40014800 	.word	0x40014800
 80027f4:	40001800 	.word	0x40001800
 80027f8:	40001c00 	.word	0x40001c00
 80027fc:	40002000 	.word	0x40002000

08002800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f023 0201 	bic.w	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f023 030a 	bic.w	r3, r3, #10
 800283c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	621a      	str	r2, [r3, #32]
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800285e:	b480      	push	{r7}
 8002860:	b087      	sub	sp, #28
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0210 	bic.w	r2, r3, #16
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002888:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	031b      	lsls	r3, r3, #12
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800289a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	621a      	str	r2, [r3, #32]
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	f043 0307 	orr.w	r3, r3, #7
 80028e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	609a      	str	r2, [r3, #8]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800290e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	021a      	lsls	r2, r3, #8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	431a      	orrs	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	609a      	str	r2, [r3, #8]
}
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002948:	2302      	movs	r3, #2
 800294a:	e05a      	b.n	8002a02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d022      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002998:	d01d      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d018      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1b      	ldr	r2, [pc, #108]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1a      	ldr	r2, [pc, #104]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00e      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d009      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d004      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a15      	ldr	r2, [pc, #84]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10c      	bne.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40000400 	.word	0x40000400
 8002a18:	40000800 	.word	0x40000800
 8002a1c:	40000c00 	.word	0x40000c00
 8002a20:	40010400 	.word	0x40010400
 8002a24:	40014000 	.word	0x40014000
 8002a28:	40001800 	.word	0x40001800

08002a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e03f      	b.n	8002ae6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fd ff18 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2224      	movs	r2, #36	; 0x24
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fc7b 	bl	8003394 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002abc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002acc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b0ba      	sub	sp, #232	; 0xe8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10f      	bne.n	8002b56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_UART_IRQHandler+0x66>
 8002b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fb65 	bl	800321e <UART_Receive_IT>
      return;
 8002b54:	e256      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80de 	beq.w	8002d1c <HAL_UART_IRQHandler+0x22c>
 8002b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d106      	bne.n	8002b7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80d1 	beq.w	8002d1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_UART_IRQHandler+0xae>
 8002b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00b      	beq.n	8002bc2 <HAL_UART_IRQHandler+0xd2>
 8002baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f043 0202 	orr.w	r2, r3, #2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_UART_IRQHandler+0xf6>
 8002bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f043 0204 	orr.w	r2, r3, #4
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d011      	beq.n	8002c16 <HAL_UART_IRQHandler+0x126>
 8002bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d105      	bne.n	8002c0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f043 0208 	orr.w	r2, r3, #8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 81ed 	beq.w	8002ffa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_UART_IRQHandler+0x14e>
 8002c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 faf0 	bl	800321e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <HAL_UART_IRQHandler+0x17a>
 8002c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d04f      	beq.n	8002d0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f9f8 	bl	8003060 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	2b40      	cmp	r3, #64	; 0x40
 8002c7c:	d141      	bne.n	8002d02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3314      	adds	r3, #20
 8002c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3314      	adds	r3, #20
 8002ca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002caa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cba:	e841 2300 	strex	r3, r2, [r1]
 8002cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1d9      	bne.n	8002c7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d013      	beq.n	8002cfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd6:	4a7d      	ldr	r2, [pc, #500]	; (8002ecc <HAL_UART_IRQHandler+0x3dc>)
 8002cd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fa16 	bl	8001110 <HAL_DMA_Abort_IT>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf8:	e00e      	b.n	8002d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f99a 	bl	8003034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d00:	e00a      	b.n	8002d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f996 	bl	8003034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	e006      	b.n	8002d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f992 	bl	8003034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d16:	e170      	b.n	8002ffa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d18:	bf00      	nop
    return;
 8002d1a:	e16e      	b.n	8002ffa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	f040 814a 	bne.w	8002fba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8143 	beq.w	8002fba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 813c 	beq.w	8002fba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	f040 80b4 	bne.w	8002ed0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8140 	beq.w	8002ffe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d86:	429a      	cmp	r2, r3
 8002d88:	f080 8139 	bcs.w	8002ffe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9e:	f000 8088 	beq.w	8002eb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	330c      	adds	r3, #12
 8002da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002dce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dde:	e841 2300 	strex	r3, r2, [r1]
 8002de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1d9      	bne.n	8002da2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3314      	adds	r3, #20
 8002df4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e1      	bne.n	8002dee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3314      	adds	r3, #20
 8002e30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e34:	e853 3f00 	ldrex	r3, [r3]
 8002e38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3314      	adds	r3, #20
 8002e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e56:	e841 2300 	strex	r3, r2, [r1]
 8002e5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1e3      	bne.n	8002e2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e82:	f023 0310 	bic.w	r3, r3, #16
 8002e86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	330c      	adds	r3, #12
 8002e90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e94:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e9c:	e841 2300 	strex	r3, r2, [r1]
 8002ea0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e3      	bne.n	8002e70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe f8bf 	bl	8001030 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8c0 	bl	8003048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ec8:	e099      	b.n	8002ffe <HAL_UART_IRQHandler+0x50e>
 8002eca:	bf00      	nop
 8002ecc:	08003127 	.word	0x08003127
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 808b 	beq.w	8003002 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 8086 	beq.w	8003002 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	330c      	adds	r3, #12
 8002efc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f00:	e853 3f00 	ldrex	r3, [r3]
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	330c      	adds	r3, #12
 8002f16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f1a:	647a      	str	r2, [r7, #68]	; 0x44
 8002f1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e3      	bne.n	8002ef6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3314      	adds	r3, #20
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	e853 3f00 	ldrex	r3, [r3]
 8002f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3314      	adds	r3, #20
 8002f4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f52:	633a      	str	r2, [r7, #48]	; 0x30
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e3      	bne.n	8002f2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	e853 3f00 	ldrex	r3, [r3]
 8002f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0310 	bic.w	r3, r3, #16
 8002f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	330c      	adds	r3, #12
 8002f94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f98:	61fa      	str	r2, [r7, #28]
 8002f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9c:	69b9      	ldr	r1, [r7, #24]
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	e841 2300 	strex	r3, r2, [r1]
 8002fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1e3      	bne.n	8002f74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f848 	bl	8003048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fb8:	e023      	b.n	8003002 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_UART_IRQHandler+0x4ea>
 8002fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f8bb 	bl	800314e <UART_Transmit_IT>
    return;
 8002fd8:	e014      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00e      	beq.n	8003004 <HAL_UART_IRQHandler+0x514>
 8002fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f8fb 	bl	80031ee <UART_EndTransmit_IT>
    return;
 8002ff8:	e004      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
    return;
 8002ffa:	bf00      	nop
 8002ffc:	e002      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
      return;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
      return;
 8003002:	bf00      	nop
  }
}
 8003004:	37e8      	adds	r7, #232	; 0xe8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop

0800300c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003060:	b480      	push	{r7}
 8003062:	b095      	sub	sp, #84	; 0x54
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	330c      	adds	r3, #12
 800306e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003072:	e853 3f00 	ldrex	r3, [r3]
 8003076:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800307e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	330c      	adds	r3, #12
 8003086:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003088:	643a      	str	r2, [r7, #64]	; 0x40
 800308a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800308e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003090:	e841 2300 	strex	r3, r2, [r1]
 8003094:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e5      	bne.n	8003068 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3314      	adds	r3, #20
 80030a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	e853 3f00 	ldrex	r3, [r3]
 80030aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3314      	adds	r3, #20
 80030ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c4:	e841 2300 	strex	r3, r2, [r1]
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e5      	bne.n	800309c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d119      	bne.n	800310c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	330c      	adds	r3, #12
 80030de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	e853 3f00 	ldrex	r3, [r3]
 80030e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f023 0310 	bic.w	r3, r3, #16
 80030ee:	647b      	str	r3, [r7, #68]	; 0x44
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030f8:	61ba      	str	r2, [r7, #24]
 80030fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	6979      	ldr	r1, [r7, #20]
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	e841 2300 	strex	r3, r2, [r1]
 8003104:	613b      	str	r3, [r7, #16]
   return(result);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e5      	bne.n	80030d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
}
 800311a:	bf00      	nop
 800311c:	3754      	adds	r7, #84	; 0x54
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f7ff ff77 	bl	8003034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800314e:	b480      	push	{r7}
 8003150:	b085      	sub	sp, #20
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b21      	cmp	r3, #33	; 0x21
 8003160:	d13e      	bne.n	80031e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316a:	d114      	bne.n	8003196 <UART_Transmit_IT+0x48>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d110      	bne.n	8003196 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003188:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	1c9a      	adds	r2, r3, #2
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	621a      	str	r2, [r3, #32]
 8003194:	e008      	b.n	80031a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	1c59      	adds	r1, r3, #1
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6211      	str	r1, [r2, #32]
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4619      	mov	r1, r3
 80031b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10f      	bne.n	80031dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	e000      	b.n	80031e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031e0:	2302      	movs	r3, #2
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003204:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff fefc 	bl	800300c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b08c      	sub	sp, #48	; 0x30
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b22      	cmp	r3, #34	; 0x22
 8003230:	f040 80ab 	bne.w	800338a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323c:	d117      	bne.n	800326e <UART_Receive_IT+0x50>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d113      	bne.n	800326e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003246:	2300      	movs	r3, #0
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	b29b      	uxth	r3, r3
 8003258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325c:	b29a      	uxth	r2, r3
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	1c9a      	adds	r2, r3, #2
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
 800326c:	e026      	b.n	80032bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003274:	2300      	movs	r3, #0
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003280:	d007      	beq.n	8003292 <UART_Receive_IT+0x74>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <UART_Receive_IT+0x82>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	e008      	b.n	80032b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4619      	mov	r1, r3
 80032ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d15a      	bne.n	8003386 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0220 	bic.w	r2, r2, #32
 80032de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	2b01      	cmp	r3, #1
 800330e:	d135      	bne.n	800337c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	613b      	str	r3, [r7, #16]
   return(result);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f023 0310 	bic.w	r3, r3, #16
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	330c      	adds	r3, #12
 8003334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003336:	623a      	str	r2, [r7, #32]
 8003338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	69f9      	ldr	r1, [r7, #28]
 800333c:	6a3a      	ldr	r2, [r7, #32]
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	61bb      	str	r3, [r7, #24]
   return(result);
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e5      	bne.n	8003316 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b10      	cmp	r3, #16
 8003356:	d10a      	bne.n	800336e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003372:	4619      	mov	r1, r3
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff fe67 	bl	8003048 <HAL_UARTEx_RxEventCallback>
 800337a:	e002      	b.n	8003382 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff fe4f 	bl	8003020 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	e002      	b.n	800338c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
  }
}
 800338c:	4618      	mov	r0, r3
 800338e:	3730      	adds	r7, #48	; 0x30
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003398:	b0c0      	sub	sp, #256	; 0x100
 800339a:	af00      	add	r7, sp, #0
 800339c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b0:	68d9      	ldr	r1, [r3, #12]
 80033b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	ea40 0301 	orr.w	r3, r0, r1
 80033bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033ec:	f021 010c 	bic.w	r1, r1, #12
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033fa:	430b      	orrs	r3, r1
 80033fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800340a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340e:	6999      	ldr	r1, [r3, #24]
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	ea40 0301 	orr.w	r3, r0, r1
 800341a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	4b8f      	ldr	r3, [pc, #572]	; (8003660 <UART_SetConfig+0x2cc>)
 8003424:	429a      	cmp	r2, r3
 8003426:	d005      	beq.n	8003434 <UART_SetConfig+0xa0>
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b8d      	ldr	r3, [pc, #564]	; (8003664 <UART_SetConfig+0x2d0>)
 8003430:	429a      	cmp	r2, r3
 8003432:	d104      	bne.n	800343e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003434:	f7fe feea 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 8003438:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800343c:	e003      	b.n	8003446 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800343e:	f7fe fed1 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 8003442:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003450:	f040 810c 	bne.w	800366c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003458:	2200      	movs	r2, #0
 800345a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800345e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003462:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003466:	4622      	mov	r2, r4
 8003468:	462b      	mov	r3, r5
 800346a:	1891      	adds	r1, r2, r2
 800346c:	65b9      	str	r1, [r7, #88]	; 0x58
 800346e:	415b      	adcs	r3, r3
 8003470:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003472:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003476:	4621      	mov	r1, r4
 8003478:	eb12 0801 	adds.w	r8, r2, r1
 800347c:	4629      	mov	r1, r5
 800347e:	eb43 0901 	adc.w	r9, r3, r1
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800348e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003496:	4690      	mov	r8, r2
 8003498:	4699      	mov	r9, r3
 800349a:	4623      	mov	r3, r4
 800349c:	eb18 0303 	adds.w	r3, r8, r3
 80034a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034a4:	462b      	mov	r3, r5
 80034a6:	eb49 0303 	adc.w	r3, r9, r3
 80034aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034c2:	460b      	mov	r3, r1
 80034c4:	18db      	adds	r3, r3, r3
 80034c6:	653b      	str	r3, [r7, #80]	; 0x50
 80034c8:	4613      	mov	r3, r2
 80034ca:	eb42 0303 	adc.w	r3, r2, r3
 80034ce:	657b      	str	r3, [r7, #84]	; 0x54
 80034d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034d8:	f7fc fe76 	bl	80001c8 <__aeabi_uldivmod>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4b61      	ldr	r3, [pc, #388]	; (8003668 <UART_SetConfig+0x2d4>)
 80034e2:	fba3 2302 	umull	r2, r3, r3, r2
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	011c      	lsls	r4, r3, #4
 80034ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034fc:	4642      	mov	r2, r8
 80034fe:	464b      	mov	r3, r9
 8003500:	1891      	adds	r1, r2, r2
 8003502:	64b9      	str	r1, [r7, #72]	; 0x48
 8003504:	415b      	adcs	r3, r3
 8003506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003508:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800350c:	4641      	mov	r1, r8
 800350e:	eb12 0a01 	adds.w	sl, r2, r1
 8003512:	4649      	mov	r1, r9
 8003514:	eb43 0b01 	adc.w	fp, r3, r1
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003524:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003528:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800352c:	4692      	mov	sl, r2
 800352e:	469b      	mov	fp, r3
 8003530:	4643      	mov	r3, r8
 8003532:	eb1a 0303 	adds.w	r3, sl, r3
 8003536:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800353a:	464b      	mov	r3, r9
 800353c:	eb4b 0303 	adc.w	r3, fp, r3
 8003540:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003550:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003554:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003558:	460b      	mov	r3, r1
 800355a:	18db      	adds	r3, r3, r3
 800355c:	643b      	str	r3, [r7, #64]	; 0x40
 800355e:	4613      	mov	r3, r2
 8003560:	eb42 0303 	adc.w	r3, r2, r3
 8003564:	647b      	str	r3, [r7, #68]	; 0x44
 8003566:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800356a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800356e:	f7fc fe2b 	bl	80001c8 <__aeabi_uldivmod>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4611      	mov	r1, r2
 8003578:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <UART_SetConfig+0x2d4>)
 800357a:	fba3 2301 	umull	r2, r3, r3, r1
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2264      	movs	r2, #100	; 0x64
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	1acb      	subs	r3, r1, r3
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800358e:	4b36      	ldr	r3, [pc, #216]	; (8003668 <UART_SetConfig+0x2d4>)
 8003590:	fba3 2302 	umull	r2, r3, r3, r2
 8003594:	095b      	lsrs	r3, r3, #5
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800359c:	441c      	add	r4, r3
 800359e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035b0:	4642      	mov	r2, r8
 80035b2:	464b      	mov	r3, r9
 80035b4:	1891      	adds	r1, r2, r2
 80035b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80035b8:	415b      	adcs	r3, r3
 80035ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035c0:	4641      	mov	r1, r8
 80035c2:	1851      	adds	r1, r2, r1
 80035c4:	6339      	str	r1, [r7, #48]	; 0x30
 80035c6:	4649      	mov	r1, r9
 80035c8:	414b      	adcs	r3, r1
 80035ca:	637b      	str	r3, [r7, #52]	; 0x34
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035d8:	4659      	mov	r1, fp
 80035da:	00cb      	lsls	r3, r1, #3
 80035dc:	4651      	mov	r1, sl
 80035de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035e2:	4651      	mov	r1, sl
 80035e4:	00ca      	lsls	r2, r1, #3
 80035e6:	4610      	mov	r0, r2
 80035e8:	4619      	mov	r1, r3
 80035ea:	4603      	mov	r3, r0
 80035ec:	4642      	mov	r2, r8
 80035ee:	189b      	adds	r3, r3, r2
 80035f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035f4:	464b      	mov	r3, r9
 80035f6:	460a      	mov	r2, r1
 80035f8:	eb42 0303 	adc.w	r3, r2, r3
 80035fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800360c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003610:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003614:	460b      	mov	r3, r1
 8003616:	18db      	adds	r3, r3, r3
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
 800361a:	4613      	mov	r3, r2
 800361c:	eb42 0303 	adc.w	r3, r2, r3
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003622:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003626:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800362a:	f7fc fdcd 	bl	80001c8 <__aeabi_uldivmod>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <UART_SetConfig+0x2d4>)
 8003634:	fba3 1302 	umull	r1, r3, r3, r2
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	2164      	movs	r1, #100	; 0x64
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	3332      	adds	r3, #50	; 0x32
 8003646:	4a08      	ldr	r2, [pc, #32]	; (8003668 <UART_SetConfig+0x2d4>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	f003 0207 	and.w	r2, r3, #7
 8003652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4422      	add	r2, r4
 800365a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800365c:	e105      	b.n	800386a <UART_SetConfig+0x4d6>
 800365e:	bf00      	nop
 8003660:	40011000 	.word	0x40011000
 8003664:	40011400 	.word	0x40011400
 8003668:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800366c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003670:	2200      	movs	r2, #0
 8003672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003676:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800367a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800367e:	4642      	mov	r2, r8
 8003680:	464b      	mov	r3, r9
 8003682:	1891      	adds	r1, r2, r2
 8003684:	6239      	str	r1, [r7, #32]
 8003686:	415b      	adcs	r3, r3
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
 800368a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800368e:	4641      	mov	r1, r8
 8003690:	1854      	adds	r4, r2, r1
 8003692:	4649      	mov	r1, r9
 8003694:	eb43 0501 	adc.w	r5, r3, r1
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	00eb      	lsls	r3, r5, #3
 80036a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036a6:	00e2      	lsls	r2, r4, #3
 80036a8:	4614      	mov	r4, r2
 80036aa:	461d      	mov	r5, r3
 80036ac:	4643      	mov	r3, r8
 80036ae:	18e3      	adds	r3, r4, r3
 80036b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036b4:	464b      	mov	r3, r9
 80036b6:	eb45 0303 	adc.w	r3, r5, r3
 80036ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036da:	4629      	mov	r1, r5
 80036dc:	008b      	lsls	r3, r1, #2
 80036de:	4621      	mov	r1, r4
 80036e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036e4:	4621      	mov	r1, r4
 80036e6:	008a      	lsls	r2, r1, #2
 80036e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036ec:	f7fc fd6c 	bl	80001c8 <__aeabi_uldivmod>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4b60      	ldr	r3, [pc, #384]	; (8003878 <UART_SetConfig+0x4e4>)
 80036f6:	fba3 2302 	umull	r2, r3, r3, r2
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	011c      	lsls	r4, r3, #4
 80036fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003702:	2200      	movs	r2, #0
 8003704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003708:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800370c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003710:	4642      	mov	r2, r8
 8003712:	464b      	mov	r3, r9
 8003714:	1891      	adds	r1, r2, r2
 8003716:	61b9      	str	r1, [r7, #24]
 8003718:	415b      	adcs	r3, r3
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003720:	4641      	mov	r1, r8
 8003722:	1851      	adds	r1, r2, r1
 8003724:	6139      	str	r1, [r7, #16]
 8003726:	4649      	mov	r1, r9
 8003728:	414b      	adcs	r3, r1
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003738:	4659      	mov	r1, fp
 800373a:	00cb      	lsls	r3, r1, #3
 800373c:	4651      	mov	r1, sl
 800373e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003742:	4651      	mov	r1, sl
 8003744:	00ca      	lsls	r2, r1, #3
 8003746:	4610      	mov	r0, r2
 8003748:	4619      	mov	r1, r3
 800374a:	4603      	mov	r3, r0
 800374c:	4642      	mov	r2, r8
 800374e:	189b      	adds	r3, r3, r2
 8003750:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003754:	464b      	mov	r3, r9
 8003756:	460a      	mov	r2, r1
 8003758:	eb42 0303 	adc.w	r3, r2, r3
 800375c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	67bb      	str	r3, [r7, #120]	; 0x78
 800376a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003778:	4649      	mov	r1, r9
 800377a:	008b      	lsls	r3, r1, #2
 800377c:	4641      	mov	r1, r8
 800377e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003782:	4641      	mov	r1, r8
 8003784:	008a      	lsls	r2, r1, #2
 8003786:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800378a:	f7fc fd1d 	bl	80001c8 <__aeabi_uldivmod>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4b39      	ldr	r3, [pc, #228]	; (8003878 <UART_SetConfig+0x4e4>)
 8003794:	fba3 1302 	umull	r1, r3, r3, r2
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	2164      	movs	r1, #100	; 0x64
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	3332      	adds	r3, #50	; 0x32
 80037a6:	4a34      	ldr	r2, [pc, #208]	; (8003878 <UART_SetConfig+0x4e4>)
 80037a8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037b2:	441c      	add	r4, r3
 80037b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037b8:	2200      	movs	r2, #0
 80037ba:	673b      	str	r3, [r7, #112]	; 0x70
 80037bc:	677a      	str	r2, [r7, #116]	; 0x74
 80037be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037c2:	4642      	mov	r2, r8
 80037c4:	464b      	mov	r3, r9
 80037c6:	1891      	adds	r1, r2, r2
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	415b      	adcs	r3, r3
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037d2:	4641      	mov	r1, r8
 80037d4:	1851      	adds	r1, r2, r1
 80037d6:	6039      	str	r1, [r7, #0]
 80037d8:	4649      	mov	r1, r9
 80037da:	414b      	adcs	r3, r1
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037ea:	4659      	mov	r1, fp
 80037ec:	00cb      	lsls	r3, r1, #3
 80037ee:	4651      	mov	r1, sl
 80037f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037f4:	4651      	mov	r1, sl
 80037f6:	00ca      	lsls	r2, r1, #3
 80037f8:	4610      	mov	r0, r2
 80037fa:	4619      	mov	r1, r3
 80037fc:	4603      	mov	r3, r0
 80037fe:	4642      	mov	r2, r8
 8003800:	189b      	adds	r3, r3, r2
 8003802:	66bb      	str	r3, [r7, #104]	; 0x68
 8003804:	464b      	mov	r3, r9
 8003806:	460a      	mov	r2, r1
 8003808:	eb42 0303 	adc.w	r3, r2, r3
 800380c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800380e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	663b      	str	r3, [r7, #96]	; 0x60
 8003818:	667a      	str	r2, [r7, #100]	; 0x64
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003826:	4649      	mov	r1, r9
 8003828:	008b      	lsls	r3, r1, #2
 800382a:	4641      	mov	r1, r8
 800382c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003830:	4641      	mov	r1, r8
 8003832:	008a      	lsls	r2, r1, #2
 8003834:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003838:	f7fc fcc6 	bl	80001c8 <__aeabi_uldivmod>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <UART_SetConfig+0x4e4>)
 8003842:	fba3 1302 	umull	r1, r3, r3, r2
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	2164      	movs	r1, #100	; 0x64
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	3332      	adds	r3, #50	; 0x32
 8003854:	4a08      	ldr	r2, [pc, #32]	; (8003878 <UART_SetConfig+0x4e4>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	f003 020f 	and.w	r2, r3, #15
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4422      	add	r2, r4
 8003868:	609a      	str	r2, [r3, #8]
}
 800386a:	bf00      	nop
 800386c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003870:	46bd      	mov	sp, r7
 8003872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003876:	bf00      	nop
 8003878:	51eb851f 	.word	0x51eb851f

0800387c <__libc_init_array>:
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	4d0d      	ldr	r5, [pc, #52]	; (80038b4 <__libc_init_array+0x38>)
 8003880:	4c0d      	ldr	r4, [pc, #52]	; (80038b8 <__libc_init_array+0x3c>)
 8003882:	1b64      	subs	r4, r4, r5
 8003884:	10a4      	asrs	r4, r4, #2
 8003886:	2600      	movs	r6, #0
 8003888:	42a6      	cmp	r6, r4
 800388a:	d109      	bne.n	80038a0 <__libc_init_array+0x24>
 800388c:	4d0b      	ldr	r5, [pc, #44]	; (80038bc <__libc_init_array+0x40>)
 800388e:	4c0c      	ldr	r4, [pc, #48]	; (80038c0 <__libc_init_array+0x44>)
 8003890:	f000 f820 	bl	80038d4 <_init>
 8003894:	1b64      	subs	r4, r4, r5
 8003896:	10a4      	asrs	r4, r4, #2
 8003898:	2600      	movs	r6, #0
 800389a:	42a6      	cmp	r6, r4
 800389c:	d105      	bne.n	80038aa <__libc_init_array+0x2e>
 800389e:	bd70      	pop	{r4, r5, r6, pc}
 80038a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a4:	4798      	blx	r3
 80038a6:	3601      	adds	r6, #1
 80038a8:	e7ee      	b.n	8003888 <__libc_init_array+0xc>
 80038aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ae:	4798      	blx	r3
 80038b0:	3601      	adds	r6, #1
 80038b2:	e7f2      	b.n	800389a <__libc_init_array+0x1e>
 80038b4:	08003914 	.word	0x08003914
 80038b8:	08003914 	.word	0x08003914
 80038bc:	08003914 	.word	0x08003914
 80038c0:	08003918 	.word	0x08003918

080038c4 <memset>:
 80038c4:	4402      	add	r2, r0
 80038c6:	4603      	mov	r3, r0
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d100      	bne.n	80038ce <memset+0xa>
 80038cc:	4770      	bx	lr
 80038ce:	f803 1b01 	strb.w	r1, [r3], #1
 80038d2:	e7f9      	b.n	80038c8 <memset+0x4>

080038d4 <_init>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	bf00      	nop
 80038d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038da:	bc08      	pop	{r3}
 80038dc:	469e      	mov	lr, r3
 80038de:	4770      	bx	lr

080038e0 <_fini>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr
