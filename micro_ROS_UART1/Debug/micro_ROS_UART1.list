
micro_ROS_UART1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006024  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  080061ac  080061ac  000161ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800648c  0800648c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800648c  0800648c  0001648c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006494  08006494  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006494  08006494  00016494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800649c  0800649c  0001649c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080064a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000afc  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b78  20000b78  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f4e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000240a  00000000  00000000  00030ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  00033408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009f8  00000000  00000000  00033ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022038  00000000  00000000  00034898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c5e7  00000000  00000000  000568d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca0e9  00000000  00000000  00062eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012cfa0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f90  00000000  00000000  0012cff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006194 	.word	0x08006194

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08006194 	.word	0x08006194

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f002 fe8e 	bl	8003200 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_DMA_Init();
 80004e4:	f000 f8a0 	bl	8000628 <MX_DMA_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f80c 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f8c4 	bl	8000678 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f0:	f000 f89a 	bl	8000628 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 f86e 	bl	80005d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80004f8:	f001 fe8e 	bl	8002218 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80004fc:	f001 fea8 	bl	8002250 <loop>
 8000500:	e7fc      	b.n	80004fc <main+0x20>
	...

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	; 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2230      	movs	r2, #48	; 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f005 fcb4 	bl	8005e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	4b27      	ldr	r3, [pc, #156]	; (80005cc <SystemClock_Config+0xc8>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	4a26      	ldr	r2, [pc, #152]	; (80005cc <SystemClock_Config+0xc8>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	; 0x40
 8000538:	4b24      	ldr	r3, [pc, #144]	; (80005cc <SystemClock_Config+0xc8>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <SystemClock_Config+0xcc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <SystemClock_Config+0xcc>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <SystemClock_Config+0xcc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000574:	2304      	movs	r3, #4
 8000576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000578:	2340      	movs	r3, #64	; 0x40
 800057a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000580:	2304      	movs	r3, #4
 8000582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	4618      	mov	r0, r3
 800058a:	f003 fdb1 	bl	80040f0 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000594:	f000 f94a 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2302      	movs	r3, #2
 800059e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005a0:	2390      	movs	r3, #144	; 0x90
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 f814 	bl	80045e0 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005be:	f000 f935 	bl	800082c <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3750      	adds	r7, #80	; 0x50
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <MX_USART1_UART_Init+0x50>)
 80005dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005e0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80005e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 800060c:	f004 fa08 	bl	8004a20 <HAL_UART_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000616:	f000 f909 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000098 	.word	0x20000098
 8000624:	40011000 	.word	0x40011000

08000628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_DMA_Init+0x4c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <MX_DMA_Init+0x4c>)
 8000638:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <MX_DMA_Init+0x4c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	203a      	movs	r0, #58	; 0x3a
 8000650:	f002 ff47 	bl	80034e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000654:	203a      	movs	r0, #58	; 0x3a
 8000656:	f002 ff60 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	2046      	movs	r0, #70	; 0x46
 8000660:	f002 ff3f 	bl	80034e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000664:	2046      	movs	r0, #70	; 0x46
 8000666:	f002 ff58 	bl	800351a <HAL_NVIC_EnableIRQ>

}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	; 0x30
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	4b60      	ldr	r3, [pc, #384]	; (8000814 <MX_GPIO_Init+0x19c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a5f      	ldr	r2, [pc, #380]	; (8000814 <MX_GPIO_Init+0x19c>)
 8000698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b5d      	ldr	r3, [pc, #372]	; (8000814 <MX_GPIO_Init+0x19c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a6:	61bb      	str	r3, [r7, #24]
 80006a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	4b59      	ldr	r3, [pc, #356]	; (8000814 <MX_GPIO_Init+0x19c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a58      	ldr	r2, [pc, #352]	; (8000814 <MX_GPIO_Init+0x19c>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b56      	ldr	r3, [pc, #344]	; (8000814 <MX_GPIO_Init+0x19c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	4b52      	ldr	r3, [pc, #328]	; (8000814 <MX_GPIO_Init+0x19c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a51      	ldr	r2, [pc, #324]	; (8000814 <MX_GPIO_Init+0x19c>)
 80006d0:	f043 0320 	orr.w	r3, r3, #32
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b4f      	ldr	r3, [pc, #316]	; (8000814 <MX_GPIO_Init+0x19c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0320 	and.w	r3, r3, #32
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	4b4b      	ldr	r3, [pc, #300]	; (8000814 <MX_GPIO_Init+0x19c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a4a      	ldr	r2, [pc, #296]	; (8000814 <MX_GPIO_Init+0x19c>)
 80006ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b48      	ldr	r3, [pc, #288]	; (8000814 <MX_GPIO_Init+0x19c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b44      	ldr	r3, [pc, #272]	; (8000814 <MX_GPIO_Init+0x19c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a43      	ldr	r2, [pc, #268]	; (8000814 <MX_GPIO_Init+0x19c>)
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b41      	ldr	r3, [pc, #260]	; (8000814 <MX_GPIO_Init+0x19c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b3d      	ldr	r3, [pc, #244]	; (8000814 <MX_GPIO_Init+0x19c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a3c      	ldr	r2, [pc, #240]	; (8000814 <MX_GPIO_Init+0x19c>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <MX_GPIO_Init+0x19c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b36      	ldr	r3, [pc, #216]	; (8000814 <MX_GPIO_Init+0x19c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a35      	ldr	r2, [pc, #212]	; (8000814 <MX_GPIO_Init+0x19c>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b33      	ldr	r3, [pc, #204]	; (8000814 <MX_GPIO_Init+0x19c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2107      	movs	r1, #7
 8000756:	4830      	ldr	r0, [pc, #192]	; (8000818 <MX_GPIO_Init+0x1a0>)
 8000758:	f003 fcb0 	bl	80040bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8000762:	482e      	ldr	r0, [pc, #184]	; (800081c <MX_GPIO_Init+0x1a4>)
 8000764:	f003 fcaa 	bl	80040bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2103      	movs	r1, #3
 800076c:	482c      	ldr	r0, [pc, #176]	; (8000820 <MX_GPIO_Init+0x1a8>)
 800076e:	f003 fca5 	bl	80040bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000778:	482a      	ldr	r0, [pc, #168]	; (8000824 <MX_GPIO_Init+0x1ac>)
 800077a:	f003 fc9f 	bl	80040bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800077e:	2307      	movs	r3, #7
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4619      	mov	r1, r3
 8000794:	4820      	ldr	r0, [pc, #128]	; (8000818 <MX_GPIO_Init+0x1a0>)
 8000796:	f003 fadd 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF11 PF12 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 800079a:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	481a      	ldr	r0, [pc, #104]	; (800081c <MX_GPIO_Init+0x1a4>)
 80007b4:	f003 face 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007b8:	2303      	movs	r3, #3
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4814      	ldr	r0, [pc, #80]	; (8000820 <MX_GPIO_Init+0x1a8>)
 80007d0:	f003 fac0 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <MX_GPIO_Init+0x1ac>)
 80007ee:	f003 fab1 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007f2:	2301      	movs	r3, #1
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007fa:	2302      	movs	r3, #2
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4808      	ldr	r0, [pc, #32]	; (8000828 <MX_GPIO_Init+0x1b0>)
 8000806:	f003 faa5 	bl	8003d54 <HAL_GPIO_Init>

}
 800080a:	bf00      	nop
 800080c:	3730      	adds	r7, #48	; 0x30
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400
 800081c:	40021400 	.word	0x40021400
 8000820:	40021800 	.word	0x40021800
 8000824:	40020c00 	.word	0x40020c00
 8000828:	40021000 	.word	0x40021000

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>

08000836 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <_ZN3ros3MsgC1Ev+0x1c>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4618      	mov	r0, r3
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	0800645c 	.word	0x0800645c

08000878 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
      data()
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ffe8 	bl	8000858 <_ZN3ros3MsgC1Ev>
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3304      	adds	r3, #4
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ffcf 	bl	8000836 <_ZN3ros4TimeC1Ev>
    {
    }
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	08006444 	.word	0x08006444

080008a8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6859      	ldr	r1, [r3, #4]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	b2ca      	uxtb	r2, r1
 80008c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	0a19      	lsrs	r1, r3, #8
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	3301      	adds	r3, #1
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	4413      	add	r3, r2
 80008d2:	b2ca      	uxtb	r2, r1
 80008d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	0c19      	lsrs	r1, r3, #16
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	3302      	adds	r3, #2
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	b2ca      	uxtb	r2, r1
 80008e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	0e19      	lsrs	r1, r3, #24
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	3303      	adds	r3, #3
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	4413      	add	r3, r2
 80008f6:	b2ca      	uxtb	r2, r1
 80008f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	3304      	adds	r3, #4
 80008fe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6899      	ldr	r1, [r3, #8]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	4413      	add	r3, r2
 800090a:	b2ca      	uxtb	r2, r1
 800090c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	0a19      	lsrs	r1, r3, #8
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	3301      	adds	r3, #1
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	4413      	add	r3, r2
 800091c:	b2ca      	uxtb	r2, r1
 800091e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	0c19      	lsrs	r1, r3, #16
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	3302      	adds	r3, #2
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	4413      	add	r3, r2
 800092e:	b2ca      	uxtb	r2, r1
 8000930:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	0e19      	lsrs	r1, r3, #24
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3303      	adds	r3, #3
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	4413      	add	r3, r2
 8000940:	b2ca      	uxtb	r2, r1
 8000942:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3304      	adds	r3, #4
 8000948:	60fb      	str	r3, [r7, #12]
      return offset;
 800094a:	68fb      	ldr	r3, [r7, #12]
    }
 800094c:	4618      	mov	r0, r3
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	4413      	add	r3, r2
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	3301      	adds	r3, #1
 800097c:	6839      	ldr	r1, [r7, #0]
 800097e:	440b      	add	r3, r1
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	021b      	lsls	r3, r3, #8
 8000984:	431a      	orrs	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	685a      	ldr	r2, [r3, #4]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3302      	adds	r3, #2
 8000992:	6839      	ldr	r1, [r7, #0]
 8000994:	440b      	add	r3, r1
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	041b      	lsls	r3, r3, #16
 800099a:	431a      	orrs	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3303      	adds	r3, #3
 80009a8:	6839      	ldr	r1, [r7, #0]
 80009aa:	440b      	add	r3, r1
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	061b      	lsls	r3, r3, #24
 80009b0:	431a      	orrs	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3304      	adds	r3, #4
 80009ba:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	4413      	add	r3, r2
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3301      	adds	r3, #1
 80009d2:	6839      	ldr	r1, [r7, #0]
 80009d4:	440b      	add	r3, r1
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	021b      	lsls	r3, r3, #8
 80009da:	431a      	orrs	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689a      	ldr	r2, [r3, #8]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3302      	adds	r3, #2
 80009e8:	6839      	ldr	r1, [r7, #0]
 80009ea:	440b      	add	r3, r1
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	041b      	lsls	r3, r3, #16
 80009f0:	431a      	orrs	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689a      	ldr	r2, [r3, #8]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	3303      	adds	r3, #3
 80009fe:	6839      	ldr	r1, [r7, #0]
 8000a00:	440b      	add	r3, r1
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	061b      	lsls	r3, r3, #24
 8000a06:	431a      	orrs	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3304      	adds	r3, #4
 8000a10:	60fb      	str	r3, [r7, #12]
     return offset;
 8000a12:	68fb      	ldr	r3, [r7, #12]
    }
 8000a14:	4618      	mov	r0, r3
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	080061ac 	.word	0x080061ac

08000a3c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	080061bc 	.word	0x080061bc

08000a58 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fef8 	bl	8000858 <_ZN3ros3MsgC1Ev>
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	809a      	strh	r2, [r3, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a84:	611a      	str	r2, [r3, #16]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
    {
    }
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	0800642c 	.word	0x0800642c
 8000a9c:	080061e0 	.word	0x080061e0

08000aa0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	8899      	ldrh	r1, [r3, #4]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	683a      	ldr	r2, [r7, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b2ca      	uxtb	r2, r1
 8000aba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	889b      	ldrh	r3, [r3, #4]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	b299      	uxth	r1, r3
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	b2ca      	uxtb	r2, r1
 8000ace:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fb74 	bl	80001c8 <strlen>
 8000ae0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	69b9      	ldr	r1, [r7, #24]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 fbe2 	bl	80022b4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	3304      	adds	r3, #4
 8000af4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	18d0      	adds	r0, r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	4619      	mov	r1, r3
 8000b04:	f005 f9ae 	bl	8005e64 <memcpy>
      offset += length_topic_name;
 8000b08:	69fa      	ldr	r2, [r7, #28]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fb57 	bl	80001c8 <strlen>
 8000b1a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	4413      	add	r3, r2
 8000b22:	6979      	ldr	r1, [r7, #20]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 fbc5 	bl	80022b4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	18d0      	adds	r0, r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f005 f991 	bl	8005e64 <memcpy>
      offset += length_message_type;
 8000b42:	69fa      	ldr	r2, [r7, #28]
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	4413      	add	r3, r2
 8000b48:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fb3a 	bl	80001c8 <strlen>
 8000b54:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	683a      	ldr	r2, [r7, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	6939      	ldr	r1, [r7, #16]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fba8 	bl	80022b4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	3304      	adds	r3, #4
 8000b68:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	18d0      	adds	r0, r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	691b      	ldr	r3, [r3, #16]
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4619      	mov	r1, r3
 8000b78:	f005 f974 	bl	8005e64 <memcpy>
      offset += length_md5sum;
 8000b7c:	69fa      	ldr	r2, [r7, #28]
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	4413      	add	r3, r2
 8000b82:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000b8a:	68f9      	ldr	r1, [r7, #12]
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	4413      	add	r3, r2
 8000b92:	b2ca      	uxtb	r2, r1
 8000b94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	0a19      	lsrs	r1, r3, #8
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b2ca      	uxtb	r2, r1
 8000ba4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	0c19      	lsrs	r1, r3, #16
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3302      	adds	r3, #2
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b2ca      	uxtb	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	0e19      	lsrs	r1, r3, #24
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3303      	adds	r3, #3
 8000bbe:	683a      	ldr	r2, [r7, #0]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b2ca      	uxtb	r2, r1
 8000bc4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	61fb      	str	r3, [r7, #28]
      return offset;
 8000bcc:	69fb      	ldr	r3, [r7, #28]
    }
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b08a      	sub	sp, #40	; 0x28
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	889b      	ldrh	r3, [r3, #4]
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	6839      	ldr	r1, [r7, #0]
 8000bfe:	440b      	add	r3, r1
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	4313      	orrs	r3, r2
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	3302      	adds	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	683a      	ldr	r2, [r7, #0]
 8000c1a:	441a      	add	r2, r3
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4611      	mov	r1, r2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 fb64 	bl	80022f0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	4413      	add	r3, r2
 8000c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d20c      	bcs.n	8000c58 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	441a      	add	r2, r3
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	3b01      	subs	r3, #1
 8000c48:	6839      	ldr	r1, [r7, #0]
 8000c4a:	440b      	add	r3, r1
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	3301      	adds	r3, #1
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
 8000c56:	e7ec      	b.n	8000c32 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	441a      	add	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	4413      	add	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	683a      	ldr	r2, [r7, #0]
 8000c80:	441a      	add	r2, r3
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 fb31 	bl	80022f0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	3304      	adds	r3, #4
 8000c92:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	623b      	str	r3, [r7, #32]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	6a3a      	ldr	r2, [r7, #32]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d20c      	bcs.n	8000cbe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	6a3b      	ldr	r3, [r7, #32]
 8000ca8:	441a      	add	r2, r3
 8000caa:	6a3b      	ldr	r3, [r7, #32]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	6839      	ldr	r1, [r7, #0]
 8000cb0:	440b      	add	r3, r1
 8000cb2:	7812      	ldrb	r2, [r2, #0]
 8000cb4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]
 8000cbc:	e7ec      	b.n	8000c98 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	4413      	add	r3, r2
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	441a      	add	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4413      	add	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	441a      	add	r2, r3
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fafe 	bl	80022f0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	61fb      	str	r3, [r7, #28]
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	69fa      	ldr	r2, [r7, #28]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d20c      	bcs.n	8000d24 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	441a      	add	r2, r3
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	6839      	ldr	r1, [r7, #0]
 8000d16:	440b      	add	r3, r1
 8000d18:	7812      	ldrb	r2, [r2, #0]
 8000d1a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	e7ec      	b.n	8000cfe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	441a      	add	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4413      	add	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	6839      	ldr	r1, [r7, #0]
 8000d52:	440a      	add	r2, r1
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	6839      	ldr	r1, [r7, #0]
 8000d62:	440b      	add	r3, r1
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d6c:	68ba      	ldr	r2, [r7, #8]
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	3302      	adds	r3, #2
 8000d72:	6839      	ldr	r1, [r7, #0]
 8000d74:	440b      	add	r3, r1
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	041b      	lsls	r3, r3, #16
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	3303      	adds	r3, #3
 8000d84:	6839      	ldr	r1, [r7, #0]
 8000d86:	440b      	add	r3, r1
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	061b      	lsls	r3, r3, #24
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	61bb      	str	r3, [r7, #24]
     return offset;
 8000d9c:	69bb      	ldr	r3, [r7, #24]
    }
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	080061e4 	.word	0x080061e4

08000dc4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	08006200 	.word	0x08006200

08000de0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fd34 	bl	8000858 <_ZN3ros3MsgC1Ev>
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	711a      	strb	r2, [r3, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000e00:	609a      	str	r2, [r3, #8]
    {
    }
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	08006414 	.word	0x08006414
 8000e10:	080061e0 	.word	0x080061e0

08000e14 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	7912      	ldrb	r2, [r2, #4]
 8000e2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	3301      	adds	r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff f9c5 	bl	80001c8 <strlen>
 8000e3e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	4413      	add	r3, r2
 8000e46:	68b9      	ldr	r1, [r7, #8]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f001 fa33 	bl	80022b4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	3304      	adds	r3, #4
 8000e52:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	18d0      	adds	r0, r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f004 ffff 	bl	8005e64 <memcpy>
      offset += length_msg;
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
      return offset;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    }
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	781a      	ldrb	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	3301      	adds	r3, #1
 8000e96:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	441a      	add	r2, r3
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 fa23 	bl	80022f0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	3304      	adds	r3, #4
 8000eae:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4413      	add	r3, r2
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d20c      	bcs.n	8000eda <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	441a      	add	r2, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	6839      	ldr	r1, [r7, #0]
 8000ecc:	440b      	add	r3, r1
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	e7ec      	b.n	8000eb4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	441a      	add	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
     return offset;
 8000efe:	693b      	ldr	r3, [r7, #16]
    }
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	08006224 	.word	0x08006224

08000f24 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	08006238 	.word	0x08006238

08000f40 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fc84 	bl	8000858 <_ZN3ros3MsgC1Ev>
 8000f50:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	080063fc 	.word	0x080063fc

08000f9c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6859      	ldr	r1, [r3, #4]
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	b2ca      	uxtb	r2, r1
 8000fb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	0a19      	lsrs	r1, r3, #8
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b2ca      	uxtb	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	0c19      	lsrs	r1, r3, #16
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	b2ca      	uxtb	r2, r1
 8000fda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	0e19      	lsrs	r1, r3, #24
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	3303      	adds	r3, #3
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	b2ca      	uxtb	r2, r1
 8000fec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	6a3a      	ldr	r2, [r7, #32]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d22b      	bcs.n	800105a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68da      	ldr	r2, [r3, #12]
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001010:	6939      	ldr	r1, [r7, #16]
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	4413      	add	r3, r2
 8001018:	b2ca      	uxtb	r2, r1
 800101a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	0a19      	lsrs	r1, r3, #8
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	3301      	adds	r3, #1
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	4413      	add	r3, r2
 8001028:	b2ca      	uxtb	r2, r1
 800102a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	0c19      	lsrs	r1, r3, #16
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	3302      	adds	r3, #2
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	4413      	add	r3, r2
 8001038:	b2ca      	uxtb	r2, r1
 800103a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	0e19      	lsrs	r1, r3, #24
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	3303      	adds	r3, #3
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	4413      	add	r3, r2
 8001048:	b2ca      	uxtb	r2, r1
 800104a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	3304      	adds	r3, #4
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	3301      	adds	r3, #1
 8001056:	623b      	str	r3, [r7, #32]
 8001058:	e7ce      	b.n	8000ff8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6919      	ldr	r1, [r3, #16]
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	4413      	add	r3, r2
 8001064:	b2ca      	uxtb	r2, r1
 8001066:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	0a19      	lsrs	r1, r3, #8
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	3301      	adds	r3, #1
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	4413      	add	r3, r2
 8001076:	b2ca      	uxtb	r2, r1
 8001078:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	0c19      	lsrs	r1, r3, #16
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	3302      	adds	r3, #2
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	b2ca      	uxtb	r2, r1
 800108a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	0e19      	lsrs	r1, r3, #24
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	3303      	adds	r3, #3
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	4413      	add	r3, r2
 800109a:	b2ca      	uxtb	r2, r1
 800109c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	3304      	adds	r3, #4
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d22b      	bcs.n	800110a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	699a      	ldr	r2, [r3, #24]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80010c0:	68f9      	ldr	r1, [r7, #12]
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	b2ca      	uxtb	r2, r1
 80010ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	0a19      	lsrs	r1, r3, #8
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	3301      	adds	r3, #1
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	b2ca      	uxtb	r2, r1
 80010da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	0c19      	lsrs	r1, r3, #16
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	3302      	adds	r3, #2
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	b2ca      	uxtb	r2, r1
 80010ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	0e19      	lsrs	r1, r3, #24
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	3303      	adds	r3, #3
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	b2ca      	uxtb	r2, r1
 80010fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	3304      	adds	r3, #4
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3301      	adds	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	e7ce      	b.n	80010a8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69d9      	ldr	r1, [r3, #28]
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	4413      	add	r3, r2
 8001114:	b2ca      	uxtb	r2, r1
 8001116:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	0a19      	lsrs	r1, r3, #8
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	3301      	adds	r3, #1
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	4413      	add	r3, r2
 8001126:	b2ca      	uxtb	r2, r1
 8001128:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	0c19      	lsrs	r1, r3, #16
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	3302      	adds	r3, #2
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	4413      	add	r3, r2
 8001138:	b2ca      	uxtb	r2, r1
 800113a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	0e19      	lsrs	r1, r3, #24
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	3303      	adds	r3, #3
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	4413      	add	r3, r2
 800114a:	b2ca      	uxtb	r2, r1
 800114c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	3304      	adds	r3, #4
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	429a      	cmp	r2, r3
 8001160:	d228      	bcs.n	80011b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f82a 	bl	80001c8 <strlen>
 8001174:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	4413      	add	r3, r2
 800117c:	6979      	ldr	r1, [r7, #20]
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f898 	bl	80022b4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	3304      	adds	r3, #4
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	18d0      	adds	r0, r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	4619      	mov	r1, r3
 80011a0:	f004 fe60 	bl	8005e64 <memcpy>
      offset += length_stringsi;
 80011a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	4413      	add	r3, r2
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	3301      	adds	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	e7d1      	b.n	8001158 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80011b6:	4618      	mov	r0, r3
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80011be:	b580      	push	{r7, lr}
 80011c0:	b08e      	sub	sp, #56	; 0x38
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80011cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80011d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d8:	3301      	adds	r3, #1
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	4413      	add	r3, r2
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	6a3a      	ldr	r2, [r7, #32]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80011e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ea:	3302      	adds	r3, #2
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	041b      	lsls	r3, r3, #16
 80011f4:	6a3a      	ldr	r2, [r7, #32]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80011fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fc:	3303      	adds	r3, #3
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	4413      	add	r3, r2
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	061b      	lsls	r3, r3, #24
 8001206:	6a3a      	ldr	r2, [r7, #32]
 8001208:	4313      	orrs	r3, r2
 800120a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800120c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800120e:	3304      	adds	r3, #4
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	6a3a      	ldr	r2, [r7, #32]
 8001218:	429a      	cmp	r2, r3
 800121a:	d90a      	bls.n	8001232 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4619      	mov	r1, r3
 8001226:	4610      	mov	r0, r2
 8001228:	f004 fe32 	bl	8005e90 <realloc>
 800122c:	4602      	mov	r2, r0
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a3a      	ldr	r2, [r7, #32]
 8001236:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001238:	2300      	movs	r3, #0
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001242:	429a      	cmp	r2, r3
 8001244:	d236      	bcs.n	80012b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800124e:	6839      	ldr	r1, [r7, #0]
 8001250:	440a      	add	r2, r1
 8001252:	7812      	ldrb	r2, [r2, #0]
 8001254:	4313      	orrs	r3, r2
 8001256:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125c:	3301      	adds	r3, #1
 800125e:	6839      	ldr	r1, [r7, #0]
 8001260:	440b      	add	r3, r1
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	4313      	orrs	r3, r2
 8001268:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126e:	3302      	adds	r3, #2
 8001270:	6839      	ldr	r1, [r7, #0]
 8001272:	440b      	add	r3, r1
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	041b      	lsls	r3, r3, #16
 8001278:	4313      	orrs	r3, r2
 800127a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001280:	3303      	adds	r3, #3
 8001282:	6839      	ldr	r1, [r7, #0]
 8001284:	440b      	add	r3, r1
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	061b      	lsls	r3, r3, #24
 800128a:	4313      	orrs	r3, r2
 800128c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001296:	3304      	adds	r3, #4
 8001298:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	3208      	adds	r2, #8
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80012ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ae:	3301      	adds	r3, #1
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
 80012b2:	e7c3      	b.n	800123c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80012b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80012be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c0:	3301      	adds	r3, #1
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80012d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d2:	3302      	adds	r3, #2
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	041b      	lsls	r3, r3, #16
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80012e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e4:	3303      	adds	r3, #3
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	061b      	lsls	r3, r3, #24
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80012f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f6:	3304      	adds	r3, #4
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	429a      	cmp	r2, r3
 8001302:	d90a      	bls.n	800131a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699a      	ldr	r2, [r3, #24]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f004 fdbe 	bl	8005e90 <realloc>
 8001314:	4602      	mov	r2, r0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800132a:	429a      	cmp	r2, r3
 800132c:	d236      	bcs.n	800139c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001336:	6839      	ldr	r1, [r7, #0]
 8001338:	440a      	add	r2, r1
 800133a:	7812      	ldrb	r2, [r2, #0]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001344:	3301      	adds	r3, #1
 8001346:	6839      	ldr	r1, [r7, #0]
 8001348:	440b      	add	r3, r1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001356:	3302      	adds	r3, #2
 8001358:	6839      	ldr	r1, [r7, #0]
 800135a:	440b      	add	r3, r1
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	041b      	lsls	r3, r3, #16
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001368:	3303      	adds	r3, #3
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	440b      	add	r3, r1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	061b      	lsls	r3, r3, #24
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137e:	3304      	adds	r3, #4
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699a      	ldr	r2, [r3, #24]
 8001386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	3214      	adds	r2, #20
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001396:	3301      	adds	r3, #1
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800139a:	e7c3      	b.n	8001324 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800139c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	4413      	add	r3, r2
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80013a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a8:	3301      	adds	r3, #1
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80013b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ba:	3302      	adds	r3, #2
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	041b      	lsls	r3, r3, #16
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80013ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013cc:	3303      	adds	r3, #3
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	4413      	add	r3, r2
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	061b      	lsls	r3, r3, #24
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80013dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013de:	3304      	adds	r3, #4
 80013e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d90a      	bls.n	8001402 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4619      	mov	r1, r3
 80013f6:	4610      	mov	r0, r2
 80013f8:	f004 fd4a 	bl	8005e90 <realloc>
 80013fc:	4602      	mov	r2, r0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001412:	429a      	cmp	r2, r3
 8001414:	d23f      	bcs.n	8001496 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	441a      	add	r2, r3
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f000 ff64 	bl	80022f0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142a:	3304      	adds	r3, #4
 800142c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800142e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
 8001432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800143a:	429a      	cmp	r2, r3
 800143c:	d20c      	bcs.n	8001458 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	441a      	add	r2, r3
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	3b01      	subs	r3, #1
 8001448:	6839      	ldr	r1, [r7, #0]
 800144a:	440b      	add	r3, r1
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	3301      	adds	r3, #1
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
 8001456:	e7ec      	b.n	8001432 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4413      	add	r3, r2
 800145e:	3b01      	subs	r3, #1
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	4413      	add	r3, r2
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146a:	3b01      	subs	r3, #1
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	441a      	add	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4413      	add	r3, r2
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	3220      	adds	r2, #32
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800148e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001490:	3301      	adds	r3, #1
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
 8001494:	e7ba      	b.n	800140c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001498:	4618      	mov	r0, r3
 800149a:	3738      	adds	r7, #56	; 0x38
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	08006350 	.word	0x08006350

080014bc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	0800625c 	.word	0x0800625c

080014d8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68d8      	ldr	r0, [r3, #12]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6891      	ldr	r1, [r2, #8]
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	4798      	blx	r3
 8001524:	4603      	mov	r3, r0
  };
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
  }
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800155c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <_ZN13STM32HardwareC1Ev+0x34>)
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	20000098 	.word	0x20000098

080015a4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f804 	bl	80015ba <_ZN13STM32Hardware10reset_rbufEv>
    }
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3304      	adds	r3, #4
 80015ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ce:	4619      	mov	r1, r3
 80015d0:	f003 faf2 	bl	8004bb8 <HAL_UART_Receive_DMA>
    }
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_ZN13STM32Hardware4readEv>:

    int read(){
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
      int c = -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
 80015e8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ffa8 	bl	8001546 <_ZN13STM32Hardware10getRdmaIndEv>
 80015f6:	4603      	mov	r3, r0
 80015f8:	429c      	cmp	r4, r3
 80015fa:	bf14      	ite	ne
 80015fc:	2301      	movne	r3, #1
 80015fe:	2300      	moveq	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d012      	beq.n	800162c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800160c:	1c59      	adds	r1, r3, #1
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	4413      	add	r3, r2
 8001618:	791b      	ldrb	r3, [r3, #4]
 800161a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001622:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800162c:	68fb      	ldr	r3, [r7, #12]
    }
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bd90      	pop	{r4, r7, pc}
	...

08001638 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b20      	cmp	r3, #32
 800164c:	d108      	bne.n	8001660 <_ZN13STM32Hardware5flushEv+0x28>
 800164e:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	f083 0301 	eor.w	r3, r3, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <_ZN13STM32Hardware5flushEv+0x28>
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <_ZN13STM32Hardware5flushEv+0x2a>
 8001660:	2300      	movs	r3, #0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d03f      	beq.n	80016e6 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001666:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001678:	429a      	cmp	r2, r3
 800167a:	d031      	beq.n	80016e0 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001688:	429a      	cmp	r2, r3
 800168a:	d20a      	bcs.n	80016a2 <_ZN13STM32Hardware5flushEv+0x6a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001692:	b29a      	uxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800169a:	b29b      	uxth	r3, r3
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	b29b      	uxth	r3, r3
 80016a0:	e006      	b.n	80016b0 <_ZN13STM32Hardware5flushEv+0x78>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80016bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	89fa      	ldrh	r2, [r7, #14]
 80016c6:	4619      	mov	r1, r3
 80016c8:	f003 f9f8 	bl	8004abc <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80016d2:	89fb      	ldrh	r3, [r7, #14]
 80016d4:	4413      	add	r3, r2
 80016d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <_ZN13STM32Hardware5flushEv+0xb8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
      }
    }
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000019c 	.word	0x2000019c

080016f4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
      int n = length;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800170a:	bfa8      	it	ge
 800170c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001710:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001718:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	4293      	cmp	r3, r2
 8001720:	bf28      	it	cs
 8001722:	4613      	movcs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800172c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	68b9      	ldr	r1, [r7, #8]
 8001738:	4618      	mov	r0, r3
 800173a:	f004 fb93 	bl	8005e64 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	4413      	add	r3, r2
 8001748:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	429a      	cmp	r2, r3
 8001758:	d00b      	beq.n	8001772 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	18d1      	adds	r1, r2, r3
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	461a      	mov	r2, r3
 800176e:	f004 fb79 	bl	8005e64 <memcpy>
      }

      flush();
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f7ff ff60 	bl	8001638 <_ZN13STM32Hardware5flushEv>
    }
 8001778:	bf00      	nop
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	f001 fda0 	bl	80032cc <HAL_GetTick>
 800178c:	4603      	mov	r3, r0
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
      data("")
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f858 	bl	8000858 <_ZN3ros3MsgC1Ev>
 80017a8:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <_ZN8std_msgs6StringC1Ev+0x28>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80017b2:	605a      	str	r2, [r3, #4]
    {
    }
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	080063b8 	.word	0x080063b8
 80017c4:	080061e0 	.word	0x080061e0

080017c8 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fcf4 	bl	80001c8 <strlen>
 80017e0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 fd62 	bl	80022b4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3304      	adds	r3, #4
 80017f4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	18d0      	adds	r0, r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	4619      	mov	r1, r3
 8001804:	f004 fb2e 	bl	8005e64 <memcpy>
      offset += length_data;
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	4413      	add	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001810:	68fb      	ldr	r3, [r7, #12]
    }
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	441a      	add	r2, r3
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f000 fd5b 	bl	80022f0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3304      	adds	r3, #4
 800183e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4413      	add	r3, r2
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	429a      	cmp	r2, r3
 800184e:	d20c      	bcs.n	800186a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	441a      	add	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3b01      	subs	r3, #1
 800185a:	6839      	ldr	r1, [r7, #0]
 800185c:	440b      	add	r3, r1
 800185e:	7812      	ldrb	r2, [r2, #0]
 8001860:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	e7ec      	b.n	8001844 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	3b01      	subs	r3, #1
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	4413      	add	r3, r2
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	3b01      	subs	r3, #1
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	441a      	add	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
     return offset;
 800188e:	693b      	ldr	r3, [r7, #16]
    }
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	08006280 	.word	0x08006280

080018b4 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	08006290 	.word	0x08006290

080018d0 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
      data(0)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe ffbc 	bl	8000858 <_ZN3ros3MsgC1Ev>
 80018e0:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <_ZN8std_msgs4BoolC1Ev+0x28>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	711a      	strb	r2, [r3, #4]
    {
    }
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	080063a0 	.word	0x080063a0

080018fc <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	791b      	ldrb	r3, [r3, #4]
 800190e:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	4413      	add	r3, r2
 8001916:	7a3a      	ldrb	r2, [r7, #8]
 8001918:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3301      	adds	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001920:	68fb      	ldr	r3, [r7, #12]
    }
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800192e:	b480      	push	{r7}
 8001930:	b085      	sub	sp, #20
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001940:	7a3a      	ldrb	r2, [r7, #8]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6839      	ldr	r1, [r7, #0]
 8001946:	440b      	add	r3, r1
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	4313      	orrs	r3, r2
 800194c:	b2db      	uxtb	r3, r3
 800194e:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8001950:	7a3a      	ldrb	r2, [r7, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
     return offset;
 800195c:	68fb      	ldr	r3, [r7, #12]
    }
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <_ZN8std_msgs4Bool7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Bool"; };
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	080062b4 	.word	0x080062b4

08001988 <_ZN8std_msgs4Bool6getMD5Ev>:
    virtual const char * getMD5() override { return "8b94c1b53db61fb6aed406028ad6332a"; };
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	080062c4 	.word	0x080062c4

080019a4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	080063e8 	.word	0x080063e8

080019c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff ffe8 	bl	80019a4 <_ZN3ros15NodeHandleBase_C1Ev>
 80019d4:	4a36      	ldr	r2, [pc, #216]	; (8001ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3304      	adds	r3, #4
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fdc4 	bl	800156c <_ZN13STM32HardwareC1Ev>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f004 fa35 	bl	8005e80 <memset>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 fa2c 	bl	8005e80 <memset>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8001a2e:	2264      	movs	r2, #100	; 0x64
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 fa24 	bl	8005e80 <memset>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8001a3e:	2264      	movs	r2, #100	; 0x64
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f004 fa1c 	bl	8005e80 <memset>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fa4e 	bl	8000f40 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	0800638c 	.word	0x0800638c

08001ab4 <HAL_UART_TxCpltCallback>:





void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8001abc:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <HAL_UART_TxCpltCallback+0x20>)
 8001abe:	f000 fc3c 	bl	800233a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fdb7 	bl	8001638 <_ZN13STM32Hardware5flushEv>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200001a0 	.word	0x200001a0

08001ad8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <HAL_UART_RxCpltCallback+0x20>)
 8001ae2:	f000 fc2a 	bl	800233a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fd66 	bl	80015ba <_ZN13STM32Hardware10reset_rbufEv>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200001a0 	.word	0x200001a0

08001afc <_Z9xulichuoiRKN8std_msgs6StringE>:

void xulichuoi(const std_msgs::String &msg) {
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  num = msg.data;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <_Z9xulichuoiRKN8std_msgs6StringE+0x7c>)
 8001b0a:	6013      	str	r3, [r2, #0]
  num0=num[0];
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <_Z9xulichuoiRKN8std_msgs6StringE+0x7c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <_Z9xulichuoiRKN8std_msgs6StringE+0x80>)
 8001b14:	701a      	strb	r2, [r3, #0]
  num1=num[1];
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <_Z9xulichuoiRKN8std_msgs6StringE+0x7c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <_Z9xulichuoiRKN8std_msgs6StringE+0x84>)
 8001b20:	701a      	strb	r2, [r3, #0]
  num2=num[2];
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <_Z9xulichuoiRKN8std_msgs6StringE+0x7c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	3302      	adds	r3, #2
 8001b28:	781a      	ldrb	r2, [r3, #0]
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <_Z9xulichuoiRKN8std_msgs6StringE+0x88>)
 8001b2c:	701a      	strb	r2, [r3, #0]
  num3=num[3];
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <_Z9xulichuoiRKN8std_msgs6StringE+0x7c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	3303      	adds	r3, #3
 8001b34:	781a      	ldrb	r2, [r3, #0]
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <_Z9xulichuoiRKN8std_msgs6StringE+0x8c>)
 8001b38:	701a      	strb	r2, [r3, #0]
  num4=num[4];
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <_Z9xulichuoiRKN8std_msgs6StringE+0x7c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	781a      	ldrb	r2, [r3, #0]
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <_Z9xulichuoiRKN8std_msgs6StringE+0x90>)
 8001b44:	701a      	strb	r2, [r3, #0]
  num5=num[5];
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <_Z9xulichuoiRKN8std_msgs6StringE+0x7c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	3305      	adds	r3, #5
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <_Z9xulichuoiRKN8std_msgs6StringE+0x94>)
 8001b50:	701a      	strb	r2, [r3, #0]
  num6=num[6];
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <_Z9xulichuoiRKN8std_msgs6StringE+0x7c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	3306      	adds	r3, #6
 8001b58:	781a      	ldrb	r2, [r3, #0]
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <_Z9xulichuoiRKN8std_msgs6StringE+0x98>)
 8001b5c:	701a      	strb	r2, [r3, #0]

  num7=num[7];
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <_Z9xulichuoiRKN8std_msgs6StringE+0x7c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	3307      	adds	r3, #7
 8001b64:	781a      	ldrb	r2, [r3, #0]
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <_Z9xulichuoiRKN8std_msgs6StringE+0x9c>)
 8001b68:	701a      	strb	r2, [r3, #0]


}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000b30 	.word	0x20000b30
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000001 	.word	0x20000001
 8001b84:	20000002 	.word	0x20000002
 8001b88:	20000003 	.word	0x20000003
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	20000005 	.word	0x20000005
 8001b94:	20000006 	.word	0x20000006
 8001b98:	20000007 	.word	0x20000007

08001b9c <_Z6tatallv>:

void tatall(){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	if ( (num0=='0') && (num1=='0') && (num2=='0') && (num3=='0')&&(num4=='0')&& (num5=='0')&& (num6=='0') && (num7=='0') ){
 8001ba0:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <_Z6tatallv+0xa0>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b30      	cmp	r3, #48	; 0x30
 8001ba6:	d146      	bne.n	8001c36 <_Z6tatallv+0x9a>
 8001ba8:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <_Z6tatallv+0xa4>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b30      	cmp	r3, #48	; 0x30
 8001bae:	d142      	bne.n	8001c36 <_Z6tatallv+0x9a>
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <_Z6tatallv+0xa8>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b30      	cmp	r3, #48	; 0x30
 8001bb6:	d13e      	bne.n	8001c36 <_Z6tatallv+0x9a>
 8001bb8:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <_Z6tatallv+0xac>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b30      	cmp	r3, #48	; 0x30
 8001bbe:	d13a      	bne.n	8001c36 <_Z6tatallv+0x9a>
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <_Z6tatallv+0xb0>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b30      	cmp	r3, #48	; 0x30
 8001bc6:	d136      	bne.n	8001c36 <_Z6tatallv+0x9a>
 8001bc8:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <_Z6tatallv+0xb4>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b30      	cmp	r3, #48	; 0x30
 8001bce:	d132      	bne.n	8001c36 <_Z6tatallv+0x9a>
 8001bd0:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <_Z6tatallv+0xb8>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b30      	cmp	r3, #48	; 0x30
 8001bd6:	d12e      	bne.n	8001c36 <_Z6tatallv+0x9a>
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <_Z6tatallv+0xbc>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b30      	cmp	r3, #48	; 0x30
 8001bde:	d12a      	bne.n	8001c36 <_Z6tatallv+0x9a>

		 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2101      	movs	r1, #1
 8001be4:	481d      	ldr	r0, [pc, #116]	; (8001c5c <_Z6tatallv+0xc0>)
 8001be6:	f002 fa69 	bl	80040bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2102      	movs	r1, #2
 8001bee:	481b      	ldr	r0, [pc, #108]	; (8001c5c <_Z6tatallv+0xc0>)
 8001bf0:	f002 fa64 	bl	80040bc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bfa:	4819      	ldr	r0, [pc, #100]	; (8001c60 <_Z6tatallv+0xc4>)
 8001bfc:	f002 fa5e 	bl	80040bc <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c06:	4816      	ldr	r0, [pc, #88]	; (8001c60 <_Z6tatallv+0xc4>)
 8001c08:	f002 fa58 	bl	80040bc <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c12:	4813      	ldr	r0, [pc, #76]	; (8001c60 <_Z6tatallv+0xc4>)
 8001c14:	f002 fa52 	bl	80040bc <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	4811      	ldr	r0, [pc, #68]	; (8001c64 <_Z6tatallv+0xc8>)
 8001c1e:	f002 fa4d 	bl	80040bc <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2102      	movs	r1, #2
 8001c26:	480f      	ldr	r0, [pc, #60]	; (8001c64 <_Z6tatallv+0xc8>)
 8001c28:	f002 fa48 	bl	80040bc <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2101      	movs	r1, #1
 8001c30:	480c      	ldr	r0, [pc, #48]	; (8001c64 <_Z6tatallv+0xc8>)
 8001c32:	f002 fa43 	bl	80040bc <HAL_GPIO_WritePin>


	}

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000001 	.word	0x20000001
 8001c44:	20000002 	.word	0x20000002
 8001c48:	20000003 	.word	0x20000003
 8001c4c:	20000004 	.word	0x20000004
 8001c50:	20000005 	.word	0x20000005
 8001c54:	20000006 	.word	0x20000006
 8001c58:	20000007 	.word	0x20000007
 8001c5c:	40021800 	.word	0x40021800
 8001c60:	40021400 	.word	0x40021400
 8001c64:	40020400 	.word	0x40020400

08001c68 <_Z9runnormalv>:
void runnormal(){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
//	if ( (num[3]=='0') && (num[4]=='0') && (num[5]=='1')&& (num[6]=='0') && (num[7]=='0'))
		if ( ( (num5=='1') && (num6=='0') && (num7=='0')))
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <_Z9runnormalv+0x58>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b31      	cmp	r3, #49	; 0x31
 8001c72:	d122      	bne.n	8001cba <_Z9runnormalv+0x52>
 8001c74:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <_Z9runnormalv+0x5c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b30      	cmp	r3, #48	; 0x30
 8001c7a:	d11e      	bne.n	8001cba <_Z9runnormalv+0x52>
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <_Z9runnormalv+0x60>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b30      	cmp	r3, #48	; 0x30
 8001c82:	d11a      	bne.n	8001cba <_Z9runnormalv+0x52>
	{

        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8a:	4810      	ldr	r0, [pc, #64]	; (8001ccc <_Z9runnormalv+0x64>)
 8001c8c:	f002 fa16 	bl	80040bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c90:	2200      	movs	r2, #0
 8001c92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c96:	480d      	ldr	r0, [pc, #52]	; (8001ccc <_Z9runnormalv+0x64>)
 8001c98:	f002 fa10 	bl	80040bc <HAL_GPIO_WritePin>
//        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);


        if (x == true) {
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <_Z9runnormalv+0x68>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <_Z9runnormalv+0x48>
        	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2104      	movs	r1, #4
 8001ca8:	480a      	ldr	r0, [pc, #40]	; (8001cd4 <_Z9runnormalv+0x6c>)
 8001caa:	f002 fa07 	bl	80040bc <HAL_GPIO_WritePin>
        	      } else {
        	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
        	      }
				}
	}
 8001cae:	e004      	b.n	8001cba <_Z9runnormalv+0x52>
        	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2104      	movs	r1, #4
 8001cb4:	4807      	ldr	r0, [pc, #28]	; (8001cd4 <_Z9runnormalv+0x6c>)
 8001cb6:	f002 fa01 	bl	80040bc <HAL_GPIO_WritePin>
	}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000005 	.word	0x20000005
 8001cc4:	20000006 	.word	0x20000006
 8001cc8:	20000007 	.word	0x20000007
 8001ccc:	40021400 	.word	0x40021400
 8001cd0:	20000b36 	.word	0x20000b36
 8001cd4:	40020400 	.word	0x40020400

08001cd8 <_Z19runnormal_dangerousv>:



void runnormal_dangerous(){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
	if ( (num3=='1') &&(num4=='0') && (num5=='0') && (num6=='0') && (num7=='0'))
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <_Z19runnormal_dangerousv+0x68>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b31      	cmp	r3, #49	; 0x31
 8001ce2:	d12b      	bne.n	8001d3c <_Z19runnormal_dangerousv+0x64>
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <_Z19runnormal_dangerousv+0x6c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b30      	cmp	r3, #48	; 0x30
 8001cea:	d127      	bne.n	8001d3c <_Z19runnormal_dangerousv+0x64>
 8001cec:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <_Z19runnormal_dangerousv+0x70>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b30      	cmp	r3, #48	; 0x30
 8001cf2:	d123      	bne.n	8001d3c <_Z19runnormal_dangerousv+0x64>
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <_Z19runnormal_dangerousv+0x74>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b30      	cmp	r3, #48	; 0x30
 8001cfa:	d11f      	bne.n	8001d3c <_Z19runnormal_dangerousv+0x64>
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <_Z19runnormal_dangerousv+0x78>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b30      	cmp	r3, #48	; 0x30
 8001d02:	d11b      	bne.n	8001d3c <_Z19runnormal_dangerousv+0x64>
	{
//        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d0a:	4812      	ldr	r0, [pc, #72]	; (8001d54 <_Z19runnormal_dangerousv+0x7c>)
 8001d0c:	f002 f9d6 	bl	80040bc <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2104      	movs	r1, #4
 8001d14:	4810      	ldr	r0, [pc, #64]	; (8001d58 <_Z19runnormal_dangerousv+0x80>)
 8001d16:	f002 f9d1 	bl	80040bc <HAL_GPIO_WritePin>
//           x2 = !x2;
//         }

//        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);

        if (x == true) {
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <_Z19runnormal_dangerousv+0x84>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d106      	bne.n	8001d30 <_Z19runnormal_dangerousv+0x58>
               	        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8001d22:	2201      	movs	r2, #1
 8001d24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d28:	480a      	ldr	r0, [pc, #40]	; (8001d54 <_Z19runnormal_dangerousv+0x7c>)
 8001d2a:	f002 f9c7 	bl	80040bc <HAL_GPIO_WritePin>
               	      } else {
               	        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
               	      }
       	}
	}
 8001d2e:	e005      	b.n	8001d3c <_Z19runnormal_dangerousv+0x64>
               	        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8001d30:	2200      	movs	r2, #0
 8001d32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d36:	4807      	ldr	r0, [pc, #28]	; (8001d54 <_Z19runnormal_dangerousv+0x7c>)
 8001d38:	f002 f9c0 	bl	80040bc <HAL_GPIO_WritePin>
	}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000003 	.word	0x20000003
 8001d44:	20000004 	.word	0x20000004
 8001d48:	20000005 	.word	0x20000005
 8001d4c:	20000006 	.word	0x20000006
 8001d50:	20000007 	.word	0x20000007
 8001d54:	40021400 	.word	0x40021400
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	20000b36 	.word	0x20000b36

08001d60 <_Z17runnormal_warningv>:


void runnormal_warning(){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	if ( (num3=='1')&& (num4=='1') && (num5=='0') )
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <_Z17runnormal_warningv+0x44>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b31      	cmp	r3, #49	; 0x31
 8001d6a:	d118      	bne.n	8001d9e <_Z17runnormal_warningv+0x3e>
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <_Z17runnormal_warningv+0x48>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b31      	cmp	r3, #49	; 0x31
 8001d72:	d114      	bne.n	8001d9e <_Z17runnormal_warningv+0x3e>
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <_Z17runnormal_warningv+0x4c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b30      	cmp	r3, #48	; 0x30
 8001d7a:	d110      	bne.n	8001d9e <_Z17runnormal_warningv+0x3e>
	{
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d82:	480b      	ldr	r0, [pc, #44]	; (8001db0 <_Z17runnormal_warningv+0x50>)
 8001d84:	f002 f99a 	bl	80040bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d8e:	4808      	ldr	r0, [pc, #32]	; (8001db0 <_Z17runnormal_warningv+0x50>)
 8001d90:	f002 f994 	bl	80040bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2104      	movs	r1, #4
 8001d98:	4806      	ldr	r0, [pc, #24]	; (8001db4 <_Z17runnormal_warningv+0x54>)
 8001d9a:	f002 f98f 	bl	80040bc <HAL_GPIO_WritePin>
	}
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000003 	.word	0x20000003
 8001da8:	20000004 	.word	0x20000004
 8001dac:	20000005 	.word	0x20000005
 8001db0:	40021400 	.word	0x40021400
 8001db4:	40020400 	.word	0x40020400

08001db8 <_Z13nangha_normalv>:

void nangha_normal(){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	if ( ((num3=='0') && (num4=='0') && (num5=='1') && (num6=='1') && (num7=='0')) || ((num3=='0') &&(num4=='0') && (num5=='1') && (num6=='0') && (num7=='1')))
 8001dbc:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <_Z13nangha_normalv+0x90>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b30      	cmp	r3, #48	; 0x30
 8001dc2:	d10f      	bne.n	8001de4 <_Z13nangha_normalv+0x2c>
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <_Z13nangha_normalv+0x94>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b30      	cmp	r3, #48	; 0x30
 8001dca:	d10b      	bne.n	8001de4 <_Z13nangha_normalv+0x2c>
 8001dcc:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <_Z13nangha_normalv+0x98>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b31      	cmp	r3, #49	; 0x31
 8001dd2:	d107      	bne.n	8001de4 <_Z13nangha_normalv+0x2c>
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <_Z13nangha_normalv+0x9c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b31      	cmp	r3, #49	; 0x31
 8001dda:	d103      	bne.n	8001de4 <_Z13nangha_normalv+0x2c>
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <_Z13nangha_normalv+0xa0>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b30      	cmp	r3, #48	; 0x30
 8001de2:	d013      	beq.n	8001e0c <_Z13nangha_normalv+0x54>
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <_Z13nangha_normalv+0x90>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b30      	cmp	r3, #48	; 0x30
 8001dea:	d12b      	bne.n	8001e44 <_Z13nangha_normalv+0x8c>
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <_Z13nangha_normalv+0x94>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b30      	cmp	r3, #48	; 0x30
 8001df2:	d127      	bne.n	8001e44 <_Z13nangha_normalv+0x8c>
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <_Z13nangha_normalv+0x98>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b31      	cmp	r3, #49	; 0x31
 8001dfa:	d123      	bne.n	8001e44 <_Z13nangha_normalv+0x8c>
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <_Z13nangha_normalv+0x9c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b30      	cmp	r3, #48	; 0x30
 8001e02:	d11f      	bne.n	8001e44 <_Z13nangha_normalv+0x8c>
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <_Z13nangha_normalv+0xa0>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b31      	cmp	r3, #49	; 0x31
 8001e0a:	d11b      	bne.n	8001e44 <_Z13nangha_normalv+0x8c>
	{
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e12:	4812      	ldr	r0, [pc, #72]	; (8001e5c <_Z13nangha_normalv+0xa4>)
 8001e14:	f002 f952 	bl	80040bc <HAL_GPIO_WritePin>
//        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	4810      	ldr	r0, [pc, #64]	; (8001e60 <_Z13nangha_normalv+0xa8>)
 8001e1e:	f002 f94d 	bl	80040bc <HAL_GPIO_WritePin>

        if (x == true) {
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <_Z13nangha_normalv+0xac>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d106      	bne.n	8001e38 <_Z13nangha_normalv+0x80>
                       	        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e30:	480a      	ldr	r0, [pc, #40]	; (8001e5c <_Z13nangha_normalv+0xa4>)
 8001e32:	f002 f943 	bl	80040bc <HAL_GPIO_WritePin>
                       	      } else {
                       	        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
                       	      }
               	}
	}
 8001e36:	e005      	b.n	8001e44 <_Z13nangha_normalv+0x8c>
                       	        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e3e:	4807      	ldr	r0, [pc, #28]	; (8001e5c <_Z13nangha_normalv+0xa4>)
 8001e40:	f002 f93c 	bl	80040bc <HAL_GPIO_WritePin>
	}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000003 	.word	0x20000003
 8001e4c:	20000004 	.word	0x20000004
 8001e50:	20000005 	.word	0x20000005
 8001e54:	20000006 	.word	0x20000006
 8001e58:	20000007 	.word	0x20000007
 8001e5c:	40021400 	.word	0x40021400
 8001e60:	40020400 	.word	0x40020400
 8001e64:	20000b36 	.word	0x20000b36

08001e68 <_Z14nangha_warningv>:



void nangha_warning(){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	if ( ((num3=='1')&& (num4=='1') && (num5=='0')))
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <_Z14nangha_warningv+0x44>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b31      	cmp	r3, #49	; 0x31
 8001e72:	d118      	bne.n	8001ea6 <_Z14nangha_warningv+0x3e>
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <_Z14nangha_warningv+0x48>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b31      	cmp	r3, #49	; 0x31
 8001e7a:	d114      	bne.n	8001ea6 <_Z14nangha_warningv+0x3e>
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <_Z14nangha_warningv+0x4c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b30      	cmp	r3, #48	; 0x30
 8001e82:	d110      	bne.n	8001ea6 <_Z14nangha_warningv+0x3e>
	{
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8001e84:	2201      	movs	r2, #1
 8001e86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e8a:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <_Z14nangha_warningv+0x50>)
 8001e8c:	f002 f916 	bl	80040bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 8001e90:	2201      	movs	r2, #1
 8001e92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e96:	4808      	ldr	r0, [pc, #32]	; (8001eb8 <_Z14nangha_warningv+0x50>)
 8001e98:	f002 f910 	bl	80040bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	4806      	ldr	r0, [pc, #24]	; (8001ebc <_Z14nangha_warningv+0x54>)
 8001ea2:	f002 f90b 	bl	80040bc <HAL_GPIO_WritePin>
	}
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000003 	.word	0x20000003
 8001eb0:	20000004 	.word	0x20000004
 8001eb4:	20000005 	.word	0x20000005
 8001eb8:	40021400 	.word	0x40021400
 8001ebc:	40020400 	.word	0x40020400

08001ec0 <_Z16nangha_dangerousv>:

void nangha_dangerous(){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	if ( ((num3=='1')&& (num4=='0') && (num5=='0')&& (num6=='1') && (num7=='0')) || ((num3=='1') && (num4=='0') && (num5=='0') &&(num6=='0') && (num7=='1')))
 8001ec4:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <_Z16nangha_dangerousv+0x90>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b31      	cmp	r3, #49	; 0x31
 8001eca:	d10f      	bne.n	8001eec <_Z16nangha_dangerousv+0x2c>
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <_Z16nangha_dangerousv+0x94>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b30      	cmp	r3, #48	; 0x30
 8001ed2:	d10b      	bne.n	8001eec <_Z16nangha_dangerousv+0x2c>
 8001ed4:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <_Z16nangha_dangerousv+0x98>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b30      	cmp	r3, #48	; 0x30
 8001eda:	d107      	bne.n	8001eec <_Z16nangha_dangerousv+0x2c>
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <_Z16nangha_dangerousv+0x9c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b31      	cmp	r3, #49	; 0x31
 8001ee2:	d103      	bne.n	8001eec <_Z16nangha_dangerousv+0x2c>
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <_Z16nangha_dangerousv+0xa0>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b30      	cmp	r3, #48	; 0x30
 8001eea:	d013      	beq.n	8001f14 <_Z16nangha_dangerousv+0x54>
 8001eec:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <_Z16nangha_dangerousv+0x90>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b31      	cmp	r3, #49	; 0x31
 8001ef2:	d12b      	bne.n	8001f4c <_Z16nangha_dangerousv+0x8c>
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <_Z16nangha_dangerousv+0x94>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b30      	cmp	r3, #48	; 0x30
 8001efa:	d127      	bne.n	8001f4c <_Z16nangha_dangerousv+0x8c>
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <_Z16nangha_dangerousv+0x98>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b30      	cmp	r3, #48	; 0x30
 8001f02:	d123      	bne.n	8001f4c <_Z16nangha_dangerousv+0x8c>
 8001f04:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <_Z16nangha_dangerousv+0x9c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b30      	cmp	r3, #48	; 0x30
 8001f0a:	d11f      	bne.n	8001f4c <_Z16nangha_dangerousv+0x8c>
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <_Z16nangha_dangerousv+0xa0>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b31      	cmp	r3, #49	; 0x31
 8001f12:	d11b      	bne.n	8001f4c <_Z16nangha_dangerousv+0x8c>
	{
//        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f1a:	4812      	ldr	r0, [pc, #72]	; (8001f64 <_Z16nangha_dangerousv+0xa4>)
 8001f1c:	f002 f8ce 	bl	80040bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2104      	movs	r1, #4
 8001f24:	4810      	ldr	r0, [pc, #64]	; (8001f68 <_Z16nangha_dangerousv+0xa8>)
 8001f26:	f002 f8c9 	bl	80040bc <HAL_GPIO_WritePin>
        if (x == true) {
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <_Z16nangha_dangerousv+0xac>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d106      	bne.n	8001f40 <_Z16nangha_dangerousv+0x80>
               	        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8001f32:	2201      	movs	r2, #1
 8001f34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f38:	480a      	ldr	r0, [pc, #40]	; (8001f64 <_Z16nangha_dangerousv+0xa4>)
 8001f3a:	f002 f8bf 	bl	80040bc <HAL_GPIO_WritePin>
               	      } else {
               	        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
               	      }

	}
}
 8001f3e:	e005      	b.n	8001f4c <_Z16nangha_dangerousv+0x8c>
               	        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f40:	2200      	movs	r2, #0
 8001f42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f46:	4807      	ldr	r0, [pc, #28]	; (8001f64 <_Z16nangha_dangerousv+0xa4>)
 8001f48:	f002 f8b8 	bl	80040bc <HAL_GPIO_WritePin>
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000003 	.word	0x20000003
 8001f54:	20000004 	.word	0x20000004
 8001f58:	20000005 	.word	0x20000005
 8001f5c:	20000006 	.word	0x20000006
 8001f60:	20000007 	.word	0x20000007
 8001f64:	40021400 	.word	0x40021400
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	20000b36 	.word	0x20000b36

08001f70 <_Z11battatloak2v>:



void battatloak2() {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  if (num0 == '1') {
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <_Z11battatloak2v+0x2c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b31      	cmp	r3, #49	; 0x31
 8001f7a:	d104      	bne.n	8001f86 <_Z11battatloak2v+0x16>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2101      	movs	r1, #1
 8001f80:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <_Z11battatloak2v+0x30>)
 8001f82:	f002 f89b 	bl	80040bc <HAL_GPIO_WritePin>
  }
  if (num0 == '0') {
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <_Z11battatloak2v+0x2c>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b30      	cmp	r3, #48	; 0x30
 8001f8c:	d104      	bne.n	8001f98 <_Z11battatloak2v+0x28>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2101      	movs	r1, #1
 8001f92:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <_Z11battatloak2v+0x30>)
 8001f94:	f002 f892 	bl	80040bc <HAL_GPIO_WritePin>
  }
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	40021800 	.word	0x40021800

08001fa4 <_Z11battatloak1v>:

void battatloak1() {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  if (num1 == '1') {
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <_Z11battatloak1v+0x2c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b31      	cmp	r3, #49	; 0x31
 8001fae:	d104      	bne.n	8001fba <_Z11battatloak1v+0x16>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	4807      	ldr	r0, [pc, #28]	; (8001fd4 <_Z11battatloak1v+0x30>)
 8001fb6:	f002 f881 	bl	80040bc <HAL_GPIO_WritePin>
  }
  if (num1 == '0') {
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <_Z11battatloak1v+0x2c>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b30      	cmp	r3, #48	; 0x30
 8001fc0:	d104      	bne.n	8001fcc <_Z11battatloak1v+0x28>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <_Z11battatloak1v+0x30>)
 8001fc8:	f002 f878 	bl	80040bc <HAL_GPIO_WritePin>
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000001 	.word	0x20000001
 8001fd4:	40021800 	.word	0x40021800

08001fd8 <_Z11battatloak3v>:

void battatloak3() {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  if (num2 == '1') {
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <_Z11battatloak3v+0x30>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b31      	cmp	r3, #49	; 0x31
 8001fe2:	d105      	bne.n	8001ff0 <_Z11battatloak3v+0x18>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fea:	4808      	ldr	r0, [pc, #32]	; (800200c <_Z11battatloak3v+0x34>)
 8001fec:	f002 f866 	bl	80040bc <HAL_GPIO_WritePin>
  }
  if (num2 == '0') {
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <_Z11battatloak3v+0x30>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b30      	cmp	r3, #48	; 0x30
 8001ff6:	d105      	bne.n	8002004 <_Z11battatloak3v+0x2c>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ffe:	4803      	ldr	r0, [pc, #12]	; (800200c <_Z11battatloak3v+0x34>)
 8002000:	f002 f85c 	bl	80040bc <HAL_GPIO_WritePin>
  }
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000002 	.word	0x20000002
 800200c:	40021400 	.word	0x40021400

08002010 <_Z15battatxilanhr34v>:
//  if (num[5] == '0') {
//    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
//  }
//}

void battatxilanhr34() {
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
  if ((num6 == '1') && (num7 == '0') && (set34 == false)) {
 8002016:	4b20      	ldr	r3, [pc, #128]	; (8002098 <_Z15battatxilanhr34v+0x88>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b31      	cmp	r3, #49	; 0x31
 800201c:	d10f      	bne.n	800203e <_Z15battatxilanhr34v+0x2e>
 800201e:	4b1f      	ldr	r3, [pc, #124]	; (800209c <_Z15battatxilanhr34v+0x8c>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b30      	cmp	r3, #48	; 0x30
 8002024:	d10b      	bne.n	800203e <_Z15battatxilanhr34v+0x2e>
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <_Z15battatxilanhr34v+0x90>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d107      	bne.n	800203e <_Z15battatxilanhr34v+0x2e>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800202e:	2201      	movs	r2, #1
 8002030:	2102      	movs	r1, #2
 8002032:	481c      	ldr	r0, [pc, #112]	; (80020a4 <_Z15battatxilanhr34v+0x94>)
 8002034:	f002 f842 	bl	80040bc <HAL_GPIO_WritePin>
    set34 = true;
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <_Z15battatxilanhr34v+0x90>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
  }
  if (num6 == '0') {
 800203e:	4b16      	ldr	r3, [pc, #88]	; (8002098 <_Z15battatxilanhr34v+0x88>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b30      	cmp	r3, #48	; 0x30
 8002044:	d104      	bne.n	8002050 <_Z15battatxilanhr34v+0x40>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002046:	2200      	movs	r2, #0
 8002048:	2102      	movs	r1, #2
 800204a:	4816      	ldr	r0, [pc, #88]	; (80020a4 <_Z15battatxilanhr34v+0x94>)
 800204c:	f002 f836 	bl	80040bc <HAL_GPIO_WritePin>
  }

  if ((num6 == '0') && (num7 == '0') && (set34 == true) ){
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <_Z15battatxilanhr34v+0x88>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b30      	cmp	r3, #48	; 0x30
 8002056:	d11a      	bne.n	800208e <_Z15battatxilanhr34v+0x7e>
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <_Z15battatxilanhr34v+0x8c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b30      	cmp	r3, #48	; 0x30
 800205e:	d116      	bne.n	800208e <_Z15battatxilanhr34v+0x7e>
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <_Z15battatxilanhr34v+0x90>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d112      	bne.n	800208e <_Z15battatxilanhr34v+0x7e>
    GPIO_PinState status1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8002068:	2102      	movs	r1, #2
 800206a:	480e      	ldr	r0, [pc, #56]	; (80020a4 <_Z15battatxilanhr34v+0x94>)
 800206c:	f002 f80e 	bl	800408c <HAL_GPIO_ReadPin>
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
    if (status1 == GPIO_PIN_RESET) {
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <_Z15battatxilanhr34v+0x7e>
      done_msg.data = true;
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <_Z15battatxilanhr34v+0x98>)
 800207c:	2201      	movs	r2, #1
 800207e:	711a      	strb	r2, [r3, #4]
      done_nangha.publish(&done_msg);
 8002080:	4909      	ldr	r1, [pc, #36]	; (80020a8 <_Z15battatxilanhr34v+0x98>)
 8002082:	480a      	ldr	r0, [pc, #40]	; (80020ac <_Z15battatxilanhr34v+0x9c>)
 8002084:	f7ff fa3f 	bl	8001506 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
      set34 = false;
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <_Z15battatxilanhr34v+0x90>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000006 	.word	0x20000006
 800209c:	20000007 	.word	0x20000007
 80020a0:	20000b34 	.word	0x20000b34
 80020a4:	40020400 	.word	0x40020400
 80020a8:	20000adc 	.word	0x20000adc
 80020ac:	20000ae4 	.word	0x20000ae4

080020b0 <_Z15battatxilanhr12v>:

void battatxilanhr12() {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
  if ((num7 == '1') && (num6 == '0') && (set12 == false)) {
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <_Z15battatxilanhr12v+0x88>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b31      	cmp	r3, #49	; 0x31
 80020bc:	d10f      	bne.n	80020de <_Z15battatxilanhr12v+0x2e>
 80020be:	4b1f      	ldr	r3, [pc, #124]	; (800213c <_Z15battatxilanhr12v+0x8c>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b30      	cmp	r3, #48	; 0x30
 80020c4:	d10b      	bne.n	80020de <_Z15battatxilanhr12v+0x2e>
 80020c6:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <_Z15battatxilanhr12v+0x90>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d107      	bne.n	80020de <_Z15battatxilanhr12v+0x2e>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80020ce:	2201      	movs	r2, #1
 80020d0:	2101      	movs	r1, #1
 80020d2:	481c      	ldr	r0, [pc, #112]	; (8002144 <_Z15battatxilanhr12v+0x94>)
 80020d4:	f001 fff2 	bl	80040bc <HAL_GPIO_WritePin>
    set12 = true;
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <_Z15battatxilanhr12v+0x90>)
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
  }
  if (num7 == '0') {
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <_Z15battatxilanhr12v+0x88>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b30      	cmp	r3, #48	; 0x30
 80020e4:	d104      	bne.n	80020f0 <_Z15battatxilanhr12v+0x40>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2101      	movs	r1, #1
 80020ea:	4816      	ldr	r0, [pc, #88]	; (8002144 <_Z15battatxilanhr12v+0x94>)
 80020ec:	f001 ffe6 	bl	80040bc <HAL_GPIO_WritePin>
  }

  if ((num7 == '0') && (num6 == '0') && (set12 == true)) {
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <_Z15battatxilanhr12v+0x88>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b30      	cmp	r3, #48	; 0x30
 80020f6:	d11a      	bne.n	800212e <_Z15battatxilanhr12v+0x7e>
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <_Z15battatxilanhr12v+0x8c>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b30      	cmp	r3, #48	; 0x30
 80020fe:	d116      	bne.n	800212e <_Z15battatxilanhr12v+0x7e>
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <_Z15battatxilanhr12v+0x90>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d112      	bne.n	800212e <_Z15battatxilanhr12v+0x7e>
    GPIO_PinState status2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8002108:	2101      	movs	r1, #1
 800210a:	480e      	ldr	r0, [pc, #56]	; (8002144 <_Z15battatxilanhr12v+0x94>)
 800210c:	f001 ffbe 	bl	800408c <HAL_GPIO_ReadPin>
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
    if (status2 == GPIO_PIN_RESET) {
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <_Z15battatxilanhr12v+0x7e>
      done_msg.data = true;
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <_Z15battatxilanhr12v+0x98>)
 800211c:	2201      	movs	r2, #1
 800211e:	711a      	strb	r2, [r3, #4]
      done_nangha.publish(&done_msg);
 8002120:	4909      	ldr	r1, [pc, #36]	; (8002148 <_Z15battatxilanhr12v+0x98>)
 8002122:	480a      	ldr	r0, [pc, #40]	; (800214c <_Z15battatxilanhr12v+0x9c>)
 8002124:	f7ff f9ef 	bl	8001506 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
      set12 = false;
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <_Z15battatxilanhr12v+0x90>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000007 	.word	0x20000007
 800213c:	20000006 	.word	0x20000006
 8002140:	20000b35 	.word	0x20000b35
 8002144:	40020400 	.word	0x40020400
 8002148:	20000adc 	.word	0x20000adc
 800214c:	20000ae4 	.word	0x20000ae4

08002150 <_Z12changeXStatev>:

void changeXState() {
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
  unsigned long currentMillisX = HAL_GetTick();
 8002156:	f001 f8b9 	bl	80032cc <HAL_GetTick>
 800215a:	6078      	str	r0, [r7, #4]
  if (currentMillisX - previousMillisX >= interval) {
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <_Z12changeXStatev+0x38>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002168:	d309      	bcc.n	800217e <_Z12changeXStatev+0x2e>
    previousMillisX = currentMillisX;
 800216a:	4a07      	ldr	r2, [pc, #28]	; (8002188 <_Z12changeXStatev+0x38>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6013      	str	r3, [r2, #0]
    x = !x;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <_Z12changeXStatev+0x3c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	f083 0301 	eor.w	r3, r3, #1
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <_Z12changeXStatev+0x3c>)
 800217c:	701a      	strb	r2, [r3, #0]
//    battatledb();
  }
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000b38 	.word	0x20000b38
 800218c:	20000b36 	.word	0x20000b36

08002190 <_Z13changeXState2v>:


void changeXState2() {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
	  GPIO_PinState status = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0);
 8002196:	2101      	movs	r1, #1
 8002198:	4819      	ldr	r0, [pc, #100]	; (8002200 <_Z13changeXState2v+0x70>)
 800219a:	f001 ff77 	bl	800408c <HAL_GPIO_ReadPin>
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]

  unsigned long currentMillisX2 = HAL_GetTick();
 80021a2:	f001 f893 	bl	80032cc <HAL_GetTick>
 80021a6:	6038      	str	r0, [r7, #0]
  if (currentMillisX2 - previousMillisX2 >= interval2) {
 80021a8:	4b16      	ldr	r3, [pc, #88]	; (8002204 <_Z13changeXState2v+0x74>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021b4:	d320      	bcc.n	80021f8 <_Z13changeXState2v+0x68>
    previousMillisX2 = currentMillisX2;
 80021b6:	4a13      	ldr	r2, [pc, #76]	; (8002204 <_Z13changeXState2v+0x74>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6013      	str	r3, [r2, #0]
    x2 = !x2;
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <_Z13changeXState2v+0x78>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	f083 0301 	eor.w	r3, r3, #1
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <_Z13changeXState2v+0x78>)
 80021c8:	701a      	strb	r2, [r3, #0]
//    battatledb();
//    docnutnhan();

    if (status == GPIO_PIN_SET) {
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d106      	bne.n	80021de <_Z13changeXState2v+0x4e>
        active_msg.data = false;
 80021d0:	4b0e      	ldr	r3, [pc, #56]	; (800220c <_Z13changeXState2v+0x7c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	711a      	strb	r2, [r3, #4]
        nut_new = false;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <_Z13changeXState2v+0x80>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
 80021dc:	e005      	b.n	80021ea <_Z13changeXState2v+0x5a>
      } else {
        active_msg.data = true;
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <_Z13changeXState2v+0x7c>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	711a      	strb	r2, [r3, #4]
        nut_new = true;
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <_Z13changeXState2v+0x80>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]
      }

      // Bạn có thể chú ý đến việc di chuyển HAL_Delay(20) lên trước if (initial == false)
      HAL_Delay(20);
 80021ea:	2014      	movs	r0, #20
 80021ec:	f001 f87a 	bl	80032e4 <HAL_Delay>
      status_active.publish(&active_msg);
 80021f0:	4906      	ldr	r1, [pc, #24]	; (800220c <_Z13changeXState2v+0x7c>)
 80021f2:	4808      	ldr	r0, [pc, #32]	; (8002214 <_Z13changeXState2v+0x84>)
 80021f4:	f7ff f987 	bl	8001506 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

  }
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	20000b3c 	.word	0x20000b3c
 8002208:	20000b40 	.word	0x20000b40
 800220c:	20000af8 	.word	0x20000af8
 8002210:	20000b41 	.word	0x20000b41
 8002214:	20000b00 	.word	0x20000b00

08002218 <setup>:
////  if (nut_new != nut_zero) {
////    status_active.publish(&active_msg);
////    nut_zero = nut_new;
////  }
//}
void setup(void) {
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  nh.initNode();
 800221c:	4808      	ldr	r0, [pc, #32]	; (8002240 <setup+0x28>)
 800221e:	f000 f8cd 	bl	80023bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(sub);
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <setup+0x2c>)
 8002224:	4806      	ldr	r0, [pc, #24]	; (8002240 <setup+0x28>)
 8002226:	f000 f8e6 	bl	80023f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
  nh.advertise(done_nangha);
 800222a:	4907      	ldr	r1, [pc, #28]	; (8002248 <setup+0x30>)
 800222c:	4804      	ldr	r0, [pc, #16]	; (8002240 <setup+0x28>)
 800222e:	f000 f90d 	bl	800244c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(status_active);
 8002232:	4906      	ldr	r1, [pc, #24]	; (800224c <setup+0x34>)
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <setup+0x28>)
 8002236:	f000 f909 	bl	800244c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
//  nh.advertise(chatter);



}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200001a0 	.word	0x200001a0
 8002244:	20000b44 	.word	0x20000b44
 8002248:	20000ae4 	.word	0x20000ae4
 800224c:	20000b00 	.word	0x20000b00

08002250 <loop>:

void loop(void) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
ros::Subscriber<std_msgs::String> sub("number", xulichuoi);
 8002256:	1d38      	adds	r0, r7, #4
 8002258:	2301      	movs	r3, #1
 800225a:	4a13      	ldr	r2, [pc, #76]	; (80022a8 <loop+0x58>)
 800225c:	4913      	ldr	r1, [pc, #76]	; (80022ac <loop+0x5c>)
 800225e:	f000 f889 	bl	8002374 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>
//	  chatter.publish(&str_msg);
//  }

//  docnutnhan();

  changeXState();
 8002262:	f7ff ff75 	bl	8002150 <_Z12changeXStatev>
  changeXState2();
 8002266:	f7ff ff93 	bl	8002190 <_Z13changeXState2v>
//  changeXState2();
//    docnutnhan();


  tatall();
 800226a:	f7ff fc97 	bl	8001b9c <_Z6tatallv>
  battatloak1();
 800226e:	f7ff fe99 	bl	8001fa4 <_Z11battatloak1v>
  battatloak2();
 8002272:	f7ff fe7d 	bl	8001f70 <_Z11battatloak2v>
  battatloak3();
 8002276:	f7ff feaf 	bl	8001fd8 <_Z11battatloak3v>

//  battatledr();
//  battatledg();
//  battatledb();

  runnormal();
 800227a:	f7ff fcf5 	bl	8001c68 <_Z9runnormalv>
  runnormal_warning();
 800227e:	f7ff fd6f 	bl	8001d60 <_Z17runnormal_warningv>
  runnormal_dangerous();
 8002282:	f7ff fd29 	bl	8001cd8 <_Z19runnormal_dangerousv>

  nangha_normal();
 8002286:	f7ff fd97 	bl	8001db8 <_Z13nangha_normalv>
  nangha_dangerous();
 800228a:	f7ff fe19 	bl	8001ec0 <_Z16nangha_dangerousv>
  nangha_warning();
 800228e:	f7ff fdeb 	bl	8001e68 <_Z14nangha_warningv>

  battatxilanhr12();
 8002292:	f7ff ff0d 	bl	80020b0 <_Z15battatxilanhr12v>
  battatxilanhr34();
 8002296:	f7ff febb 	bl	8002010 <_Z15battatxilanhr34v>


  nh.spinOnce();
 800229a:	4805      	ldr	r0, [pc, #20]	; (80022b0 <loop+0x60>)
 800229c:	f000 f906 	bl	80024ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
//  HAL_Delay(50);
}
 80022a0:	bf00      	nop
 80022a2:	3720      	adds	r7, #32
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	08001afd 	.word	0x08001afd
 80022ac:	080062e8 	.word	0x080062e8
 80022b0:	200001a0 	.word	0x200001a0

080022b4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d80d      	bhi.n	80022e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	fa22 f103 	lsr.w	r1, r2, r3
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	b2ca      	uxtb	r2, r1
 80022da:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3301      	adds	r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	e7ee      	b.n	80022c2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d811      	bhi.n	800232e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6839      	ldr	r1, [r7, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	440a      	add	r2, r1
 8002314:	7812      	ldrb	r2, [r2, #0]
 8002316:	4611      	mov	r1, r2
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	00d2      	lsls	r2, r2, #3
 800231c:	fa01 f202 	lsl.w	r2, r1, r2
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3301      	adds	r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e7ea      	b.n	8002304 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
  }
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	080063d0 	.word	0x080063d0

08002374 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ffe5 	bl	8002354 <_ZN3ros11Subscriber_C1Ev>
 800238a:	4a0b      	ldr	r2, [pc, #44]	; (80023b8 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei+0x44>)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	330c      	adds	r3, #12
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff f9ff 	bl	8001798 <_ZN8std_msgs6StringC1Ev>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	615a      	str	r2, [r3, #20]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	609a      	str	r2, [r3, #8]
  };
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	08006374 	.word	0x08006374

080023bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3304      	adds	r3, #4
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff f8eb 	bl	80015a4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80023f6:	b480      	push	{r7}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b18      	cmp	r3, #24
 8002408:	dc19      	bgt.n	800243e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10d      	bne.n	8002436 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002422:	6839      	ldr	r1, [r7, #0]
 8002424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	605a      	str	r2, [r3, #4]
        return true;
 8002432:	2301      	movs	r3, #1
 8002434:	e004      	b.n	8002440 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3301      	adds	r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e7e2      	b.n	8002404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 800243e:	2300      	movs	r3, #0
  }
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b18      	cmp	r3, #24
 800245e:	dc1e      	bgt.n	800249e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d111      	bne.n	8002496 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	60da      	str	r2, [r3, #12]
        return true;
 8002492:	2301      	movs	r3, #1
 8002494:	e004      	b.n	80024a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3301      	adds	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e7dd      	b.n	800245a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800249e:	2300      	movs	r3, #0
  }
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3304      	adds	r3, #4
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff f961 	bl	8001780 <_ZN13STM32Hardware4timeEv>
 80024be:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d903      	bls.n	80024da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d009      	beq.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d903      	bls.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d014      	beq.n	800252c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3304      	adds	r3, #4
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff f93a 	bl	8001780 <_ZN13STM32Hardware4timeEv>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad2      	subs	r2, r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002518:	429a      	cmp	r2, r3
 800251a:	bf8c      	ite	hi
 800251c:	2301      	movhi	r3, #1
 800251e:	2300      	movls	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002526:	f06f 0301 	mvn.w	r3, #1
 800252a:	e194      	b.n	8002856 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3304      	adds	r3, #4
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff f853 	bl	80015dc <_ZN13STM32Hardware4readEv>
 8002536:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f2c0 8174 	blt.w	8002828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	441a      	add	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002556:	2b07      	cmp	r3, #7
 8002558:	d11e      	bne.n	8002598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002560:	1c59      	adds	r1, r3, #1
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	b2d1      	uxtb	r1, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	4413      	add	r3, r2
 8002570:	460a      	mov	r2, r1
 8002572:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800257c:	1e5a      	subs	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1b4      	bne.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2208      	movs	r2, #8
 8002592:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002596:	e7af      	b.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d128      	bne.n	80025f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2bff      	cmp	r3, #255	; 0xff
 80025a6:	d10d      	bne.n	80025c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f103 0214 	add.w	r2, r3, #20
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80025c2:	e799      	b.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3304      	adds	r3, #4
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff f8d9 	bl	8001780 <_ZN13STM32Hardware4timeEv>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	bf8c      	ite	hi
 80025dc:	2301      	movhi	r3, #1
 80025de:	2300      	movls	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d088      	beq.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80025ee:	f06f 0301 	mvn.w	r3, #1
 80025f2:	e130      	b.n	8002856 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d118      	bne.n	8002630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2bfe      	cmp	r3, #254	; 0xfe
 8002602:	d107      	bne.n	8002614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002612:	e771      	b.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002622:	2b00      	cmp	r3, #0
 8002624:	f47f af68 	bne.w	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f918 	bl	800285e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800262e:	e763      	b.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002636:	2b02      	cmp	r3, #2
 8002638:	d113      	bne.n	8002662 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002660:	e74a      	b.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002668:	2b03      	cmp	r3, #3
 800266a:	d110      	bne.n	800268e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	441a      	add	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800268c:	e734      	b.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002694:	2b04      	cmp	r3, #4
 8002696:	d116      	bne.n	80026c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800269e:	425a      	negs	r2, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	bf58      	it	pl
 80026a6:	4253      	negpl	r3, r2
 80026a8:	2bff      	cmp	r3, #255	; 0xff
 80026aa:	d107      	bne.n	80026bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80026ba:	e71d      	b.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80026c4:	e718      	b.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80026cc:	2b05      	cmp	r3, #5
 80026ce:	d10f      	bne.n	80026f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80026ee:	e703      	b.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80026f6:	2b06      	cmp	r3, #6
 80026f8:	d117      	bne.n	800272a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	441a      	add	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2207      	movs	r2, #7
 8002710:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800271a:	2b00      	cmp	r3, #0
 800271c:	f47f aeec 	bne.w	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2208      	movs	r2, #8
 8002724:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002728:	e6e6      	b.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002730:	2b08      	cmp	r3, #8
 8002732:	f47f aee1 	bne.w	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002744:	425a      	negs	r2, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	bf58      	it	pl
 800274c:	4253      	negpl	r3, r2
 800274e:	2bff      	cmp	r3, #255	; 0xff
 8002750:	f47f aed2 	bne.w	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d110      	bne.n	8002780 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f87d 	bl	800285e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f898 	bl	800289a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
 800277e:	e06a      	b.n	8002856 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002786:	2b0a      	cmp	r3, #10
 8002788:	d107      	bne.n	800279a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002790:	4619      	mov	r1, r3
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f960 	bl	8002a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8002798:	e6ae      	b.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80027a0:	2b06      	cmp	r3, #6
 80027a2:	d10e      	bne.n	80027c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80027b0:	4619      	mov	r1, r3
 80027b2:	4610      	mov	r0, r2
 80027b4:	f7fe fd03 	bl	80011be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80027c0:	e69a      	b.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80027c8:	2b0b      	cmp	r3, #11
 80027ca:	d104      	bne.n	80027d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80027d4:	e690      	b.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80027dc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80027e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f43f ae84 	beq.w	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80027f6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002800:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800280a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8002822:	4611      	mov	r1, r2
 8002824:	4798      	blx	r3
    while (true)
 8002826:	e667      	b.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8002828:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00f      	beq.n	8002854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002842:	4293      	cmp	r3, r2
 8002844:	d906      	bls.n	8002854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f809 	bl	800285e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8002854:	2300      	movs	r3, #0
  }
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800285e:	b580      	push	{r7, lr}
 8002860:	b086      	sub	sp, #24
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe f804 	bl	8000878 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f107 020c 	add.w	r2, r7, #12
 800287a:	210a      	movs	r1, #10
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
    rt_time = hardware_.time();
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3304      	adds	r3, #4
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe ff7b 	bl	8001780 <_ZN13STM32Hardware4timeEv>
 800288a:	4602      	mov	r2, r0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 800289a:	b590      	push	{r4, r7, lr}
 800289c:	b08b      	sub	sp, #44	; 0x2c
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80028a2:	f107 030c 	add.w	r3, r7, #12
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe f8d6 	bl	8000a58 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	2b18      	cmp	r3, #24
 80028b4:	dc63      	bgt.n	800297e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d056      	beq.n	8002976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	6859      	ldr	r1, [r3, #4]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3308      	adds	r3, #8
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4608      	mov	r0, r1
 8002916:	4798      	blx	r3
 8002918:	4603      	mov	r3, r0
 800291a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	330c      	adds	r3, #12
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4608      	mov	r0, r1
 8002944:	4798      	blx	r3
 8002946:	4603      	mov	r3, r0
 8002948:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800294a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800294e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681c      	ldr	r4, [r3, #0]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe fde2 	bl	800152e <_ZN3ros9Publisher15getEndpointTypeEv>
 800296a:	4601      	mov	r1, r0
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	461a      	mov	r2, r3
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	3301      	adds	r3, #1
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	e798      	b.n	80028b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	2b18      	cmp	r3, #24
 8002986:	dc5f      	bgt.n	8002a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d053      	beq.n	8002a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299c:	f202 2222 	addw	r2, r2, #546	; 0x222
 80029a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ae:	f202 2222 	addw	r2, r2, #546	; 0x222
 80029b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029be:	f202 2222 	addw	r2, r2, #546	; 0x222
 80029c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ca:	f202 2222 	addw	r2, r2, #546	; 0x222
 80029ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3308      	adds	r3, #8
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4608      	mov	r0, r1
 80029da:	4798      	blx	r3
 80029dc:	4603      	mov	r3, r0
 80029de:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80029e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80029f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	330c      	adds	r3, #12
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4608      	mov	r0, r1
 8002a00:	4798      	blx	r3
 8002a02:	4603      	mov	r3, r0
 8002a04:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a0a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681c      	ldr	r4, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a16:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002a1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a22:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4608      	mov	r0, r1
 8002a32:	4798      	blx	r3
 8002a34:	4601      	mov	r1, r0
 8002a36:	f107 030c 	add.w	r3, r7, #12
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	3301      	adds	r3, #1
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
 8002a46:	e79c      	b.n	8002982 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8002a50:	bf00      	nop
 8002a52:	372c      	adds	r7, #44	; 0x2c
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd90      	pop	{r4, r7, pc}

08002a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002a62:	f107 0308 	add.w	r3, r7, #8
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd ff06 	bl	8000878 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe fe85 	bl	8001780 <_ZN13STM32Hardware4timeEv>
 8002a76:	4602      	mov	r2, r0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002a82:	f107 0308 	add.w	r3, r7, #8
 8002a86:	6839      	ldr	r1, [r7, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fd ff65 	bl	8000958 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	4915      	ldr	r1, [pc, #84]	; (8002ae8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002a94:	fba1 1303 	umull	r1, r3, r1, r3
 8002a98:	099b      	lsrs	r3, r3, #6
 8002a9a:	4413      	add	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002a9e:	6939      	ldr	r1, [r7, #16]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002aa4:	fba3 0302 	umull	r0, r3, r3, r2
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aae:	fb00 f303 	mul.w	r3, r0, r3
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	4a0d      	ldr	r2, [pc, #52]	; (8002aec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	440b      	add	r3, r1
 8002abc:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002abe:	f107 0308 	add.w	r3, r7, #8
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f8a6 	bl	8002c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe fe55 	bl	8001780 <_ZN13STM32Hardware4timeEv>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8002ade:	bf00      	nop
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	10624dd3 	.word	0x10624dd3
 8002aec:	000f4240 	.word	0x000f4240

08002af0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b63      	cmp	r3, #99	; 0x63
 8002b00:	dd09      	ble.n	8002b16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002b08:	f083 0301 	eor.w	r3, r3, #1
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e079      	b.n	8002c0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002b22:	3207      	adds	r2, #7
 8002b24:	4611      	mov	r1, r2
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	4798      	blx	r3
 8002b2a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	22ff      	movs	r2, #255	; 0xff
 8002b30:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	22fe      	movs	r2, #254	; 0xfe
 8002b38:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8002b62:	4413      	add	r3, r2
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	b21b      	sxth	r3, r3
 8002b7e:	121b      	asrs	r3, r3, #8
 8002b80:	b21b      	sxth	r3, r3
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002b8e:	2305      	movs	r3, #5
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3306      	adds	r3, #6
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	dc0d      	bgt.n	8002bb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	e7ec      	b.n	8002b92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	3307      	adds	r3, #7
 8002bbc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	425a      	negs	r2, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	bf58      	it	pl
 8002bc8:	4253      	negpl	r3, r2
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	1c59      	adds	r1, r3, #1
 8002bd0:	6179      	str	r1, [r7, #20]
 8002bd2:	43d2      	mvns	r2, r2
 8002bd4:	b2d1      	uxtb	r1, r2
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	460a      	mov	r2, r1
 8002bdc:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be6:	dc0a      	bgt.n	8002bfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1d18      	adds	r0, r3, #4
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f7fe fd7d 	bl	80016f4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	e005      	b.n	8002c0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002bfe:	4905      	ldr	r1, [pc, #20]	; (8002c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f849 	bl	8002c98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	080062f0 	.word	0x080062f0

08002c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3304      	adds	r3, #4
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fdaa 	bl	8001780 <_ZN13STM32Hardware4timeEv>
 8002c2c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4915      	ldr	r1, [pc, #84]	; (8002c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002c36:	fba1 1303 	umull	r1, r3, r1, r3
 8002c3a:	099b      	lsrs	r3, r3, #6
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	1e5a      	subs	r2, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6859      	ldr	r1, [r3, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002c4e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c58:	fb00 f303 	mul.w	r3, r0, r3
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	4a0c      	ldr	r2, [pc, #48]	; (8002c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	1aca      	subs	r2, r1, r3
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8002c68:	4413      	add	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f000 fa68 	bl	8003154 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002c84:	bf00      	nop
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	10624dd3 	.word	0x10624dd3
 8002c90:	000f4240 	.word	0x000f4240
 8002c94:	3b9aca00 	.word	0x3b9aca00

08002c98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	2103      	movs	r1, #3
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f804 	bl	8002cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002cc2:	f107 0314 	add.w	r3, r7, #20
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe f88a 	bl	8000de0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002ccc:	7afb      	ldrb	r3, [r7, #11]
 8002cce:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f107 0214 	add.w	r2, r7, #20
 8002cde:	2107      	movs	r1, #7
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	4798      	blx	r3
  }
 8002ce4:	bf00      	nop
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_Z41__static_initialization_and_destruction_0ii>:
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d128      	bne.n	8002d4e <_Z41__static_initialization_and_destruction_0ii+0x62>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d123      	bne.n	8002d4e <_Z41__static_initialization_and_destruction_0ii+0x62>
ros::NodeHandle nh;
 8002d06:	4814      	ldr	r0, [pc, #80]	; (8002d58 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002d08:	f7fe fe5c 	bl	80019c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Bool done_msg;
 8002d0c:	4813      	ldr	r0, [pc, #76]	; (8002d5c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002d0e:	f7fe fddf 	bl	80018d0 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher done_nangha("done_nangha", &done_msg);
 8002d12:	2300      	movs	r3, #0
 8002d14:	4a11      	ldr	r2, [pc, #68]	; (8002d5c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002d16:	4912      	ldr	r1, [pc, #72]	; (8002d60 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002d18:	4812      	ldr	r0, [pc, #72]	; (8002d64 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002d1a:	f7fe fbdd 	bl	80014d8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Bool active_msg;
 8002d1e:	4812      	ldr	r0, [pc, #72]	; (8002d68 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002d20:	f7fe fdd6 	bl	80018d0 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher status_active("status_active", &active_msg);
 8002d24:	2300      	movs	r3, #0
 8002d26:	4a10      	ldr	r2, [pc, #64]	; (8002d68 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002d28:	4910      	ldr	r1, [pc, #64]	; (8002d6c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002d2a:	4811      	ldr	r0, [pc, #68]	; (8002d70 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002d2c:	f7fe fbd4 	bl	80014d8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::String str_msg;
 8002d30:	4810      	ldr	r0, [pc, #64]	; (8002d74 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002d32:	f7fe fd31 	bl	8001798 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);  //Publish chủ đề chatter lên ROS
 8002d36:	2300      	movs	r3, #0
 8002d38:	4a0e      	ldr	r2, [pc, #56]	; (8002d74 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002d3a:	490f      	ldr	r1, [pc, #60]	; (8002d78 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002d3c:	480f      	ldr	r0, [pc, #60]	; (8002d7c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002d3e:	f7fe fbcb 	bl	80014d8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::String> sub("number", xulichuoi);
 8002d42:	2301      	movs	r3, #1
 8002d44:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002d46:	490f      	ldr	r1, [pc, #60]	; (8002d84 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002d48:	480f      	ldr	r0, [pc, #60]	; (8002d88 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002d4a:	f7ff fb13 	bl	8002374 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200001a0 	.word	0x200001a0
 8002d5c:	20000adc 	.word	0x20000adc
 8002d60:	0800632c 	.word	0x0800632c
 8002d64:	20000ae4 	.word	0x20000ae4
 8002d68:	20000af8 	.word	0x20000af8
 8002d6c:	08006338 	.word	0x08006338
 8002d70:	20000b00 	.word	0x20000b00
 8002d74:	20000b14 	.word	0x20000b14
 8002d78:	08006348 	.word	0x08006348
 8002d7c:	20000b1c 	.word	0x20000b1c
 8002d80:	08001afd 	.word	0x08001afd
 8002d84:	080062e8 	.word	0x080062e8
 8002d88:	20000b44 	.word	0x20000b44

08002d8c <_ZN3ros10SubscriberIN8std_msgs6StringEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	6839      	ldr	r1, [r7, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe fd3c 	bl	800181a <_ZN8std_msgs6String11deserializeEPh>
    this->cb_(msg);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	320c      	adds	r2, #12
 8002daa:	4610      	mov	r0, r2
 8002dac:	4798      	blx	r3
  }
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_ZN3ros10SubscriberIN8std_msgs6StringEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
  }
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <_ZN3ros10SubscriberIN8std_msgs6StringEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	330c      	adds	r3, #12
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fd5c 	bl	8001898 <_ZN8std_msgs6String7getTypeEv>
 8002de0:	4603      	mov	r3, r0
  }
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <_ZN3ros10SubscriberIN8std_msgs6StringEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	330c      	adds	r3, #12
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fd5c 	bl	80018b4 <_ZN8std_msgs6String6getMD5Ev>
 8002dfc:	4603      	mov	r3, r0
  }
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
    return configured_;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <_GLOBAL__sub_I_nh>:
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f7ff ff5f 	bl	8002cec <_Z41__static_initialization_and_destruction_0ii>
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_MspInit+0x4c>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	4a0f      	ldr	r2, [pc, #60]	; (8002e7c <HAL_MspInit+0x4c>)
 8002e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e44:	6453      	str	r3, [r2, #68]	; 0x44
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <HAL_MspInit+0x4c>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_MspInit+0x4c>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <HAL_MspInit+0x4c>)
 8002e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e60:	6413      	str	r3, [r2, #64]	; 0x40
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_MspInit+0x4c>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800

08002e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a4d      	ldr	r2, [pc, #308]	; (8002fd4 <HAL_UART_MspInit+0x154>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	f040 8093 	bne.w	8002fca <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	4b4b      	ldr	r3, [pc, #300]	; (8002fd8 <HAL_UART_MspInit+0x158>)
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	4a4a      	ldr	r2, [pc, #296]	; (8002fd8 <HAL_UART_MspInit+0x158>)
 8002eae:	f043 0310 	orr.w	r3, r3, #16
 8002eb2:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb4:	4b48      	ldr	r3, [pc, #288]	; (8002fd8 <HAL_UART_MspInit+0x158>)
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	4b44      	ldr	r3, [pc, #272]	; (8002fd8 <HAL_UART_MspInit+0x158>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	4a43      	ldr	r2, [pc, #268]	; (8002fd8 <HAL_UART_MspInit+0x158>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed0:	4b41      	ldr	r3, [pc, #260]	; (8002fd8 <HAL_UART_MspInit+0x158>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002edc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eea:	2303      	movs	r3, #3
 8002eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002eee:	2307      	movs	r3, #7
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef2:	f107 0314 	add.w	r3, r7, #20
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4838      	ldr	r0, [pc, #224]	; (8002fdc <HAL_UART_MspInit+0x15c>)
 8002efa:	f000 ff2b 	bl	8003d54 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002efe:	4b38      	ldr	r3, [pc, #224]	; (8002fe0 <HAL_UART_MspInit+0x160>)
 8002f00:	4a38      	ldr	r2, [pc, #224]	; (8002fe4 <HAL_UART_MspInit+0x164>)
 8002f02:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002f04:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <HAL_UART_MspInit+0x160>)
 8002f06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f0a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f0c:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <HAL_UART_MspInit+0x160>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f12:	4b33      	ldr	r3, [pc, #204]	; (8002fe0 <HAL_UART_MspInit+0x160>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f18:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <HAL_UART_MspInit+0x160>)
 8002f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f20:	4b2f      	ldr	r3, [pc, #188]	; (8002fe0 <HAL_UART_MspInit+0x160>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f26:	4b2e      	ldr	r3, [pc, #184]	; (8002fe0 <HAL_UART_MspInit+0x160>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002f2c:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <HAL_UART_MspInit+0x160>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002f32:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <HAL_UART_MspInit+0x160>)
 8002f34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f38:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f3a:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <HAL_UART_MspInit+0x160>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f40:	4827      	ldr	r0, [pc, #156]	; (8002fe0 <HAL_UART_MspInit+0x160>)
 8002f42:	f000 fb05 	bl	8003550 <HAL_DMA_Init>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002f4c:	f7fd fc6e 	bl	800082c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <HAL_UART_MspInit+0x160>)
 8002f54:	639a      	str	r2, [r3, #56]	; 0x38
 8002f56:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <HAL_UART_MspInit+0x160>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <HAL_UART_MspInit+0x168>)
 8002f5e:	4a23      	ldr	r2, [pc, #140]	; (8002fec <HAL_UART_MspInit+0x16c>)
 8002f60:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002f62:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <HAL_UART_MspInit+0x168>)
 8002f64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f68:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f6a:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <HAL_UART_MspInit+0x168>)
 8002f6c:	2240      	movs	r2, #64	; 0x40
 8002f6e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f70:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HAL_UART_MspInit+0x168>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <HAL_UART_MspInit+0x168>)
 8002f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f7c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <HAL_UART_MspInit+0x168>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f84:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <HAL_UART_MspInit+0x168>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f8a:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <HAL_UART_MspInit+0x168>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002f90:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_UART_MspInit+0x168>)
 8002f92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f96:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <HAL_UART_MspInit+0x168>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f9e:	4812      	ldr	r0, [pc, #72]	; (8002fe8 <HAL_UART_MspInit+0x168>)
 8002fa0:	f000 fad6 	bl	8003550 <HAL_DMA_Init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002faa:	f7fd fc3f 	bl	800082c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a0d      	ldr	r2, [pc, #52]	; (8002fe8 <HAL_UART_MspInit+0x168>)
 8002fb2:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb4:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <HAL_UART_MspInit+0x168>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	2025      	movs	r0, #37	; 0x25
 8002fc0:	f000 fa8f 	bl	80034e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fc4:	2025      	movs	r0, #37	; 0x25
 8002fc6:	f000 faa8 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002fca:	bf00      	nop
 8002fcc:	3728      	adds	r7, #40	; 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40011000 	.word	0x40011000
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40020000 	.word	0x40020000
 8002fe0:	200000dc 	.word	0x200000dc
 8002fe4:	40026440 	.word	0x40026440
 8002fe8:	2000013c 	.word	0x2000013c
 8002fec:	400264b8 	.word	0x400264b8

08002ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ff4:	e7fe      	b.n	8002ff4 <NMI_Handler+0x4>

08002ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ffa:	e7fe      	b.n	8002ffa <HardFault_Handler+0x4>

08002ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003000:	e7fe      	b.n	8003000 <MemManage_Handler+0x4>

08003002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003006:	e7fe      	b.n	8003006 <BusFault_Handler+0x4>

08003008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800300c:	e7fe      	b.n	800300c <UsageFault_Handler+0x4>

0800300e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800303c:	f000 f932 	bl	80032a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003040:	bf00      	nop
 8003042:	bd80      	pop	{r7, pc}

08003044 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003048:	4802      	ldr	r0, [pc, #8]	; (8003054 <USART1_IRQHandler+0x10>)
 800304a:	f001 fde5 	bl	8004c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000098 	.word	0x20000098

08003058 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800305c:	4802      	ldr	r0, [pc, #8]	; (8003068 <DMA2_Stream2_IRQHandler+0x10>)
 800305e:	f000 fc0f 	bl	8003880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	200000dc 	.word	0x200000dc

0800306c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003070:	4802      	ldr	r0, [pc, #8]	; (800307c <DMA2_Stream7_IRQHandler+0x10>)
 8003072:	f000 fc05 	bl	8003880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	2000013c 	.word	0x2000013c

08003080 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
	return 1;
 8003084:	2301      	movs	r3, #1
}
 8003086:	4618      	mov	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <_kill>:

int _kill(int pid, int sig)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800309a:	f002 feb9 	bl	8005e10 <__errno>
 800309e:	4603      	mov	r3, r0
 80030a0:	2216      	movs	r2, #22
 80030a2:	601a      	str	r2, [r3, #0]
	return -1;
 80030a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <_exit>:

void _exit (int status)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030b8:	f04f 31ff 	mov.w	r1, #4294967295
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ffe7 	bl	8003090 <_kill>
	while (1) {}		/* Make sure we hang here */
 80030c2:	e7fe      	b.n	80030c2 <_exit+0x12>

080030c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030cc:	4a14      	ldr	r2, [pc, #80]	; (8003120 <_sbrk+0x5c>)
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <_sbrk+0x60>)
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d8:	4b13      	ldr	r3, [pc, #76]	; (8003128 <_sbrk+0x64>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <_sbrk+0x64>)
 80030e2:	4a12      	ldr	r2, [pc, #72]	; (800312c <_sbrk+0x68>)
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <_sbrk+0x64>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d207      	bcs.n	8003104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f4:	f002 fe8c 	bl	8005e10 <__errno>
 80030f8:	4603      	mov	r3, r0
 80030fa:	220c      	movs	r2, #12
 80030fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	e009      	b.n	8003118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003104:	4b08      	ldr	r3, [pc, #32]	; (8003128 <_sbrk+0x64>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800310a:	4b07      	ldr	r3, [pc, #28]	; (8003128 <_sbrk+0x64>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	4a05      	ldr	r2, [pc, #20]	; (8003128 <_sbrk+0x64>)
 8003114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20020000 	.word	0x20020000
 8003124:	00000400 	.word	0x00000400
 8003128:	20000b60 	.word	0x20000b60
 800312c:	20000b78 	.word	0x20000b78

08003130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <SystemInit+0x20>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313a:	4a05      	ldr	r2, [pc, #20]	; (8003150 <SystemInit+0x20>)
 800313c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	0a5a      	lsrs	r2, r3, #9
 8003164:	490f      	ldr	r1, [pc, #60]	; (80031a4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003166:	fba1 1202 	umull	r1, r2, r1, r2
 800316a:	09d2      	lsrs	r2, r2, #7
 800316c:	490e      	ldr	r1, [pc, #56]	; (80031a8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800316e:	fb01 f202 	mul.w	r2, r1, r2
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	0a5b      	lsrs	r3, r3, #9
 800317c:	4a09      	ldr	r2, [pc, #36]	; (80031a4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	09db      	lsrs	r3, r3, #7
 8003184:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	441a      	add	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	601a      	str	r2, [r3, #0]
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	00044b83 	.word	0x00044b83
 80031a8:	3b9aca00 	.word	0x3b9aca00

080031ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031b0:	480d      	ldr	r0, [pc, #52]	; (80031e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031b2:	490e      	ldr	r1, [pc, #56]	; (80031ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031b4:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b8:	e002      	b.n	80031c0 <LoopCopyDataInit>

080031ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031be:	3304      	adds	r3, #4

080031c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c4:	d3f9      	bcc.n	80031ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031c6:	4a0b      	ldr	r2, [pc, #44]	; (80031f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031c8:	4c0b      	ldr	r4, [pc, #44]	; (80031f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031cc:	e001      	b.n	80031d2 <LoopFillZerobss>

080031ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d0:	3204      	adds	r2, #4

080031d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d4:	d3fb      	bcc.n	80031ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031d6:	f7ff ffab 	bl	8003130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031da:	f002 fe1f 	bl	8005e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031de:	f7fd f97d 	bl	80004dc <main>
  bx  lr    
 80031e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031ec:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80031f0:	080064a0 	.word	0x080064a0
  ldr r2, =_sbss
 80031f4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80031f8:	20000b78 	.word	0x20000b78

080031fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031fc:	e7fe      	b.n	80031fc <ADC_IRQHandler>
	...

08003200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003204:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <HAL_Init+0x40>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <HAL_Init+0x40>)
 800320a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800320e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_Init+0x40>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <HAL_Init+0x40>)
 8003216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800321a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_Init+0x40>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a07      	ldr	r2, [pc, #28]	; (8003240 <HAL_Init+0x40>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003228:	2003      	movs	r0, #3
 800322a:	f000 f94f 	bl	80034cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800322e:	200f      	movs	r0, #15
 8003230:	f000 f808 	bl	8003244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003234:	f7ff fdfc 	bl	8002e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023c00 	.word	0x40023c00

08003244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_InitTick+0x54>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_InitTick+0x58>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	4619      	mov	r1, r3
 8003256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800325a:	fbb3 f3f1 	udiv	r3, r3, r1
 800325e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f967 	bl	8003536 <HAL_SYSTICK_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e00e      	b.n	8003290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b0f      	cmp	r3, #15
 8003276:	d80a      	bhi.n	800328e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003278:	2200      	movs	r2, #0
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	f04f 30ff 	mov.w	r0, #4294967295
 8003280:	f000 f92f 	bl	80034e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003284:	4a06      	ldr	r2, [pc, #24]	; (80032a0 <HAL_InitTick+0x5c>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e000      	b.n	8003290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20000008 	.word	0x20000008
 800329c:	20000010 	.word	0x20000010
 80032a0:	2000000c 	.word	0x2000000c

080032a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_IncTick+0x20>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_IncTick+0x24>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4413      	add	r3, r2
 80032b4:	4a04      	ldr	r2, [pc, #16]	; (80032c8 <HAL_IncTick+0x24>)
 80032b6:	6013      	str	r3, [r2, #0]
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20000010 	.word	0x20000010
 80032c8:	20000b64 	.word	0x20000b64

080032cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return uwTick;
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_GetTick+0x14>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000b64 	.word	0x20000b64

080032e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032ec:	f7ff ffee 	bl	80032cc <HAL_GetTick>
 80032f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fc:	d005      	beq.n	800330a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <HAL_Delay+0x44>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800330a:	bf00      	nop
 800330c:	f7ff ffde 	bl	80032cc <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	429a      	cmp	r2, r3
 800331a:	d8f7      	bhi.n	800330c <HAL_Delay+0x28>
  {
  }
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000010 	.word	0x20000010

0800332c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <__NVIC_SetPriorityGrouping+0x44>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003348:	4013      	ands	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800335e:	4a04      	ldr	r2, [pc, #16]	; (8003370 <__NVIC_SetPriorityGrouping+0x44>)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	60d3      	str	r3, [r2, #12]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <__NVIC_GetPriorityGrouping+0x18>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	0a1b      	lsrs	r3, r3, #8
 800337e:	f003 0307 	and.w	r3, r3, #7
}
 8003382:	4618      	mov	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	db0b      	blt.n	80033ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	f003 021f 	and.w	r2, r3, #31
 80033a8:	4907      	ldr	r1, [pc, #28]	; (80033c8 <__NVIC_EnableIRQ+0x38>)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	2001      	movs	r0, #1
 80033b2:	fa00 f202 	lsl.w	r2, r0, r2
 80033b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	e000e100 	.word	0xe000e100

080033cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	6039      	str	r1, [r7, #0]
 80033d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	db0a      	blt.n	80033f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	490c      	ldr	r1, [pc, #48]	; (8003418 <__NVIC_SetPriority+0x4c>)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	0112      	lsls	r2, r2, #4
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	440b      	add	r3, r1
 80033f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033f4:	e00a      	b.n	800340c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4908      	ldr	r1, [pc, #32]	; (800341c <__NVIC_SetPriority+0x50>)
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	3b04      	subs	r3, #4
 8003404:	0112      	lsls	r2, r2, #4
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	440b      	add	r3, r1
 800340a:	761a      	strb	r2, [r3, #24]
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	e000e100 	.word	0xe000e100
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003420:	b480      	push	{r7}
 8003422:	b089      	sub	sp, #36	; 0x24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f1c3 0307 	rsb	r3, r3, #7
 800343a:	2b04      	cmp	r3, #4
 800343c:	bf28      	it	cs
 800343e:	2304      	movcs	r3, #4
 8003440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3304      	adds	r3, #4
 8003446:	2b06      	cmp	r3, #6
 8003448:	d902      	bls.n	8003450 <NVIC_EncodePriority+0x30>
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3b03      	subs	r3, #3
 800344e:	e000      	b.n	8003452 <NVIC_EncodePriority+0x32>
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003454:	f04f 32ff 	mov.w	r2, #4294967295
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43da      	mvns	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	401a      	ands	r2, r3
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003468:	f04f 31ff 	mov.w	r1, #4294967295
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	43d9      	mvns	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003478:	4313      	orrs	r3, r2
         );
}
 800347a:	4618      	mov	r0, r3
 800347c:	3724      	adds	r7, #36	; 0x24
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3b01      	subs	r3, #1
 8003494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003498:	d301      	bcc.n	800349e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800349a:	2301      	movs	r3, #1
 800349c:	e00f      	b.n	80034be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800349e:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <SysTick_Config+0x40>)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034a6:	210f      	movs	r1, #15
 80034a8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ac:	f7ff ff8e 	bl	80033cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <SysTick_Config+0x40>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034b6:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <SysTick_Config+0x40>)
 80034b8:	2207      	movs	r2, #7
 80034ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	e000e010 	.word	0xe000e010

080034cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ff29 	bl	800332c <__NVIC_SetPriorityGrouping>
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b086      	sub	sp, #24
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034f4:	f7ff ff3e 	bl	8003374 <__NVIC_GetPriorityGrouping>
 80034f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	6978      	ldr	r0, [r7, #20]
 8003500:	f7ff ff8e 	bl	8003420 <NVIC_EncodePriority>
 8003504:	4602      	mov	r2, r0
 8003506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff5d 	bl	80033cc <__NVIC_SetPriority>
}
 8003512:	bf00      	nop
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	4603      	mov	r3, r0
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff31 	bl	8003390 <__NVIC_EnableIRQ>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ffa2 	bl	8003488 <SysTick_Config>
 8003544:	4603      	mov	r3, r0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800355c:	f7ff feb6 	bl	80032cc <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e099      	b.n	80036a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800358c:	e00f      	b.n	80035ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800358e:	f7ff fe9d 	bl	80032cc <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b05      	cmp	r3, #5
 800359a:	d908      	bls.n	80035ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2203      	movs	r2, #3
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e078      	b.n	80036a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e8      	bne.n	800358e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4b38      	ldr	r3, [pc, #224]	; (80036a8 <HAL_DMA_Init+0x158>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	2b04      	cmp	r3, #4
 8003606:	d107      	bne.n	8003618 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	4313      	orrs	r3, r2
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f023 0307 	bic.w	r3, r3, #7
 800362e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	2b04      	cmp	r3, #4
 8003640:	d117      	bne.n	8003672 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00e      	beq.n	8003672 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fb01 	bl	8003c5c <DMA_CheckFifoParam>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2240      	movs	r2, #64	; 0x40
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800366e:	2301      	movs	r3, #1
 8003670:	e016      	b.n	80036a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fab8 	bl	8003bf0 <DMA_CalcBaseAndBitshift>
 8003680:	4603      	mov	r3, r0
 8003682:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	223f      	movs	r2, #63	; 0x3f
 800368a:	409a      	lsls	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	f010803f 	.word	0xf010803f

080036ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_DMA_Start_IT+0x26>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e040      	b.n	8003754 <HAL_DMA_Start_IT+0xa8>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d12f      	bne.n	8003746 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2202      	movs	r2, #2
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 fa4a 	bl	8003b94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003704:	223f      	movs	r2, #63	; 0x3f
 8003706:	409a      	lsls	r2, r3
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0216 	orr.w	r2, r2, #22
 800371a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	2b00      	cmp	r3, #0
 8003722:	d007      	beq.n	8003734 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0208 	orr.w	r2, r2, #8
 8003732:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e005      	b.n	8003752 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800374e:	2302      	movs	r3, #2
 8003750:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003752:	7dfb      	ldrb	r3, [r7, #23]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800376a:	f7ff fdaf 	bl	80032cc <HAL_GetTick>
 800376e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d008      	beq.n	800378e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e052      	b.n	8003834 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0216 	bic.w	r2, r2, #22
 800379c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695a      	ldr	r2, [r3, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d103      	bne.n	80037be <HAL_DMA_Abort+0x62>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d007      	beq.n	80037ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0208 	bic.w	r2, r2, #8
 80037cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037de:	e013      	b.n	8003808 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037e0:	f7ff fd74 	bl	80032cc <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b05      	cmp	r3, #5
 80037ec:	d90c      	bls.n	8003808 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2203      	movs	r2, #3
 80037f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e015      	b.n	8003834 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e4      	bne.n	80037e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	223f      	movs	r2, #63	; 0x3f
 800381c:	409a      	lsls	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d004      	beq.n	800385a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2280      	movs	r2, #128	; 0x80
 8003854:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e00c      	b.n	8003874 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2205      	movs	r2, #5
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800388c:	4b8e      	ldr	r3, [pc, #568]	; (8003ac8 <HAL_DMA_IRQHandler+0x248>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a8e      	ldr	r2, [pc, #568]	; (8003acc <HAL_DMA_IRQHandler+0x24c>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	0a9b      	lsrs	r3, r3, #10
 8003898:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038aa:	2208      	movs	r2, #8
 80038ac:	409a      	lsls	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d01a      	beq.n	80038ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d013      	beq.n	80038ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0204 	bic.w	r2, r2, #4
 80038d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	2208      	movs	r2, #8
 80038da:	409a      	lsls	r2, r3
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	f043 0201 	orr.w	r2, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	2201      	movs	r2, #1
 80038f2:	409a      	lsls	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d012      	beq.n	8003922 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390e:	2201      	movs	r2, #1
 8003910:	409a      	lsls	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	f043 0202 	orr.w	r2, r3, #2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003926:	2204      	movs	r2, #4
 8003928:	409a      	lsls	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4013      	ands	r3, r2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d012      	beq.n	8003958 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00b      	beq.n	8003958 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003944:	2204      	movs	r2, #4
 8003946:	409a      	lsls	r2, r3
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003950:	f043 0204 	orr.w	r2, r3, #4
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395c:	2210      	movs	r2, #16
 800395e:	409a      	lsls	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d043      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d03c      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	2210      	movs	r2, #16
 800397c:	409a      	lsls	r2, r3
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d018      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d108      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d024      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4798      	blx	r3
 80039ae:	e01f      	b.n	80039f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01b      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
 80039c0:	e016      	b.n	80039f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d107      	bne.n	80039e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0208 	bic.w	r2, r2, #8
 80039de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f4:	2220      	movs	r2, #32
 80039f6:	409a      	lsls	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 808f 	beq.w	8003b20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8087 	beq.w	8003b20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a16:	2220      	movs	r2, #32
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b05      	cmp	r3, #5
 8003a28:	d136      	bne.n	8003a98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0216 	bic.w	r2, r2, #22
 8003a38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <HAL_DMA_IRQHandler+0x1da>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0208 	bic.w	r2, r2, #8
 8003a68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	223f      	movs	r2, #63	; 0x3f
 8003a70:	409a      	lsls	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d07e      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	4798      	blx	r3
        }
        return;
 8003a96:	e079      	b.n	8003b8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01d      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10d      	bne.n	8003ad0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d031      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	4798      	blx	r3
 8003ac4:	e02c      	b.n	8003b20 <HAL_DMA_IRQHandler+0x2a0>
 8003ac6:	bf00      	nop
 8003ac8:	20000008 	.word	0x20000008
 8003acc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d023      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4798      	blx	r3
 8003ae0:	e01e      	b.n	8003b20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10f      	bne.n	8003b10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0210 	bic.w	r2, r2, #16
 8003afe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d032      	beq.n	8003b8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d022      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2205      	movs	r2, #5
 8003b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d307      	bcc.n	8003b68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f2      	bne.n	8003b4c <HAL_DMA_IRQHandler+0x2cc>
 8003b66:	e000      	b.n	8003b6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	4798      	blx	r3
 8003b8a:	e000      	b.n	8003b8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b8c:	bf00      	nop
    }
  }
}
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d108      	bne.n	8003bd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bd2:	e007      	b.n	8003be4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	60da      	str	r2, [r3, #12]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	3b10      	subs	r3, #16
 8003c00:	4a14      	ldr	r2, [pc, #80]	; (8003c54 <DMA_CalcBaseAndBitshift+0x64>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	091b      	lsrs	r3, r3, #4
 8003c08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c0a:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <DMA_CalcBaseAndBitshift+0x68>)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d909      	bls.n	8003c32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c26:	f023 0303 	bic.w	r3, r3, #3
 8003c2a:	1d1a      	adds	r2, r3, #4
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	659a      	str	r2, [r3, #88]	; 0x58
 8003c30:	e007      	b.n	8003c42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c3a:	f023 0303 	bic.w	r3, r3, #3
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	aaaaaaab 	.word	0xaaaaaaab
 8003c58:	08006484 	.word	0x08006484

08003c5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d11f      	bne.n	8003cb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d856      	bhi.n	8003d2a <DMA_CheckFifoParam+0xce>
 8003c7c:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <DMA_CheckFifoParam+0x28>)
 8003c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c82:	bf00      	nop
 8003c84:	08003c95 	.word	0x08003c95
 8003c88:	08003ca7 	.word	0x08003ca7
 8003c8c:	08003c95 	.word	0x08003c95
 8003c90:	08003d2b 	.word	0x08003d2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d046      	beq.n	8003d2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca4:	e043      	b.n	8003d2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cae:	d140      	bne.n	8003d32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb4:	e03d      	b.n	8003d32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cbe:	d121      	bne.n	8003d04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d837      	bhi.n	8003d36 <DMA_CheckFifoParam+0xda>
 8003cc6:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <DMA_CheckFifoParam+0x70>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003ce3 	.word	0x08003ce3
 8003cd4:	08003cdd 	.word	0x08003cdd
 8003cd8:	08003cf5 	.word	0x08003cf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce0:	e030      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d025      	beq.n	8003d3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf2:	e022      	b.n	8003d3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cfc:	d11f      	bne.n	8003d3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d02:	e01c      	b.n	8003d3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d903      	bls.n	8003d12 <DMA_CheckFifoParam+0xb6>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d003      	beq.n	8003d18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d10:	e018      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
      break;
 8003d16:	e015      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00e      	beq.n	8003d42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
      break;
 8003d28:	e00b      	b.n	8003d42 <DMA_CheckFifoParam+0xe6>
      break;
 8003d2a:	bf00      	nop
 8003d2c:	e00a      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
      break;
 8003d2e:	bf00      	nop
 8003d30:	e008      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
      break;
 8003d32:	bf00      	nop
 8003d34:	e006      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
      break;
 8003d36:	bf00      	nop
 8003d38:	e004      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
      break;
 8003d3a:	bf00      	nop
 8003d3c:	e002      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d3e:	bf00      	nop
 8003d40:	e000      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
      break;
 8003d42:	bf00      	nop
    }
  } 
  
  return status; 
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop

08003d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b089      	sub	sp, #36	; 0x24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	e16b      	b.n	8004048 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d70:	2201      	movs	r2, #1
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4013      	ands	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	f040 815a 	bne.w	8004042 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d005      	beq.n	8003da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d130      	bne.n	8003e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	2203      	movs	r2, #3
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ddc:	2201      	movs	r2, #1
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 0201 	and.w	r2, r3, #1
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d017      	beq.n	8003e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	2203      	movs	r2, #3
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d123      	bne.n	8003e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	08da      	lsrs	r2, r3, #3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3208      	adds	r2, #8
 8003e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	220f      	movs	r2, #15
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	08da      	lsrs	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3208      	adds	r2, #8
 8003e92:	69b9      	ldr	r1, [r7, #24]
 8003e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 0203 	and.w	r2, r3, #3
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80b4 	beq.w	8004042 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	4b60      	ldr	r3, [pc, #384]	; (8004060 <HAL_GPIO_Init+0x30c>)
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee2:	4a5f      	ldr	r2, [pc, #380]	; (8004060 <HAL_GPIO_Init+0x30c>)
 8003ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eea:	4b5d      	ldr	r3, [pc, #372]	; (8004060 <HAL_GPIO_Init+0x30c>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ef6:	4a5b      	ldr	r2, [pc, #364]	; (8004064 <HAL_GPIO_Init+0x310>)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	089b      	lsrs	r3, r3, #2
 8003efc:	3302      	adds	r3, #2
 8003efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	220f      	movs	r2, #15
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4013      	ands	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a52      	ldr	r2, [pc, #328]	; (8004068 <HAL_GPIO_Init+0x314>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d02b      	beq.n	8003f7a <HAL_GPIO_Init+0x226>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a51      	ldr	r2, [pc, #324]	; (800406c <HAL_GPIO_Init+0x318>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d025      	beq.n	8003f76 <HAL_GPIO_Init+0x222>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a50      	ldr	r2, [pc, #320]	; (8004070 <HAL_GPIO_Init+0x31c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01f      	beq.n	8003f72 <HAL_GPIO_Init+0x21e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a4f      	ldr	r2, [pc, #316]	; (8004074 <HAL_GPIO_Init+0x320>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d019      	beq.n	8003f6e <HAL_GPIO_Init+0x21a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a4e      	ldr	r2, [pc, #312]	; (8004078 <HAL_GPIO_Init+0x324>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d013      	beq.n	8003f6a <HAL_GPIO_Init+0x216>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a4d      	ldr	r2, [pc, #308]	; (800407c <HAL_GPIO_Init+0x328>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00d      	beq.n	8003f66 <HAL_GPIO_Init+0x212>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a4c      	ldr	r2, [pc, #304]	; (8004080 <HAL_GPIO_Init+0x32c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d007      	beq.n	8003f62 <HAL_GPIO_Init+0x20e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a4b      	ldr	r2, [pc, #300]	; (8004084 <HAL_GPIO_Init+0x330>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d101      	bne.n	8003f5e <HAL_GPIO_Init+0x20a>
 8003f5a:	2307      	movs	r3, #7
 8003f5c:	e00e      	b.n	8003f7c <HAL_GPIO_Init+0x228>
 8003f5e:	2308      	movs	r3, #8
 8003f60:	e00c      	b.n	8003f7c <HAL_GPIO_Init+0x228>
 8003f62:	2306      	movs	r3, #6
 8003f64:	e00a      	b.n	8003f7c <HAL_GPIO_Init+0x228>
 8003f66:	2305      	movs	r3, #5
 8003f68:	e008      	b.n	8003f7c <HAL_GPIO_Init+0x228>
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	e006      	b.n	8003f7c <HAL_GPIO_Init+0x228>
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e004      	b.n	8003f7c <HAL_GPIO_Init+0x228>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e002      	b.n	8003f7c <HAL_GPIO_Init+0x228>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <HAL_GPIO_Init+0x228>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	f002 0203 	and.w	r2, r2, #3
 8003f82:	0092      	lsls	r2, r2, #2
 8003f84:	4093      	lsls	r3, r2
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f8c:	4935      	ldr	r1, [pc, #212]	; (8004064 <HAL_GPIO_Init+0x310>)
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	3302      	adds	r3, #2
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f9a:	4b3b      	ldr	r3, [pc, #236]	; (8004088 <HAL_GPIO_Init+0x334>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fbe:	4a32      	ldr	r2, [pc, #200]	; (8004088 <HAL_GPIO_Init+0x334>)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fc4:	4b30      	ldr	r3, [pc, #192]	; (8004088 <HAL_GPIO_Init+0x334>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fe8:	4a27      	ldr	r2, [pc, #156]	; (8004088 <HAL_GPIO_Init+0x334>)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fee:	4b26      	ldr	r3, [pc, #152]	; (8004088 <HAL_GPIO_Init+0x334>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004012:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <HAL_GPIO_Init+0x334>)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004018:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <HAL_GPIO_Init+0x334>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800403c:	4a12      	ldr	r2, [pc, #72]	; (8004088 <HAL_GPIO_Init+0x334>)
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	3301      	adds	r3, #1
 8004046:	61fb      	str	r3, [r7, #28]
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	2b0f      	cmp	r3, #15
 800404c:	f67f ae90 	bls.w	8003d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	3724      	adds	r7, #36	; 0x24
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800
 8004064:	40013800 	.word	0x40013800
 8004068:	40020000 	.word	0x40020000
 800406c:	40020400 	.word	0x40020400
 8004070:	40020800 	.word	0x40020800
 8004074:	40020c00 	.word	0x40020c00
 8004078:	40021000 	.word	0x40021000
 800407c:	40021400 	.word	0x40021400
 8004080:	40021800 	.word	0x40021800
 8004084:	40021c00 	.word	0x40021c00
 8004088:	40013c00 	.word	0x40013c00

0800408c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	887b      	ldrh	r3, [r7, #2]
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
 80040a8:	e001      	b.n	80040ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040aa:	2300      	movs	r3, #0
 80040ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	807b      	strh	r3, [r7, #2]
 80040c8:	4613      	mov	r3, r2
 80040ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040cc:	787b      	ldrb	r3, [r7, #1]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040d2:	887a      	ldrh	r2, [r7, #2]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040d8:	e003      	b.n	80040e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040da:	887b      	ldrh	r3, [r7, #2]
 80040dc:	041a      	lsls	r2, r3, #16
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	619a      	str	r2, [r3, #24]
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
	...

080040f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e267      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d075      	beq.n	80041fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800410e:	4b88      	ldr	r3, [pc, #544]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b04      	cmp	r3, #4
 8004118:	d00c      	beq.n	8004134 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800411a:	4b85      	ldr	r3, [pc, #532]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004122:	2b08      	cmp	r3, #8
 8004124:	d112      	bne.n	800414c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004126:	4b82      	ldr	r3, [pc, #520]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004132:	d10b      	bne.n	800414c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	4b7e      	ldr	r3, [pc, #504]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d05b      	beq.n	80041f8 <HAL_RCC_OscConfig+0x108>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d157      	bne.n	80041f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e242      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004154:	d106      	bne.n	8004164 <HAL_RCC_OscConfig+0x74>
 8004156:	4b76      	ldr	r3, [pc, #472]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a75      	ldr	r2, [pc, #468]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e01d      	b.n	80041a0 <HAL_RCC_OscConfig+0xb0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800416c:	d10c      	bne.n	8004188 <HAL_RCC_OscConfig+0x98>
 800416e:	4b70      	ldr	r3, [pc, #448]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a6f      	ldr	r2, [pc, #444]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	4b6d      	ldr	r3, [pc, #436]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a6c      	ldr	r2, [pc, #432]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	e00b      	b.n	80041a0 <HAL_RCC_OscConfig+0xb0>
 8004188:	4b69      	ldr	r3, [pc, #420]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a68      	ldr	r2, [pc, #416]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800418e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	4b66      	ldr	r3, [pc, #408]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a65      	ldr	r2, [pc, #404]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800419a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800419e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d013      	beq.n	80041d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7ff f890 	bl	80032cc <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b0:	f7ff f88c 	bl	80032cc <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e207      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c2:	4b5b      	ldr	r3, [pc, #364]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0xc0>
 80041ce:	e014      	b.n	80041fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d0:	f7ff f87c 	bl	80032cc <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d8:	f7ff f878 	bl	80032cc <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	; 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e1f3      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ea:	4b51      	ldr	r3, [pc, #324]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0xe8>
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d063      	beq.n	80042ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004206:	4b4a      	ldr	r3, [pc, #296]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 030c 	and.w	r3, r3, #12
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004212:	4b47      	ldr	r3, [pc, #284]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800421a:	2b08      	cmp	r3, #8
 800421c:	d11c      	bne.n	8004258 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800421e:	4b44      	ldr	r3, [pc, #272]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d116      	bne.n	8004258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422a:	4b41      	ldr	r3, [pc, #260]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d005      	beq.n	8004242 <HAL_RCC_OscConfig+0x152>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d001      	beq.n	8004242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e1c7      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004242:	4b3b      	ldr	r3, [pc, #236]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4937      	ldr	r1, [pc, #220]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004256:	e03a      	b.n	80042ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d020      	beq.n	80042a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004260:	4b34      	ldr	r3, [pc, #208]	; (8004334 <HAL_RCC_OscConfig+0x244>)
 8004262:	2201      	movs	r2, #1
 8004264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004266:	f7ff f831 	bl	80032cc <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800426e:	f7ff f82d 	bl	80032cc <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e1a8      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004280:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428c:	4b28      	ldr	r3, [pc, #160]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4925      	ldr	r1, [pc, #148]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800429c:	4313      	orrs	r3, r2
 800429e:	600b      	str	r3, [r1, #0]
 80042a0:	e015      	b.n	80042ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042a2:	4b24      	ldr	r3, [pc, #144]	; (8004334 <HAL_RCC_OscConfig+0x244>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7ff f810 	bl	80032cc <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042b0:	f7ff f80c 	bl	80032cc <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e187      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c2:	4b1b      	ldr	r3, [pc, #108]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d036      	beq.n	8004348 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d016      	beq.n	8004310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e2:	4b15      	ldr	r3, [pc, #84]	; (8004338 <HAL_RCC_OscConfig+0x248>)
 80042e4:	2201      	movs	r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e8:	f7fe fff0 	bl	80032cc <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f0:	f7fe ffec 	bl	80032cc <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e167      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x200>
 800430e:	e01b      	b.n	8004348 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004310:	4b09      	ldr	r3, [pc, #36]	; (8004338 <HAL_RCC_OscConfig+0x248>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004316:	f7fe ffd9 	bl	80032cc <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431c:	e00e      	b.n	800433c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800431e:	f7fe ffd5 	bl	80032cc <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d907      	bls.n	800433c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e150      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
 8004330:	40023800 	.word	0x40023800
 8004334:	42470000 	.word	0x42470000
 8004338:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800433c:	4b88      	ldr	r3, [pc, #544]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800433e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1ea      	bne.n	800431e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8097 	beq.w	8004484 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004356:	2300      	movs	r3, #0
 8004358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800435a:	4b81      	ldr	r3, [pc, #516]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10f      	bne.n	8004386 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004366:	2300      	movs	r3, #0
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	4b7d      	ldr	r3, [pc, #500]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	4a7c      	ldr	r2, [pc, #496]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 8004370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004374:	6413      	str	r3, [r2, #64]	; 0x40
 8004376:	4b7a      	ldr	r3, [pc, #488]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004382:	2301      	movs	r3, #1
 8004384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004386:	4b77      	ldr	r3, [pc, #476]	; (8004564 <HAL_RCC_OscConfig+0x474>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	2b00      	cmp	r3, #0
 8004390:	d118      	bne.n	80043c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004392:	4b74      	ldr	r3, [pc, #464]	; (8004564 <HAL_RCC_OscConfig+0x474>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a73      	ldr	r2, [pc, #460]	; (8004564 <HAL_RCC_OscConfig+0x474>)
 8004398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439e:	f7fe ff95 	bl	80032cc <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a6:	f7fe ff91 	bl	80032cc <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e10c      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b8:	4b6a      	ldr	r3, [pc, #424]	; (8004564 <HAL_RCC_OscConfig+0x474>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d106      	bne.n	80043da <HAL_RCC_OscConfig+0x2ea>
 80043cc:	4b64      	ldr	r3, [pc, #400]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	4a63      	ldr	r2, [pc, #396]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	6713      	str	r3, [r2, #112]	; 0x70
 80043d8:	e01c      	b.n	8004414 <HAL_RCC_OscConfig+0x324>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b05      	cmp	r3, #5
 80043e0:	d10c      	bne.n	80043fc <HAL_RCC_OscConfig+0x30c>
 80043e2:	4b5f      	ldr	r3, [pc, #380]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	4a5e      	ldr	r2, [pc, #376]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80043e8:	f043 0304 	orr.w	r3, r3, #4
 80043ec:	6713      	str	r3, [r2, #112]	; 0x70
 80043ee:	4b5c      	ldr	r3, [pc, #368]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	4a5b      	ldr	r2, [pc, #364]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	6713      	str	r3, [r2, #112]	; 0x70
 80043fa:	e00b      	b.n	8004414 <HAL_RCC_OscConfig+0x324>
 80043fc:	4b58      	ldr	r3, [pc, #352]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	4a57      	ldr	r2, [pc, #348]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 8004402:	f023 0301 	bic.w	r3, r3, #1
 8004406:	6713      	str	r3, [r2, #112]	; 0x70
 8004408:	4b55      	ldr	r3, [pc, #340]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	4a54      	ldr	r2, [pc, #336]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800440e:	f023 0304 	bic.w	r3, r3, #4
 8004412:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d015      	beq.n	8004448 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441c:	f7fe ff56 	bl	80032cc <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004422:	e00a      	b.n	800443a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004424:	f7fe ff52 	bl	80032cc <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004432:	4293      	cmp	r3, r2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e0cb      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443a:	4b49      	ldr	r3, [pc, #292]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0ee      	beq.n	8004424 <HAL_RCC_OscConfig+0x334>
 8004446:	e014      	b.n	8004472 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004448:	f7fe ff40 	bl	80032cc <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444e:	e00a      	b.n	8004466 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004450:	f7fe ff3c 	bl	80032cc <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	; 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e0b5      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004466:	4b3e      	ldr	r3, [pc, #248]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1ee      	bne.n	8004450 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004472:	7dfb      	ldrb	r3, [r7, #23]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d105      	bne.n	8004484 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004478:	4b39      	ldr	r3, [pc, #228]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	4a38      	ldr	r2, [pc, #224]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800447e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004482:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80a1 	beq.w	80045d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800448e:	4b34      	ldr	r3, [pc, #208]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	2b08      	cmp	r3, #8
 8004498:	d05c      	beq.n	8004554 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d141      	bne.n	8004526 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a2:	4b31      	ldr	r3, [pc, #196]	; (8004568 <HAL_RCC_OscConfig+0x478>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7fe ff10 	bl	80032cc <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fe ff0c 	bl	80032cc <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e087      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c2:	4b27      	ldr	r3, [pc, #156]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69da      	ldr	r2, [r3, #28]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	019b      	lsls	r3, r3, #6
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	3b01      	subs	r3, #1
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	061b      	lsls	r3, r3, #24
 80044f2:	491b      	ldr	r1, [pc, #108]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f8:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <HAL_RCC_OscConfig+0x478>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fe:	f7fe fee5 	bl	80032cc <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004506:	f7fe fee1 	bl	80032cc <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e05c      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004518:	4b11      	ldr	r3, [pc, #68]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x416>
 8004524:	e054      	b.n	80045d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <HAL_RCC_OscConfig+0x478>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fe fece 	bl	80032cc <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004534:	f7fe feca 	bl	80032cc <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e045      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x444>
 8004552:	e03d      	b.n	80045d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d107      	bne.n	800456c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e038      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
 8004560:	40023800 	.word	0x40023800
 8004564:	40007000 	.word	0x40007000
 8004568:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800456c:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <HAL_RCC_OscConfig+0x4ec>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d028      	beq.n	80045cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d121      	bne.n	80045cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d11a      	bne.n	80045cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800459c:	4013      	ands	r3, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d111      	bne.n	80045cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	085b      	lsrs	r3, r3, #1
 80045b4:	3b01      	subs	r3, #1
 80045b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d107      	bne.n	80045cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800

080045e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0cc      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045f4:	4b68      	ldr	r3, [pc, #416]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d90c      	bls.n	800461c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004602:	4b65      	ldr	r3, [pc, #404]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	4b63      	ldr	r3, [pc, #396]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0b8      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d020      	beq.n	800466a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004634:	4b59      	ldr	r3, [pc, #356]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4a58      	ldr	r2, [pc, #352]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800463e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800464c:	4b53      	ldr	r3, [pc, #332]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4a52      	ldr	r2, [pc, #328]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004656:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004658:	4b50      	ldr	r3, [pc, #320]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	494d      	ldr	r1, [pc, #308]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d044      	beq.n	8004700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467e:	4b47      	ldr	r3, [pc, #284]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d119      	bne.n	80046be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e07f      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d003      	beq.n	800469e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800469a:	2b03      	cmp	r3, #3
 800469c:	d107      	bne.n	80046ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469e:	4b3f      	ldr	r3, [pc, #252]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d109      	bne.n	80046be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e06f      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ae:	4b3b      	ldr	r3, [pc, #236]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e067      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046be:	4b37      	ldr	r3, [pc, #220]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f023 0203 	bic.w	r2, r3, #3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4934      	ldr	r1, [pc, #208]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046d0:	f7fe fdfc 	bl	80032cc <HAL_GetTick>
 80046d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d6:	e00a      	b.n	80046ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d8:	f7fe fdf8 	bl	80032cc <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e04f      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ee:	4b2b      	ldr	r3, [pc, #172]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 020c 	and.w	r2, r3, #12
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d1eb      	bne.n	80046d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004700:	4b25      	ldr	r3, [pc, #148]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d20c      	bcs.n	8004728 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470e:	4b22      	ldr	r3, [pc, #136]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b20      	ldr	r3, [pc, #128]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e032      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004734:	4b19      	ldr	r3, [pc, #100]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4916      	ldr	r1, [pc, #88]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	490e      	ldr	r1, [pc, #56]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	4313      	orrs	r3, r2
 8004764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004766:	f000 f821 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 800476a:	4602      	mov	r2, r0
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	490a      	ldr	r1, [pc, #40]	; (80047a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004778:	5ccb      	ldrb	r3, [r1, r3]
 800477a:	fa22 f303 	lsr.w	r3, r2, r3
 800477e:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fd5c 	bl	8003244 <HAL_InitTick>

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40023c00 	.word	0x40023c00
 800479c:	40023800 	.word	0x40023800
 80047a0:	0800646c 	.word	0x0800646c
 80047a4:	20000008 	.word	0x20000008
 80047a8:	2000000c 	.word	0x2000000c

080047ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b0:	b094      	sub	sp, #80	; 0x50
 80047b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	647b      	str	r3, [r7, #68]	; 0x44
 80047b8:	2300      	movs	r3, #0
 80047ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047bc:	2300      	movs	r3, #0
 80047be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c4:	4b79      	ldr	r3, [pc, #484]	; (80049ac <HAL_RCC_GetSysClockFreq+0x200>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 030c 	and.w	r3, r3, #12
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d00d      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0x40>
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	f200 80e1 	bhi.w	8004998 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_RCC_GetSysClockFreq+0x34>
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d003      	beq.n	80047e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047de:	e0db      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047e0:	4b73      	ldr	r3, [pc, #460]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80047e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80047e4:	e0db      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047e6:	4b73      	ldr	r3, [pc, #460]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80047e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ea:	e0d8      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047ec:	4b6f      	ldr	r3, [pc, #444]	; (80049ac <HAL_RCC_GetSysClockFreq+0x200>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047f6:	4b6d      	ldr	r3, [pc, #436]	; (80049ac <HAL_RCC_GetSysClockFreq+0x200>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d063      	beq.n	80048ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004802:	4b6a      	ldr	r3, [pc, #424]	; (80049ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	099b      	lsrs	r3, r3, #6
 8004808:	2200      	movs	r2, #0
 800480a:	63bb      	str	r3, [r7, #56]	; 0x38
 800480c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004814:	633b      	str	r3, [r7, #48]	; 0x30
 8004816:	2300      	movs	r3, #0
 8004818:	637b      	str	r3, [r7, #52]	; 0x34
 800481a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800481e:	4622      	mov	r2, r4
 8004820:	462b      	mov	r3, r5
 8004822:	f04f 0000 	mov.w	r0, #0
 8004826:	f04f 0100 	mov.w	r1, #0
 800482a:	0159      	lsls	r1, r3, #5
 800482c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004830:	0150      	lsls	r0, r2, #5
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4621      	mov	r1, r4
 8004838:	1a51      	subs	r1, r2, r1
 800483a:	6139      	str	r1, [r7, #16]
 800483c:	4629      	mov	r1, r5
 800483e:	eb63 0301 	sbc.w	r3, r3, r1
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004850:	4659      	mov	r1, fp
 8004852:	018b      	lsls	r3, r1, #6
 8004854:	4651      	mov	r1, sl
 8004856:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800485a:	4651      	mov	r1, sl
 800485c:	018a      	lsls	r2, r1, #6
 800485e:	4651      	mov	r1, sl
 8004860:	ebb2 0801 	subs.w	r8, r2, r1
 8004864:	4659      	mov	r1, fp
 8004866:	eb63 0901 	sbc.w	r9, r3, r1
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800487a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800487e:	4690      	mov	r8, r2
 8004880:	4699      	mov	r9, r3
 8004882:	4623      	mov	r3, r4
 8004884:	eb18 0303 	adds.w	r3, r8, r3
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	462b      	mov	r3, r5
 800488c:	eb49 0303 	adc.w	r3, r9, r3
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800489e:	4629      	mov	r1, r5
 80048a0:	024b      	lsls	r3, r1, #9
 80048a2:	4621      	mov	r1, r4
 80048a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048a8:	4621      	mov	r1, r4
 80048aa:	024a      	lsls	r2, r1, #9
 80048ac:	4610      	mov	r0, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b2:	2200      	movs	r2, #0
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048bc:	f7fb fc8c 	bl	80001d8 <__aeabi_uldivmod>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4613      	mov	r3, r2
 80048c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c8:	e058      	b.n	800497c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ca:	4b38      	ldr	r3, [pc, #224]	; (80049ac <HAL_RCC_GetSysClockFreq+0x200>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	099b      	lsrs	r3, r3, #6
 80048d0:	2200      	movs	r2, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	4611      	mov	r1, r2
 80048d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048da:	623b      	str	r3, [r7, #32]
 80048dc:	2300      	movs	r3, #0
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
 80048e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048e4:	4642      	mov	r2, r8
 80048e6:	464b      	mov	r3, r9
 80048e8:	f04f 0000 	mov.w	r0, #0
 80048ec:	f04f 0100 	mov.w	r1, #0
 80048f0:	0159      	lsls	r1, r3, #5
 80048f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048f6:	0150      	lsls	r0, r2, #5
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4641      	mov	r1, r8
 80048fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004902:	4649      	mov	r1, r9
 8004904:	eb63 0b01 	sbc.w	fp, r3, r1
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004914:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004918:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800491c:	ebb2 040a 	subs.w	r4, r2, sl
 8004920:	eb63 050b 	sbc.w	r5, r3, fp
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	00eb      	lsls	r3, r5, #3
 800492e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004932:	00e2      	lsls	r2, r4, #3
 8004934:	4614      	mov	r4, r2
 8004936:	461d      	mov	r5, r3
 8004938:	4643      	mov	r3, r8
 800493a:	18e3      	adds	r3, r4, r3
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	464b      	mov	r3, r9
 8004940:	eb45 0303 	adc.w	r3, r5, r3
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004952:	4629      	mov	r1, r5
 8004954:	028b      	lsls	r3, r1, #10
 8004956:	4621      	mov	r1, r4
 8004958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800495c:	4621      	mov	r1, r4
 800495e:	028a      	lsls	r2, r1, #10
 8004960:	4610      	mov	r0, r2
 8004962:	4619      	mov	r1, r3
 8004964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004966:	2200      	movs	r2, #0
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	61fa      	str	r2, [r7, #28]
 800496c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004970:	f7fb fc32 	bl	80001d8 <__aeabi_uldivmod>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4613      	mov	r3, r2
 800497a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_RCC_GetSysClockFreq+0x200>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	0c1b      	lsrs	r3, r3, #16
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	3301      	adds	r3, #1
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800498c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800498e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004996:	e002      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800499a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800499c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800499e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3750      	adds	r7, #80	; 0x50
 80049a4:	46bd      	mov	sp, r7
 80049a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049aa:	bf00      	nop
 80049ac:	40023800 	.word	0x40023800
 80049b0:	00f42400 	.word	0x00f42400
 80049b4:	007a1200 	.word	0x007a1200

080049b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049bc:	4b03      	ldr	r3, [pc, #12]	; (80049cc <HAL_RCC_GetHCLKFreq+0x14>)
 80049be:	681b      	ldr	r3, [r3, #0]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	20000008 	.word	0x20000008

080049d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049d4:	f7ff fff0 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	0a9b      	lsrs	r3, r3, #10
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	4903      	ldr	r1, [pc, #12]	; (80049f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40023800 	.word	0x40023800
 80049f4:	0800647c 	.word	0x0800647c

080049f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049fc:	f7ff ffdc 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	0b5b      	lsrs	r3, r3, #13
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4903      	ldr	r1, [pc, #12]	; (8004a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	0800647c 	.word	0x0800647c

08004a20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e03f      	b.n	8004ab2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fe fa1a 	bl	8002e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2224      	movs	r2, #36	; 0x24
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 ff43 	bl	80058f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695a      	ldr	r2, [r3, #20]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
	...

08004abc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08c      	sub	sp, #48	; 0x30
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d165      	bne.n	8004ba2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_UART_Transmit_DMA+0x26>
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e05e      	b.n	8004ba4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_UART_Transmit_DMA+0x38>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e057      	b.n	8004ba4 <HAL_UART_Transmit_DMA+0xe8>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	88fa      	ldrh	r2, [r7, #6]
 8004b06:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	88fa      	ldrh	r2, [r7, #6]
 8004b0c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2221      	movs	r2, #33	; 0x21
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	4a22      	ldr	r2, [pc, #136]	; (8004bac <HAL_UART_Transmit_DMA+0xf0>)
 8004b22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	4a21      	ldr	r2, [pc, #132]	; (8004bb0 <HAL_UART_Transmit_DMA+0xf4>)
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	4a20      	ldr	r2, [pc, #128]	; (8004bb4 <HAL_UART_Transmit_DMA+0xf8>)
 8004b32:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b38:	2200      	movs	r2, #0
 8004b3a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004b3c:	f107 0308 	add.w	r3, r7, #8
 8004b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b48:	6819      	ldr	r1, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	461a      	mov	r2, r3
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	f7fe fdaa 	bl	80036ac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b60:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3314      	adds	r3, #20
 8004b70:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	617b      	str	r3, [r7, #20]
   return(result);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3314      	adds	r3, #20
 8004b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b8a:	627a      	str	r2, [r7, #36]	; 0x24
 8004b8c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6a39      	ldr	r1, [r7, #32]
 8004b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e5      	bne.n	8004b6a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
  }
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3730      	adds	r7, #48	; 0x30
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	08005189 	.word	0x08005189
 8004bb0:	08005223 	.word	0x08005223
 8004bb4:	0800539b 	.word	0x0800539b

08004bb8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d11d      	bne.n	8004c0e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_UART_Receive_DMA+0x26>
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e016      	b.n	8004c10 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_UART_Receive_DMA+0x38>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e00f      	b.n	8004c10 <HAL_UART_Receive_DMA+0x58>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004bfe:	88fb      	ldrh	r3, [r7, #6]
 8004c00:	461a      	mov	r2, r3
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fc13 	bl	8005430 <UART_Start_Receive_DMA>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	e000      	b.n	8004c10 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c0e:	2302      	movs	r3, #2
  }
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b0ba      	sub	sp, #232	; 0xe8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10f      	bne.n	8004c7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <HAL_UART_IRQHandler+0x66>
 8004c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fd7f 	bl	800577a <UART_Receive_IT>
      return;
 8004c7c:	e256      	b.n	800512c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 80de 	beq.w	8004e44 <HAL_UART_IRQHandler+0x22c>
 8004c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d106      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80d1 	beq.w	8004e44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <HAL_UART_IRQHandler+0xae>
 8004cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f043 0201 	orr.w	r2, r3, #1
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <HAL_UART_IRQHandler+0xd2>
 8004cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d005      	beq.n	8004cea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f043 0202 	orr.w	r2, r3, #2
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00b      	beq.n	8004d0e <HAL_UART_IRQHandler+0xf6>
 8004cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f043 0204 	orr.w	r2, r3, #4
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d011      	beq.n	8004d3e <HAL_UART_IRQHandler+0x126>
 8004d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d105      	bne.n	8004d32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d005      	beq.n	8004d3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f043 0208 	orr.w	r2, r3, #8
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 81ed 	beq.w	8005122 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_UART_IRQHandler+0x14e>
 8004d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fd0a 	bl	800577a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d70:	2b40      	cmp	r3, #64	; 0x40
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d103      	bne.n	8004d92 <HAL_UART_IRQHandler+0x17a>
 8004d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d04f      	beq.n	8004e32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fc12 	bl	80055bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d141      	bne.n	8004e2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3314      	adds	r3, #20
 8004dac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004dbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3314      	adds	r3, #20
 8004dce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004dde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1d9      	bne.n	8004da6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d013      	beq.n	8004e22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	4a7d      	ldr	r2, [pc, #500]	; (8004ff4 <HAL_UART_IRQHandler+0x3dc>)
 8004e00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe fd18 	bl	800383c <HAL_DMA_Abort_IT>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d016      	beq.n	8004e40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e20:	e00e      	b.n	8004e40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f99a 	bl	800515c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e28:	e00a      	b.n	8004e40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f996 	bl	800515c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e30:	e006      	b.n	8004e40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f992 	bl	800515c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e3e:	e170      	b.n	8005122 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e40:	bf00      	nop
    return;
 8004e42:	e16e      	b.n	8005122 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	f040 814a 	bne.w	80050e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e52:	f003 0310 	and.w	r3, r3, #16
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8143 	beq.w	80050e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 813c 	beq.w	80050e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60bb      	str	r3, [r7, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8a:	2b40      	cmp	r3, #64	; 0x40
 8004e8c:	f040 80b4 	bne.w	8004ff8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 8140 	beq.w	8005126 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	f080 8139 	bcs.w	8005126 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004eba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec6:	f000 8088 	beq.w	8004fda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ef6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1d9      	bne.n	8004eca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3314      	adds	r3, #20
 8004f1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f28:	f023 0301 	bic.w	r3, r3, #1
 8004f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3314      	adds	r3, #20
 8004f36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e1      	bne.n	8004f16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3314      	adds	r3, #20
 8004f58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3314      	adds	r3, #20
 8004f72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e3      	bne.n	8004f52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	330c      	adds	r3, #12
 8004f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004faa:	f023 0310 	bic.w	r3, r3, #16
 8004fae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004fbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fbe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e3      	bne.n	8004f98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fe fbc1 	bl	800375c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	4619      	mov	r1, r3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f8c0 	bl	8005170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ff0:	e099      	b.n	8005126 <HAL_UART_IRQHandler+0x50e>
 8004ff2:	bf00      	nop
 8004ff4:	08005683 	.word	0x08005683
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005000:	b29b      	uxth	r3, r3
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 808b 	beq.w	800512a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 8086 	beq.w	800512a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800502e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005030:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005034:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	330c      	adds	r3, #12
 800503e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005042:	647a      	str	r2, [r7, #68]	; 0x44
 8005044:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005048:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e3      	bne.n	800501e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3314      	adds	r3, #20
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	623b      	str	r3, [r7, #32]
   return(result);
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	f023 0301 	bic.w	r3, r3, #1
 800506c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3314      	adds	r3, #20
 8005076:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800507a:	633a      	str	r2, [r7, #48]	; 0x30
 800507c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1e3      	bne.n	8005056 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2220      	movs	r2, #32
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0310 	bic.w	r3, r3, #16
 80050b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	330c      	adds	r3, #12
 80050bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050c0:	61fa      	str	r2, [r7, #28]
 80050c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c4:	69b9      	ldr	r1, [r7, #24]
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	e841 2300 	strex	r3, r2, [r1]
 80050cc:	617b      	str	r3, [r7, #20]
   return(result);
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e3      	bne.n	800509c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050d8:	4619      	mov	r1, r3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f848 	bl	8005170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050e0:	e023      	b.n	800512a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d009      	beq.n	8005102 <HAL_UART_IRQHandler+0x4ea>
 80050ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fad5 	bl	80056aa <UART_Transmit_IT>
    return;
 8005100:	e014      	b.n	800512c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00e      	beq.n	800512c <HAL_UART_IRQHandler+0x514>
 800510e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d008      	beq.n	800512c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fb15 	bl	800574a <UART_EndTransmit_IT>
    return;
 8005120:	e004      	b.n	800512c <HAL_UART_IRQHandler+0x514>
    return;
 8005122:	bf00      	nop
 8005124:	e002      	b.n	800512c <HAL_UART_IRQHandler+0x514>
      return;
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <HAL_UART_IRQHandler+0x514>
      return;
 800512a:	bf00      	nop
  }
}
 800512c:	37e8      	adds	r7, #232	; 0xe8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop

08005134 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b090      	sub	sp, #64	; 0x40
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d137      	bne.n	8005214 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80051a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a6:	2200      	movs	r2, #0
 80051a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3314      	adds	r3, #20
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	623b      	str	r3, [r7, #32]
   return(result);
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80051c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3314      	adds	r3, #20
 80051c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051ca:	633a      	str	r2, [r7, #48]	; 0x30
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e5      	bne.n	80051aa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	330c      	adds	r3, #12
 80051e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051f4:	637b      	str	r3, [r7, #52]	; 0x34
 80051f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	330c      	adds	r3, #12
 80051fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051fe:	61fa      	str	r2, [r7, #28]
 8005200:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005202:	69b9      	ldr	r1, [r7, #24]
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	e841 2300 	strex	r3, r2, [r1]
 800520a:	617b      	str	r3, [r7, #20]
   return(result);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e5      	bne.n	80051de <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005212:	e002      	b.n	800521a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005214:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005216:	f7fc fc4d 	bl	8001ab4 <HAL_UART_TxCpltCallback>
}
 800521a:	bf00      	nop
 800521c:	3740      	adds	r7, #64	; 0x40
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f7ff ff7f 	bl	8005134 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005236:	bf00      	nop
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b09c      	sub	sp, #112	; 0x70
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005256:	2b00      	cmp	r3, #0
 8005258:	d172      	bne.n	8005340 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800525a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525c:	2200      	movs	r2, #0
 800525e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	330c      	adds	r3, #12
 8005266:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005272:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005276:	66bb      	str	r3, [r7, #104]	; 0x68
 8005278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	330c      	adds	r3, #12
 800527e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005280:	65ba      	str	r2, [r7, #88]	; 0x58
 8005282:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005286:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800528e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e5      	bne.n	8005260 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3314      	adds	r3, #20
 800529a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a6:	f023 0301 	bic.w	r3, r3, #1
 80052aa:	667b      	str	r3, [r7, #100]	; 0x64
 80052ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3314      	adds	r3, #20
 80052b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052b4:	647a      	str	r2, [r7, #68]	; 0x44
 80052b6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e5      	bne.n	8005294 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3314      	adds	r3, #20
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	623b      	str	r3, [r7, #32]
   return(result);
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052de:	663b      	str	r3, [r7, #96]	; 0x60
 80052e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3314      	adds	r3, #20
 80052e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052e8:	633a      	str	r2, [r7, #48]	; 0x30
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e5      	bne.n	80052c8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	2b01      	cmp	r3, #1
 800530a:	d119      	bne.n	8005340 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	60fb      	str	r3, [r7, #12]
   return(result);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0310 	bic.w	r3, r3, #16
 8005322:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	330c      	adds	r3, #12
 800532a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800532c:	61fa      	str	r2, [r7, #28]
 800532e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	69b9      	ldr	r1, [r7, #24]
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	617b      	str	r3, [r7, #20]
   return(result);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e5      	bne.n	800530c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	2b01      	cmp	r3, #1
 8005346:	d106      	bne.n	8005356 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800534c:	4619      	mov	r1, r3
 800534e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005350:	f7ff ff0e 	bl	8005170 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005354:	e002      	b.n	800535c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005356:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005358:	f7fc fbbe 	bl	8001ad8 <HAL_UART_RxCpltCallback>
}
 800535c:	bf00      	nop
 800535e:	3770      	adds	r7, #112	; 0x70
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	2b01      	cmp	r3, #1
 8005378:	d108      	bne.n	800538c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	b29b      	uxth	r3, r3
 8005382:	4619      	mov	r1, r3
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f7ff fef3 	bl	8005170 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800538a:	e002      	b.n	8005392 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f7ff fedb 	bl	8005148 <HAL_UART_RxHalfCpltCallback>
}
 8005392:	bf00      	nop
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b6:	2b80      	cmp	r3, #128	; 0x80
 80053b8:	bf0c      	ite	eq
 80053ba:	2301      	moveq	r3, #1
 80053bc:	2300      	movne	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b21      	cmp	r3, #33	; 0x21
 80053cc:	d108      	bne.n	80053e0 <UART_DMAError+0x46>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2200      	movs	r2, #0
 80053d8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80053da:	68b8      	ldr	r0, [r7, #8]
 80053dc:	f000 f8c6 	bl	800556c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	bf0c      	ite	eq
 80053ee:	2301      	moveq	r3, #1
 80053f0:	2300      	movne	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b22      	cmp	r3, #34	; 0x22
 8005400:	d108      	bne.n	8005414 <UART_DMAError+0x7a>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2200      	movs	r2, #0
 800540c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800540e:	68b8      	ldr	r0, [r7, #8]
 8005410:	f000 f8d4 	bl	80055bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	f043 0210 	orr.w	r2, r3, #16
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005420:	68b8      	ldr	r0, [r7, #8]
 8005422:	f7ff fe9b 	bl	800515c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005426:	bf00      	nop
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
	...

08005430 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b098      	sub	sp, #96	; 0x60
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	4613      	mov	r3, r2
 800543c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	88fa      	ldrh	r2, [r7, #6]
 8005448:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2222      	movs	r2, #34	; 0x22
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	4a40      	ldr	r2, [pc, #256]	; (8005560 <UART_Start_Receive_DMA+0x130>)
 800545e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	4a3f      	ldr	r2, [pc, #252]	; (8005564 <UART_Start_Receive_DMA+0x134>)
 8005466:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	4a3e      	ldr	r2, [pc, #248]	; (8005568 <UART_Start_Receive_DMA+0x138>)
 800546e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	2200      	movs	r2, #0
 8005476:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005478:	f107 0308 	add.w	r3, r7, #8
 800547c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3304      	adds	r3, #4
 8005488:	4619      	mov	r1, r3
 800548a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	f7fe f90c 	bl	80036ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d019      	beq.n	80054ee <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	330c      	adds	r3, #12
 80054c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054da:	64fa      	str	r2, [r7, #76]	; 0x4c
 80054dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80054e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e5      	bne.n	80054ba <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3314      	adds	r3, #20
 80054f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	e853 3f00 	ldrex	r3, [r3]
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	f043 0301 	orr.w	r3, r3, #1
 8005504:	657b      	str	r3, [r7, #84]	; 0x54
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3314      	adds	r3, #20
 800550c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800550e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005510:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e5      	bne.n	80054ee <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3314      	adds	r3, #20
 8005528:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	617b      	str	r3, [r7, #20]
   return(result);
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005538:	653b      	str	r3, [r7, #80]	; 0x50
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3314      	adds	r3, #20
 8005540:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005542:	627a      	str	r2, [r7, #36]	; 0x24
 8005544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	6a39      	ldr	r1, [r7, #32]
 8005548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e5      	bne.n	8005522 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3760      	adds	r7, #96	; 0x60
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	0800523f 	.word	0x0800523f
 8005564:	08005365 	.word	0x08005365
 8005568:	0800539b 	.word	0x0800539b

0800556c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b089      	sub	sp, #36	; 0x24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	60bb      	str	r3, [r7, #8]
   return(result);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800558a:	61fb      	str	r3, [r7, #28]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	330c      	adds	r3, #12
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	61ba      	str	r2, [r7, #24]
 8005596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	6979      	ldr	r1, [r7, #20]
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	613b      	str	r3, [r7, #16]
   return(result);
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e5      	bne.n	8005574 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80055b0:	bf00      	nop
 80055b2:	3724      	adds	r7, #36	; 0x24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055bc:	b480      	push	{r7}
 80055be:	b095      	sub	sp, #84	; 0x54
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	330c      	adds	r3, #12
 80055ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055e4:	643a      	str	r2, [r7, #64]	; 0x40
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e5      	bne.n	80055c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3314      	adds	r3, #20
 80055fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	61fb      	str	r3, [r7, #28]
   return(result);
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f023 0301 	bic.w	r3, r3, #1
 800560e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3314      	adds	r3, #20
 8005616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005618:	62fa      	str	r2, [r7, #44]	; 0x2c
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800561e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e5      	bne.n	80055f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	2b01      	cmp	r3, #1
 8005632:	d119      	bne.n	8005668 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	330c      	adds	r3, #12
 800563a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	60bb      	str	r3, [r7, #8]
   return(result);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f023 0310 	bic.w	r3, r3, #16
 800564a:	647b      	str	r3, [r7, #68]	; 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005654:	61ba      	str	r2, [r7, #24]
 8005656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	6979      	ldr	r1, [r7, #20]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	e841 2300 	strex	r3, r2, [r1]
 8005660:	613b      	str	r3, [r7, #16]
   return(result);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e5      	bne.n	8005634 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005676:	bf00      	nop
 8005678:	3754      	adds	r7, #84	; 0x54
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7ff fd5d 	bl	800515c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b21      	cmp	r3, #33	; 0x21
 80056bc:	d13e      	bne.n	800573c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c6:	d114      	bne.n	80056f2 <UART_Transmit_IT+0x48>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d110      	bne.n	80056f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	1c9a      	adds	r2, r3, #2
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	621a      	str	r2, [r3, #32]
 80056f0:	e008      	b.n	8005704 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6211      	str	r1, [r2, #32]
 80056fc:	781a      	ldrb	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29b      	uxth	r3, r3
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	4619      	mov	r1, r3
 8005712:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10f      	bne.n	8005738 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005726:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005736:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	e000      	b.n	800573e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800573c:	2302      	movs	r3, #2
  }
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005760:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fc f9a2 	bl	8001ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b08c      	sub	sp, #48	; 0x30
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b22      	cmp	r3, #34	; 0x22
 800578c:	f040 80ab 	bne.w	80058e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005798:	d117      	bne.n	80057ca <UART_Receive_IT+0x50>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d113      	bne.n	80057ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c2:	1c9a      	adds	r2, r3, #2
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	629a      	str	r2, [r3, #40]	; 0x28
 80057c8:	e026      	b.n	8005818 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057dc:	d007      	beq.n	80057ee <UART_Receive_IT+0x74>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <UART_Receive_IT+0x82>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	e008      	b.n	800580e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005808:	b2da      	uxtb	r2, r3
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29b      	uxth	r3, r3
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	4619      	mov	r1, r3
 8005826:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005828:	2b00      	cmp	r3, #0
 800582a:	d15a      	bne.n	80058e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0220 	bic.w	r2, r2, #32
 800583a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800584a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695a      	ldr	r2, [r3, #20]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	2b01      	cmp	r3, #1
 800586a:	d135      	bne.n	80058d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	330c      	adds	r3, #12
 8005878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	613b      	str	r3, [r7, #16]
   return(result);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f023 0310 	bic.w	r3, r3, #16
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	330c      	adds	r3, #12
 8005890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005892:	623a      	str	r2, [r7, #32]
 8005894:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	69f9      	ldr	r1, [r7, #28]
 8005898:	6a3a      	ldr	r2, [r7, #32]
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	61bb      	str	r3, [r7, #24]
   return(result);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e5      	bne.n	8005872 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d10a      	bne.n	80058ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058b4:	2300      	movs	r3, #0
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058ce:	4619      	mov	r1, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff fc4d 	bl	8005170 <HAL_UARTEx_RxEventCallback>
 80058d6:	e002      	b.n	80058de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7fc f8fd 	bl	8001ad8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	e002      	b.n	80058e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e000      	b.n	80058e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058e6:	2302      	movs	r3, #2
  }
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3730      	adds	r7, #48	; 0x30
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058f4:	b0c0      	sub	sp, #256	; 0x100
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590c:	68d9      	ldr	r1, [r3, #12]
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	ea40 0301 	orr.w	r3, r0, r1
 8005918:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800591a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	431a      	orrs	r2, r3
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	431a      	orrs	r2, r3
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005948:	f021 010c 	bic.w	r1, r1, #12
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005956:	430b      	orrs	r3, r1
 8005958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800595a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596a:	6999      	ldr	r1, [r3, #24]
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	ea40 0301 	orr.w	r3, r0, r1
 8005976:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4b8f      	ldr	r3, [pc, #572]	; (8005bbc <UART_SetConfig+0x2cc>)
 8005980:	429a      	cmp	r2, r3
 8005982:	d005      	beq.n	8005990 <UART_SetConfig+0xa0>
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	4b8d      	ldr	r3, [pc, #564]	; (8005bc0 <UART_SetConfig+0x2d0>)
 800598c:	429a      	cmp	r2, r3
 800598e:	d104      	bne.n	800599a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005990:	f7ff f832 	bl	80049f8 <HAL_RCC_GetPCLK2Freq>
 8005994:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005998:	e003      	b.n	80059a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800599a:	f7ff f819 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 800599e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ac:	f040 810c 	bne.w	8005bc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059b4:	2200      	movs	r2, #0
 80059b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80059be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80059c2:	4622      	mov	r2, r4
 80059c4:	462b      	mov	r3, r5
 80059c6:	1891      	adds	r1, r2, r2
 80059c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80059ca:	415b      	adcs	r3, r3
 80059cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059d2:	4621      	mov	r1, r4
 80059d4:	eb12 0801 	adds.w	r8, r2, r1
 80059d8:	4629      	mov	r1, r5
 80059da:	eb43 0901 	adc.w	r9, r3, r1
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059f2:	4690      	mov	r8, r2
 80059f4:	4699      	mov	r9, r3
 80059f6:	4623      	mov	r3, r4
 80059f8:	eb18 0303 	adds.w	r3, r8, r3
 80059fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a00:	462b      	mov	r3, r5
 8005a02:	eb49 0303 	adc.w	r3, r9, r3
 8005a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a1e:	460b      	mov	r3, r1
 8005a20:	18db      	adds	r3, r3, r3
 8005a22:	653b      	str	r3, [r7, #80]	; 0x50
 8005a24:	4613      	mov	r3, r2
 8005a26:	eb42 0303 	adc.w	r3, r2, r3
 8005a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a34:	f7fa fbd0 	bl	80001d8 <__aeabi_uldivmod>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4b61      	ldr	r3, [pc, #388]	; (8005bc4 <UART_SetConfig+0x2d4>)
 8005a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	011c      	lsls	r4, r3, #4
 8005a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a58:	4642      	mov	r2, r8
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	1891      	adds	r1, r2, r2
 8005a5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a60:	415b      	adcs	r3, r3
 8005a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a68:	4641      	mov	r1, r8
 8005a6a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a6e:	4649      	mov	r1, r9
 8005a70:	eb43 0b01 	adc.w	fp, r3, r1
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a88:	4692      	mov	sl, r2
 8005a8a:	469b      	mov	fp, r3
 8005a8c:	4643      	mov	r3, r8
 8005a8e:	eb1a 0303 	adds.w	r3, sl, r3
 8005a92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a96:	464b      	mov	r3, r9
 8005a98:	eb4b 0303 	adc.w	r3, fp, r3
 8005a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ab0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	18db      	adds	r3, r3, r3
 8005ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8005aba:	4613      	mov	r3, r2
 8005abc:	eb42 0303 	adc.w	r3, r2, r3
 8005ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ac6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005aca:	f7fa fb85 	bl	80001d8 <__aeabi_uldivmod>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	4b3b      	ldr	r3, [pc, #236]	; (8005bc4 <UART_SetConfig+0x2d4>)
 8005ad6:	fba3 2301 	umull	r2, r3, r3, r1
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	2264      	movs	r2, #100	; 0x64
 8005ade:	fb02 f303 	mul.w	r3, r2, r3
 8005ae2:	1acb      	subs	r3, r1, r3
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005aea:	4b36      	ldr	r3, [pc, #216]	; (8005bc4 <UART_SetConfig+0x2d4>)
 8005aec:	fba3 2302 	umull	r2, r3, r3, r2
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005af8:	441c      	add	r4, r3
 8005afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	464b      	mov	r3, r9
 8005b10:	1891      	adds	r1, r2, r2
 8005b12:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b14:	415b      	adcs	r3, r3
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	1851      	adds	r1, r2, r1
 8005b20:	6339      	str	r1, [r7, #48]	; 0x30
 8005b22:	4649      	mov	r1, r9
 8005b24:	414b      	adcs	r3, r1
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b34:	4659      	mov	r1, fp
 8005b36:	00cb      	lsls	r3, r1, #3
 8005b38:	4651      	mov	r1, sl
 8005b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b3e:	4651      	mov	r1, sl
 8005b40:	00ca      	lsls	r2, r1, #3
 8005b42:	4610      	mov	r0, r2
 8005b44:	4619      	mov	r1, r3
 8005b46:	4603      	mov	r3, r0
 8005b48:	4642      	mov	r2, r8
 8005b4a:	189b      	adds	r3, r3, r2
 8005b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b50:	464b      	mov	r3, r9
 8005b52:	460a      	mov	r2, r1
 8005b54:	eb42 0303 	adc.w	r3, r2, r3
 8005b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b70:	460b      	mov	r3, r1
 8005b72:	18db      	adds	r3, r3, r3
 8005b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b76:	4613      	mov	r3, r2
 8005b78:	eb42 0303 	adc.w	r3, r2, r3
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b86:	f7fa fb27 	bl	80001d8 <__aeabi_uldivmod>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	; (8005bc4 <UART_SetConfig+0x2d4>)
 8005b90:	fba3 1302 	umull	r1, r3, r3, r2
 8005b94:	095b      	lsrs	r3, r3, #5
 8005b96:	2164      	movs	r1, #100	; 0x64
 8005b98:	fb01 f303 	mul.w	r3, r1, r3
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	3332      	adds	r3, #50	; 0x32
 8005ba2:	4a08      	ldr	r2, [pc, #32]	; (8005bc4 <UART_SetConfig+0x2d4>)
 8005ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	f003 0207 	and.w	r2, r3, #7
 8005bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4422      	add	r2, r4
 8005bb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bb8:	e105      	b.n	8005dc6 <UART_SetConfig+0x4d6>
 8005bba:	bf00      	nop
 8005bbc:	40011000 	.word	0x40011000
 8005bc0:	40011400 	.word	0x40011400
 8005bc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005bd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005bda:	4642      	mov	r2, r8
 8005bdc:	464b      	mov	r3, r9
 8005bde:	1891      	adds	r1, r2, r2
 8005be0:	6239      	str	r1, [r7, #32]
 8005be2:	415b      	adcs	r3, r3
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
 8005be6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bea:	4641      	mov	r1, r8
 8005bec:	1854      	adds	r4, r2, r1
 8005bee:	4649      	mov	r1, r9
 8005bf0:	eb43 0501 	adc.w	r5, r3, r1
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	00eb      	lsls	r3, r5, #3
 8005bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c02:	00e2      	lsls	r2, r4, #3
 8005c04:	4614      	mov	r4, r2
 8005c06:	461d      	mov	r5, r3
 8005c08:	4643      	mov	r3, r8
 8005c0a:	18e3      	adds	r3, r4, r3
 8005c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c10:	464b      	mov	r3, r9
 8005c12:	eb45 0303 	adc.w	r3, r5, r3
 8005c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	f04f 0300 	mov.w	r3, #0
 8005c32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c36:	4629      	mov	r1, r5
 8005c38:	008b      	lsls	r3, r1, #2
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c40:	4621      	mov	r1, r4
 8005c42:	008a      	lsls	r2, r1, #2
 8005c44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c48:	f7fa fac6 	bl	80001d8 <__aeabi_uldivmod>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4b60      	ldr	r3, [pc, #384]	; (8005dd4 <UART_SetConfig+0x4e4>)
 8005c52:	fba3 2302 	umull	r2, r3, r3, r2
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	011c      	lsls	r4, r3, #4
 8005c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c6c:	4642      	mov	r2, r8
 8005c6e:	464b      	mov	r3, r9
 8005c70:	1891      	adds	r1, r2, r2
 8005c72:	61b9      	str	r1, [r7, #24]
 8005c74:	415b      	adcs	r3, r3
 8005c76:	61fb      	str	r3, [r7, #28]
 8005c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c7c:	4641      	mov	r1, r8
 8005c7e:	1851      	adds	r1, r2, r1
 8005c80:	6139      	str	r1, [r7, #16]
 8005c82:	4649      	mov	r1, r9
 8005c84:	414b      	adcs	r3, r1
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c94:	4659      	mov	r1, fp
 8005c96:	00cb      	lsls	r3, r1, #3
 8005c98:	4651      	mov	r1, sl
 8005c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c9e:	4651      	mov	r1, sl
 8005ca0:	00ca      	lsls	r2, r1, #3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	4642      	mov	r2, r8
 8005caa:	189b      	adds	r3, r3, r2
 8005cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	460a      	mov	r2, r1
 8005cb4:	eb42 0303 	adc.w	r3, r2, r3
 8005cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	008b      	lsls	r3, r1, #2
 8005cd8:	4641      	mov	r1, r8
 8005cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cde:	4641      	mov	r1, r8
 8005ce0:	008a      	lsls	r2, r1, #2
 8005ce2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ce6:	f7fa fa77 	bl	80001d8 <__aeabi_uldivmod>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4b39      	ldr	r3, [pc, #228]	; (8005dd4 <UART_SetConfig+0x4e4>)
 8005cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	2164      	movs	r1, #100	; 0x64
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	3332      	adds	r3, #50	; 0x32
 8005d02:	4a34      	ldr	r2, [pc, #208]	; (8005dd4 <UART_SetConfig+0x4e4>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d0e:	441c      	add	r4, r3
 8005d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d14:	2200      	movs	r2, #0
 8005d16:	673b      	str	r3, [r7, #112]	; 0x70
 8005d18:	677a      	str	r2, [r7, #116]	; 0x74
 8005d1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d1e:	4642      	mov	r2, r8
 8005d20:	464b      	mov	r3, r9
 8005d22:	1891      	adds	r1, r2, r2
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	415b      	adcs	r3, r3
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d2e:	4641      	mov	r1, r8
 8005d30:	1851      	adds	r1, r2, r1
 8005d32:	6039      	str	r1, [r7, #0]
 8005d34:	4649      	mov	r1, r9
 8005d36:	414b      	adcs	r3, r1
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d46:	4659      	mov	r1, fp
 8005d48:	00cb      	lsls	r3, r1, #3
 8005d4a:	4651      	mov	r1, sl
 8005d4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d50:	4651      	mov	r1, sl
 8005d52:	00ca      	lsls	r2, r1, #3
 8005d54:	4610      	mov	r0, r2
 8005d56:	4619      	mov	r1, r3
 8005d58:	4603      	mov	r3, r0
 8005d5a:	4642      	mov	r2, r8
 8005d5c:	189b      	adds	r3, r3, r2
 8005d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d60:	464b      	mov	r3, r9
 8005d62:	460a      	mov	r2, r1
 8005d64:	eb42 0303 	adc.w	r3, r2, r3
 8005d68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	663b      	str	r3, [r7, #96]	; 0x60
 8005d74:	667a      	str	r2, [r7, #100]	; 0x64
 8005d76:	f04f 0200 	mov.w	r2, #0
 8005d7a:	f04f 0300 	mov.w	r3, #0
 8005d7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d82:	4649      	mov	r1, r9
 8005d84:	008b      	lsls	r3, r1, #2
 8005d86:	4641      	mov	r1, r8
 8005d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	008a      	lsls	r2, r1, #2
 8005d90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d94:	f7fa fa20 	bl	80001d8 <__aeabi_uldivmod>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <UART_SetConfig+0x4e4>)
 8005d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	2164      	movs	r1, #100	; 0x64
 8005da6:	fb01 f303 	mul.w	r3, r1, r3
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	3332      	adds	r3, #50	; 0x32
 8005db0:	4a08      	ldr	r2, [pc, #32]	; (8005dd4 <UART_SetConfig+0x4e4>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	f003 020f 	and.w	r2, r3, #15
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4422      	add	r2, r4
 8005dc4:	609a      	str	r2, [r3, #8]
}
 8005dc6:	bf00      	nop
 8005dc8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dd2:	bf00      	nop
 8005dd4:	51eb851f 	.word	0x51eb851f

08005dd8 <__cxa_pure_virtual>:
 8005dd8:	b508      	push	{r3, lr}
 8005dda:	f000 f80d 	bl	8005df8 <_ZSt9terminatev>

08005dde <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005dde:	b508      	push	{r3, lr}
 8005de0:	4780      	blx	r0
 8005de2:	f000 f80e 	bl	8005e02 <abort>
	...

08005de8 <_ZSt13get_terminatev>:
 8005de8:	4b02      	ldr	r3, [pc, #8]	; (8005df4 <_ZSt13get_terminatev+0xc>)
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	f3bf 8f5b 	dmb	ish
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20000014 	.word	0x20000014

08005df8 <_ZSt9terminatev>:
 8005df8:	b508      	push	{r3, lr}
 8005dfa:	f7ff fff5 	bl	8005de8 <_ZSt13get_terminatev>
 8005dfe:	f7ff ffee 	bl	8005dde <_ZN10__cxxabiv111__terminateEPFvvE>

08005e02 <abort>:
 8005e02:	b508      	push	{r3, lr}
 8005e04:	2006      	movs	r0, #6
 8005e06:	f000 f873 	bl	8005ef0 <raise>
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	f7fd f950 	bl	80030b0 <_exit>

08005e10 <__errno>:
 8005e10:	4b01      	ldr	r3, [pc, #4]	; (8005e18 <__errno+0x8>)
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	20000018 	.word	0x20000018

08005e1c <__libc_init_array>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	4d0d      	ldr	r5, [pc, #52]	; (8005e54 <__libc_init_array+0x38>)
 8005e20:	4c0d      	ldr	r4, [pc, #52]	; (8005e58 <__libc_init_array+0x3c>)
 8005e22:	1b64      	subs	r4, r4, r5
 8005e24:	10a4      	asrs	r4, r4, #2
 8005e26:	2600      	movs	r6, #0
 8005e28:	42a6      	cmp	r6, r4
 8005e2a:	d109      	bne.n	8005e40 <__libc_init_array+0x24>
 8005e2c:	4d0b      	ldr	r5, [pc, #44]	; (8005e5c <__libc_init_array+0x40>)
 8005e2e:	4c0c      	ldr	r4, [pc, #48]	; (8005e60 <__libc_init_array+0x44>)
 8005e30:	f000 f9b0 	bl	8006194 <_init>
 8005e34:	1b64      	subs	r4, r4, r5
 8005e36:	10a4      	asrs	r4, r4, #2
 8005e38:	2600      	movs	r6, #0
 8005e3a:	42a6      	cmp	r6, r4
 8005e3c:	d105      	bne.n	8005e4a <__libc_init_array+0x2e>
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e44:	4798      	blx	r3
 8005e46:	3601      	adds	r6, #1
 8005e48:	e7ee      	b.n	8005e28 <__libc_init_array+0xc>
 8005e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e4e:	4798      	blx	r3
 8005e50:	3601      	adds	r6, #1
 8005e52:	e7f2      	b.n	8005e3a <__libc_init_array+0x1e>
 8005e54:	08006494 	.word	0x08006494
 8005e58:	08006494 	.word	0x08006494
 8005e5c:	08006494 	.word	0x08006494
 8005e60:	0800649c 	.word	0x0800649c

08005e64 <memcpy>:
 8005e64:	440a      	add	r2, r1
 8005e66:	4291      	cmp	r1, r2
 8005e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e6c:	d100      	bne.n	8005e70 <memcpy+0xc>
 8005e6e:	4770      	bx	lr
 8005e70:	b510      	push	{r4, lr}
 8005e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e7a:	4291      	cmp	r1, r2
 8005e7c:	d1f9      	bne.n	8005e72 <memcpy+0xe>
 8005e7e:	bd10      	pop	{r4, pc}

08005e80 <memset>:
 8005e80:	4402      	add	r2, r0
 8005e82:	4603      	mov	r3, r0
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d100      	bne.n	8005e8a <memset+0xa>
 8005e88:	4770      	bx	lr
 8005e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e8e:	e7f9      	b.n	8005e84 <memset+0x4>

08005e90 <realloc>:
 8005e90:	4b02      	ldr	r3, [pc, #8]	; (8005e9c <realloc+0xc>)
 8005e92:	460a      	mov	r2, r1
 8005e94:	4601      	mov	r1, r0
 8005e96:	6818      	ldr	r0, [r3, #0]
 8005e98:	f000 b8da 	b.w	8006050 <_realloc_r>
 8005e9c:	20000018 	.word	0x20000018

08005ea0 <_raise_r>:
 8005ea0:	291f      	cmp	r1, #31
 8005ea2:	b538      	push	{r3, r4, r5, lr}
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	460d      	mov	r5, r1
 8005ea8:	d904      	bls.n	8005eb4 <_raise_r+0x14>
 8005eaa:	2316      	movs	r3, #22
 8005eac:	6003      	str	r3, [r0, #0]
 8005eae:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}
 8005eb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005eb6:	b112      	cbz	r2, 8005ebe <_raise_r+0x1e>
 8005eb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ebc:	b94b      	cbnz	r3, 8005ed2 <_raise_r+0x32>
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f000 f830 	bl	8005f24 <_getpid_r>
 8005ec4:	462a      	mov	r2, r5
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	4620      	mov	r0, r4
 8005eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ece:	f000 b817 	b.w	8005f00 <_kill_r>
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d00a      	beq.n	8005eec <_raise_r+0x4c>
 8005ed6:	1c59      	adds	r1, r3, #1
 8005ed8:	d103      	bne.n	8005ee2 <_raise_r+0x42>
 8005eda:	2316      	movs	r3, #22
 8005edc:	6003      	str	r3, [r0, #0]
 8005ede:	2001      	movs	r0, #1
 8005ee0:	e7e7      	b.n	8005eb2 <_raise_r+0x12>
 8005ee2:	2400      	movs	r4, #0
 8005ee4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ee8:	4628      	mov	r0, r5
 8005eea:	4798      	blx	r3
 8005eec:	2000      	movs	r0, #0
 8005eee:	e7e0      	b.n	8005eb2 <_raise_r+0x12>

08005ef0 <raise>:
 8005ef0:	4b02      	ldr	r3, [pc, #8]	; (8005efc <raise+0xc>)
 8005ef2:	4601      	mov	r1, r0
 8005ef4:	6818      	ldr	r0, [r3, #0]
 8005ef6:	f7ff bfd3 	b.w	8005ea0 <_raise_r>
 8005efa:	bf00      	nop
 8005efc:	20000018 	.word	0x20000018

08005f00 <_kill_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	4d07      	ldr	r5, [pc, #28]	; (8005f20 <_kill_r+0x20>)
 8005f04:	2300      	movs	r3, #0
 8005f06:	4604      	mov	r4, r0
 8005f08:	4608      	mov	r0, r1
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	602b      	str	r3, [r5, #0]
 8005f0e:	f7fd f8bf 	bl	8003090 <_kill>
 8005f12:	1c43      	adds	r3, r0, #1
 8005f14:	d102      	bne.n	8005f1c <_kill_r+0x1c>
 8005f16:	682b      	ldr	r3, [r5, #0]
 8005f18:	b103      	cbz	r3, 8005f1c <_kill_r+0x1c>
 8005f1a:	6023      	str	r3, [r4, #0]
 8005f1c:	bd38      	pop	{r3, r4, r5, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000b70 	.word	0x20000b70

08005f24 <_getpid_r>:
 8005f24:	f7fd b8ac 	b.w	8003080 <_getpid>

08005f28 <sbrk_aligned>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	4e0e      	ldr	r6, [pc, #56]	; (8005f64 <sbrk_aligned+0x3c>)
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	6831      	ldr	r1, [r6, #0]
 8005f30:	4605      	mov	r5, r0
 8005f32:	b911      	cbnz	r1, 8005f3a <sbrk_aligned+0x12>
 8005f34:	f000 f8bc 	bl	80060b0 <_sbrk_r>
 8005f38:	6030      	str	r0, [r6, #0]
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f000 f8b7 	bl	80060b0 <_sbrk_r>
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	d00a      	beq.n	8005f5c <sbrk_aligned+0x34>
 8005f46:	1cc4      	adds	r4, r0, #3
 8005f48:	f024 0403 	bic.w	r4, r4, #3
 8005f4c:	42a0      	cmp	r0, r4
 8005f4e:	d007      	beq.n	8005f60 <sbrk_aligned+0x38>
 8005f50:	1a21      	subs	r1, r4, r0
 8005f52:	4628      	mov	r0, r5
 8005f54:	f000 f8ac 	bl	80060b0 <_sbrk_r>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d101      	bne.n	8005f60 <sbrk_aligned+0x38>
 8005f5c:	f04f 34ff 	mov.w	r4, #4294967295
 8005f60:	4620      	mov	r0, r4
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	20000b6c 	.word	0x20000b6c

08005f68 <_malloc_r>:
 8005f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6c:	1ccd      	adds	r5, r1, #3
 8005f6e:	f025 0503 	bic.w	r5, r5, #3
 8005f72:	3508      	adds	r5, #8
 8005f74:	2d0c      	cmp	r5, #12
 8005f76:	bf38      	it	cc
 8005f78:	250c      	movcc	r5, #12
 8005f7a:	2d00      	cmp	r5, #0
 8005f7c:	4607      	mov	r7, r0
 8005f7e:	db01      	blt.n	8005f84 <_malloc_r+0x1c>
 8005f80:	42a9      	cmp	r1, r5
 8005f82:	d905      	bls.n	8005f90 <_malloc_r+0x28>
 8005f84:	230c      	movs	r3, #12
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	2600      	movs	r6, #0
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f90:	4e2e      	ldr	r6, [pc, #184]	; (800604c <_malloc_r+0xe4>)
 8005f92:	f000 f89d 	bl	80060d0 <__malloc_lock>
 8005f96:	6833      	ldr	r3, [r6, #0]
 8005f98:	461c      	mov	r4, r3
 8005f9a:	bb34      	cbnz	r4, 8005fea <_malloc_r+0x82>
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	4638      	mov	r0, r7
 8005fa0:	f7ff ffc2 	bl	8005f28 <sbrk_aligned>
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	d14d      	bne.n	8006046 <_malloc_r+0xde>
 8005faa:	6834      	ldr	r4, [r6, #0]
 8005fac:	4626      	mov	r6, r4
 8005fae:	2e00      	cmp	r6, #0
 8005fb0:	d140      	bne.n	8006034 <_malloc_r+0xcc>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	eb04 0803 	add.w	r8, r4, r3
 8005fbc:	f000 f878 	bl	80060b0 <_sbrk_r>
 8005fc0:	4580      	cmp	r8, r0
 8005fc2:	d13a      	bne.n	800603a <_malloc_r+0xd2>
 8005fc4:	6821      	ldr	r1, [r4, #0]
 8005fc6:	3503      	adds	r5, #3
 8005fc8:	1a6d      	subs	r5, r5, r1
 8005fca:	f025 0503 	bic.w	r5, r5, #3
 8005fce:	3508      	adds	r5, #8
 8005fd0:	2d0c      	cmp	r5, #12
 8005fd2:	bf38      	it	cc
 8005fd4:	250c      	movcc	r5, #12
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	4638      	mov	r0, r7
 8005fda:	f7ff ffa5 	bl	8005f28 <sbrk_aligned>
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d02b      	beq.n	800603a <_malloc_r+0xd2>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	442b      	add	r3, r5
 8005fe6:	6023      	str	r3, [r4, #0]
 8005fe8:	e00e      	b.n	8006008 <_malloc_r+0xa0>
 8005fea:	6822      	ldr	r2, [r4, #0]
 8005fec:	1b52      	subs	r2, r2, r5
 8005fee:	d41e      	bmi.n	800602e <_malloc_r+0xc6>
 8005ff0:	2a0b      	cmp	r2, #11
 8005ff2:	d916      	bls.n	8006022 <_malloc_r+0xba>
 8005ff4:	1961      	adds	r1, r4, r5
 8005ff6:	42a3      	cmp	r3, r4
 8005ff8:	6025      	str	r5, [r4, #0]
 8005ffa:	bf18      	it	ne
 8005ffc:	6059      	strne	r1, [r3, #4]
 8005ffe:	6863      	ldr	r3, [r4, #4]
 8006000:	bf08      	it	eq
 8006002:	6031      	streq	r1, [r6, #0]
 8006004:	5162      	str	r2, [r4, r5]
 8006006:	604b      	str	r3, [r1, #4]
 8006008:	4638      	mov	r0, r7
 800600a:	f104 060b 	add.w	r6, r4, #11
 800600e:	f000 f865 	bl	80060dc <__malloc_unlock>
 8006012:	f026 0607 	bic.w	r6, r6, #7
 8006016:	1d23      	adds	r3, r4, #4
 8006018:	1af2      	subs	r2, r6, r3
 800601a:	d0b6      	beq.n	8005f8a <_malloc_r+0x22>
 800601c:	1b9b      	subs	r3, r3, r6
 800601e:	50a3      	str	r3, [r4, r2]
 8006020:	e7b3      	b.n	8005f8a <_malloc_r+0x22>
 8006022:	6862      	ldr	r2, [r4, #4]
 8006024:	42a3      	cmp	r3, r4
 8006026:	bf0c      	ite	eq
 8006028:	6032      	streq	r2, [r6, #0]
 800602a:	605a      	strne	r2, [r3, #4]
 800602c:	e7ec      	b.n	8006008 <_malloc_r+0xa0>
 800602e:	4623      	mov	r3, r4
 8006030:	6864      	ldr	r4, [r4, #4]
 8006032:	e7b2      	b.n	8005f9a <_malloc_r+0x32>
 8006034:	4634      	mov	r4, r6
 8006036:	6876      	ldr	r6, [r6, #4]
 8006038:	e7b9      	b.n	8005fae <_malloc_r+0x46>
 800603a:	230c      	movs	r3, #12
 800603c:	603b      	str	r3, [r7, #0]
 800603e:	4638      	mov	r0, r7
 8006040:	f000 f84c 	bl	80060dc <__malloc_unlock>
 8006044:	e7a1      	b.n	8005f8a <_malloc_r+0x22>
 8006046:	6025      	str	r5, [r4, #0]
 8006048:	e7de      	b.n	8006008 <_malloc_r+0xa0>
 800604a:	bf00      	nop
 800604c:	20000b68 	.word	0x20000b68

08006050 <_realloc_r>:
 8006050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006054:	4680      	mov	r8, r0
 8006056:	4614      	mov	r4, r2
 8006058:	460e      	mov	r6, r1
 800605a:	b921      	cbnz	r1, 8006066 <_realloc_r+0x16>
 800605c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006060:	4611      	mov	r1, r2
 8006062:	f7ff bf81 	b.w	8005f68 <_malloc_r>
 8006066:	b92a      	cbnz	r2, 8006074 <_realloc_r+0x24>
 8006068:	f000 f83e 	bl	80060e8 <_free_r>
 800606c:	4625      	mov	r5, r4
 800606e:	4628      	mov	r0, r5
 8006070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006074:	f000 f884 	bl	8006180 <_malloc_usable_size_r>
 8006078:	4284      	cmp	r4, r0
 800607a:	4607      	mov	r7, r0
 800607c:	d802      	bhi.n	8006084 <_realloc_r+0x34>
 800607e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006082:	d812      	bhi.n	80060aa <_realloc_r+0x5a>
 8006084:	4621      	mov	r1, r4
 8006086:	4640      	mov	r0, r8
 8006088:	f7ff ff6e 	bl	8005f68 <_malloc_r>
 800608c:	4605      	mov	r5, r0
 800608e:	2800      	cmp	r0, #0
 8006090:	d0ed      	beq.n	800606e <_realloc_r+0x1e>
 8006092:	42bc      	cmp	r4, r7
 8006094:	4622      	mov	r2, r4
 8006096:	4631      	mov	r1, r6
 8006098:	bf28      	it	cs
 800609a:	463a      	movcs	r2, r7
 800609c:	f7ff fee2 	bl	8005e64 <memcpy>
 80060a0:	4631      	mov	r1, r6
 80060a2:	4640      	mov	r0, r8
 80060a4:	f000 f820 	bl	80060e8 <_free_r>
 80060a8:	e7e1      	b.n	800606e <_realloc_r+0x1e>
 80060aa:	4635      	mov	r5, r6
 80060ac:	e7df      	b.n	800606e <_realloc_r+0x1e>
	...

080060b0 <_sbrk_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4d06      	ldr	r5, [pc, #24]	; (80060cc <_sbrk_r+0x1c>)
 80060b4:	2300      	movs	r3, #0
 80060b6:	4604      	mov	r4, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	602b      	str	r3, [r5, #0]
 80060bc:	f7fd f802 	bl	80030c4 <_sbrk>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_sbrk_r+0x1a>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_sbrk_r+0x1a>
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	20000b70 	.word	0x20000b70

080060d0 <__malloc_lock>:
 80060d0:	4801      	ldr	r0, [pc, #4]	; (80060d8 <__malloc_lock+0x8>)
 80060d2:	f000 b85d 	b.w	8006190 <__retarget_lock_acquire_recursive>
 80060d6:	bf00      	nop
 80060d8:	20000b74 	.word	0x20000b74

080060dc <__malloc_unlock>:
 80060dc:	4801      	ldr	r0, [pc, #4]	; (80060e4 <__malloc_unlock+0x8>)
 80060de:	f000 b858 	b.w	8006192 <__retarget_lock_release_recursive>
 80060e2:	bf00      	nop
 80060e4:	20000b74 	.word	0x20000b74

080060e8 <_free_r>:
 80060e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060ea:	2900      	cmp	r1, #0
 80060ec:	d044      	beq.n	8006178 <_free_r+0x90>
 80060ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f2:	9001      	str	r0, [sp, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f1a1 0404 	sub.w	r4, r1, #4
 80060fa:	bfb8      	it	lt
 80060fc:	18e4      	addlt	r4, r4, r3
 80060fe:	f7ff ffe7 	bl	80060d0 <__malloc_lock>
 8006102:	4a1e      	ldr	r2, [pc, #120]	; (800617c <_free_r+0x94>)
 8006104:	9801      	ldr	r0, [sp, #4]
 8006106:	6813      	ldr	r3, [r2, #0]
 8006108:	b933      	cbnz	r3, 8006118 <_free_r+0x30>
 800610a:	6063      	str	r3, [r4, #4]
 800610c:	6014      	str	r4, [r2, #0]
 800610e:	b003      	add	sp, #12
 8006110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006114:	f7ff bfe2 	b.w	80060dc <__malloc_unlock>
 8006118:	42a3      	cmp	r3, r4
 800611a:	d908      	bls.n	800612e <_free_r+0x46>
 800611c:	6825      	ldr	r5, [r4, #0]
 800611e:	1961      	adds	r1, r4, r5
 8006120:	428b      	cmp	r3, r1
 8006122:	bf01      	itttt	eq
 8006124:	6819      	ldreq	r1, [r3, #0]
 8006126:	685b      	ldreq	r3, [r3, #4]
 8006128:	1949      	addeq	r1, r1, r5
 800612a:	6021      	streq	r1, [r4, #0]
 800612c:	e7ed      	b.n	800610a <_free_r+0x22>
 800612e:	461a      	mov	r2, r3
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	b10b      	cbz	r3, 8006138 <_free_r+0x50>
 8006134:	42a3      	cmp	r3, r4
 8006136:	d9fa      	bls.n	800612e <_free_r+0x46>
 8006138:	6811      	ldr	r1, [r2, #0]
 800613a:	1855      	adds	r5, r2, r1
 800613c:	42a5      	cmp	r5, r4
 800613e:	d10b      	bne.n	8006158 <_free_r+0x70>
 8006140:	6824      	ldr	r4, [r4, #0]
 8006142:	4421      	add	r1, r4
 8006144:	1854      	adds	r4, r2, r1
 8006146:	42a3      	cmp	r3, r4
 8006148:	6011      	str	r1, [r2, #0]
 800614a:	d1e0      	bne.n	800610e <_free_r+0x26>
 800614c:	681c      	ldr	r4, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	6053      	str	r3, [r2, #4]
 8006152:	4421      	add	r1, r4
 8006154:	6011      	str	r1, [r2, #0]
 8006156:	e7da      	b.n	800610e <_free_r+0x26>
 8006158:	d902      	bls.n	8006160 <_free_r+0x78>
 800615a:	230c      	movs	r3, #12
 800615c:	6003      	str	r3, [r0, #0]
 800615e:	e7d6      	b.n	800610e <_free_r+0x26>
 8006160:	6825      	ldr	r5, [r4, #0]
 8006162:	1961      	adds	r1, r4, r5
 8006164:	428b      	cmp	r3, r1
 8006166:	bf04      	itt	eq
 8006168:	6819      	ldreq	r1, [r3, #0]
 800616a:	685b      	ldreq	r3, [r3, #4]
 800616c:	6063      	str	r3, [r4, #4]
 800616e:	bf04      	itt	eq
 8006170:	1949      	addeq	r1, r1, r5
 8006172:	6021      	streq	r1, [r4, #0]
 8006174:	6054      	str	r4, [r2, #4]
 8006176:	e7ca      	b.n	800610e <_free_r+0x26>
 8006178:	b003      	add	sp, #12
 800617a:	bd30      	pop	{r4, r5, pc}
 800617c:	20000b68 	.word	0x20000b68

08006180 <_malloc_usable_size_r>:
 8006180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006184:	1f18      	subs	r0, r3, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	bfbc      	itt	lt
 800618a:	580b      	ldrlt	r3, [r1, r0]
 800618c:	18c0      	addlt	r0, r0, r3
 800618e:	4770      	bx	lr

08006190 <__retarget_lock_acquire_recursive>:
 8006190:	4770      	bx	lr

08006192 <__retarget_lock_release_recursive>:
 8006192:	4770      	bx	lr

08006194 <_init>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	bf00      	nop
 8006198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619a:	bc08      	pop	{r3}
 800619c:	469e      	mov	lr, r3
 800619e:	4770      	bx	lr

080061a0 <_fini>:
 80061a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a2:	bf00      	nop
 80061a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a6:	bc08      	pop	{r3}
 80061a8:	469e      	mov	lr, r3
 80061aa:	4770      	bx	lr
