
ROS_UART1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800556c  0800556c  0001556c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057ac  080057ac  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080057ac  080057ac  000157ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057b4  080057b4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080057b4  080057b4  000157b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080057c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00000a94  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b20  20000b20  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ffee  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002387  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c0  00000000  00000000  00032438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000920  00000000  00000000  00032df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022020  00000000  00000000  00033718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bdfb  00000000  00000000  00055738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c981e  00000000  00000000  00061533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ad51  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bf0  00000000  00000000  0012ada4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005554 	.word	0x08005554

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	08005554 	.word	0x08005554

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f002 f8e0 	bl	80026a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f80c 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8ba 	bl	8000660 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ec:	f000 f890 	bl	8000610 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004f0:	f000 f864 	bl	80005bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80004f4:	f001 f9cc 	bl	8001890 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80004f8:	f001 f9da 	bl	80018b0 <loop>
  {
 80004fc:	e7fc      	b.n	80004f8 <main+0x1c>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f004 fe96 	bl	8005240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <SystemClock_Config+0xb4>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a21      	ldr	r2, [pc, #132]	; (80005b4 <SystemClock_Config+0xb4>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <SystemClock_Config+0xb4>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <SystemClock_Config+0xb8>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <SystemClock_Config+0xb8>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <SystemClock_Config+0xb8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2310      	movs	r3, #16
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000568:	2300      	movs	r3, #0
 800056a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	4618      	mov	r0, r3
 8000572:	f002 ffdd 	bl	8003530 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800057c:	f000 f88a 	bl	8000694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	230f      	movs	r3, #15
 8000582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000584:	2300      	movs	r3, #0
 8000586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fa40 	bl	8003a20 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005a6:	f000 f875 	bl	8000694 <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3750      	adds	r7, #80	; 0x50
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	; (800060c <MX_USART1_UART_Init+0x50>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005f4:	f003 fbf4 	bl	8003de0 <HAL_UART_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005fe:	f000 f849 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200000a8 	.word	0x200000a8
 800060c:	40011000 	.word	0x40011000

08000610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_DMA_Init+0x4c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a0f      	ldr	r2, [pc, #60]	; (800065c <MX_DMA_Init+0x4c>)
 8000620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_DMA_Init+0x4c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	203a      	movs	r0, #58	; 0x3a
 8000638:	f002 f9a5 	bl	8002986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800063c:	203a      	movs	r0, #58	; 0x3a
 800063e:	f002 f9be 	bl	80029be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	2046      	movs	r0, #70	; 0x46
 8000648:	f002 f99d 	bl	8002986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800064c:	2046      	movs	r0, #70	; 0x46
 800064e:	f002 f9b6 	bl	80029be <HAL_NVIC_EnableIRQ>

}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_GPIO_Init+0x30>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <MX_GPIO_Init+0x30>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_GPIO_Init+0x30>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800

08000694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
}
 800069a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x8>

0800069e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2200      	movs	r2, #0
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4618      	mov	r0, r3
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <_ZN3ros3MsgC1Ev+0x1c>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4618      	mov	r0, r3
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	0800577c 	.word	0x0800577c

080006e0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
      data()
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ffe8 	bl	80006c0 <_ZN3ros3MsgC1Ev>
 80006f0:	4a06      	ldr	r2, [pc, #24]	; (800070c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffcf 	bl	800069e <_ZN3ros4TimeC1Ev>
    {
    }
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	08005764 	.word	0x08005764

08000710 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6859      	ldr	r1, [r3, #4]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	683a      	ldr	r2, [r7, #0]
 8000726:	4413      	add	r3, r2
 8000728:	b2ca      	uxtb	r2, r1
 800072a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	0a19      	lsrs	r1, r3, #8
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3301      	adds	r3, #1
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	4413      	add	r3, r2
 800073a:	b2ca      	uxtb	r2, r1
 800073c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	0c19      	lsrs	r1, r3, #16
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3302      	adds	r3, #2
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	4413      	add	r3, r2
 800074c:	b2ca      	uxtb	r2, r1
 800074e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	0e19      	lsrs	r1, r3, #24
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	3303      	adds	r3, #3
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	4413      	add	r3, r2
 800075e:	b2ca      	uxtb	r2, r1
 8000760:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3304      	adds	r3, #4
 8000766:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6899      	ldr	r1, [r3, #8]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	4413      	add	r3, r2
 8000772:	b2ca      	uxtb	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	0a19      	lsrs	r1, r3, #8
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3301      	adds	r3, #1
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	b2ca      	uxtb	r2, r1
 8000786:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	0c19      	lsrs	r1, r3, #16
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3302      	adds	r3, #2
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	4413      	add	r3, r2
 8000796:	b2ca      	uxtb	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	0e19      	lsrs	r1, r3, #24
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3303      	adds	r3, #3
 80007a4:	683a      	ldr	r2, [r7, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	b2ca      	uxtb	r2, r1
 80007aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	3304      	adds	r3, #4
 80007b0:	60fb      	str	r3, [r7, #12]
      return offset;
 80007b2:	68fb      	ldr	r3, [r7, #12]
    }
 80007b4:	4618      	mov	r0, r3
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	683a      	ldr	r2, [r7, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	461a      	mov	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	685a      	ldr	r2, [r3, #4]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3301      	adds	r3, #1
 80007e4:	6839      	ldr	r1, [r7, #0]
 80007e6:	440b      	add	r3, r1
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	431a      	orrs	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	685a      	ldr	r2, [r3, #4]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	3302      	adds	r3, #2
 80007fa:	6839      	ldr	r1, [r7, #0]
 80007fc:	440b      	add	r3, r1
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	041b      	lsls	r3, r3, #16
 8000802:	431a      	orrs	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	685a      	ldr	r2, [r3, #4]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3303      	adds	r3, #3
 8000810:	6839      	ldr	r1, [r7, #0]
 8000812:	440b      	add	r3, r1
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	061b      	lsls	r3, r3, #24
 8000818:	431a      	orrs	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	3304      	adds	r3, #4
 8000822:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	4413      	add	r3, r2
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	689a      	ldr	r2, [r3, #8]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	3301      	adds	r3, #1
 800083a:	6839      	ldr	r1, [r7, #0]
 800083c:	440b      	add	r3, r1
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	431a      	orrs	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3302      	adds	r3, #2
 8000850:	6839      	ldr	r1, [r7, #0]
 8000852:	440b      	add	r3, r1
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	041b      	lsls	r3, r3, #16
 8000858:	431a      	orrs	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	3303      	adds	r3, #3
 8000866:	6839      	ldr	r1, [r7, #0]
 8000868:	440b      	add	r3, r1
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	061b      	lsls	r3, r3, #24
 800086e:	431a      	orrs	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	3304      	adds	r3, #4
 8000878:	60fb      	str	r3, [r7, #12]
     return offset;
 800087a:	68fb      	ldr	r3, [r7, #12]
    }
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	0800556c 	.word	0x0800556c

080008a4 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	0800557c 	.word	0x0800557c

080008c0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fef8 	bl	80006c0 <_ZN3ros3MsgC1Ev>
 80008d0:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	809a      	strh	r2, [r3, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a09      	ldr	r2, [pc, #36]	; (8000904 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a06      	ldr	r2, [pc, #24]	; (8000904 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80008ec:	611a      	str	r2, [r3, #16]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
    {
    }
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	0800574c 	.word	0x0800574c
 8000904:	080055a0 	.word	0x080055a0

08000908 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	8899      	ldrh	r1, [r3, #4]
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	4413      	add	r3, r2
 8000920:	b2ca      	uxtb	r2, r1
 8000922:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	889b      	ldrh	r3, [r3, #4]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	b299      	uxth	r1, r3
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	3301      	adds	r3, #1
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	4413      	add	r3, r2
 8000934:	b2ca      	uxtb	r2, r1
 8000936:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	3302      	adds	r3, #2
 800093c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fc40 	bl	80001c8 <strlen>
 8000948:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	683a      	ldr	r2, [r7, #0]
 800094e:	4413      	add	r3, r2
 8000950:	69b9      	ldr	r1, [r7, #24]
 8000952:	4618      	mov	r0, r3
 8000954:	f000 ffc6 	bl	80018e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	3304      	adds	r3, #4
 800095c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	18d0      	adds	r0, r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4619      	mov	r1, r3
 800096c:	f004 fc5a 	bl	8005224 <memcpy>
      offset += length_topic_name;
 8000970:	69fa      	ldr	r2, [r7, #28]
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	4413      	add	r3, r2
 8000976:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fc23 	bl	80001c8 <strlen>
 8000982:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	683a      	ldr	r2, [r7, #0]
 8000988:	4413      	add	r3, r2
 800098a:	6979      	ldr	r1, [r7, #20]
 800098c:	4618      	mov	r0, r3
 800098e:	f000 ffa9 	bl	80018e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3304      	adds	r3, #4
 8000996:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	18d0      	adds	r0, r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	4619      	mov	r1, r3
 80009a6:	f004 fc3d 	bl	8005224 <memcpy>
      offset += length_message_type;
 80009aa:	69fa      	ldr	r2, [r7, #28]
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	4413      	add	r3, r2
 80009b0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	691b      	ldr	r3, [r3, #16]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fc06 	bl	80001c8 <strlen>
 80009bc:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	6939      	ldr	r1, [r7, #16]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 ff8c 	bl	80018e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	3304      	adds	r3, #4
 80009d0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	18d0      	adds	r0, r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	691b      	ldr	r3, [r3, #16]
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4619      	mov	r1, r3
 80009e0:	f004 fc20 	bl	8005224 <memcpy>
      offset += length_md5sum;
 80009e4:	69fa      	ldr	r2, [r7, #28]
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	4413      	add	r3, r2
 80009ea:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80009f2:	68f9      	ldr	r1, [r7, #12]
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	4413      	add	r3, r2
 80009fa:	b2ca      	uxtb	r2, r1
 80009fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	0a19      	lsrs	r1, r3, #8
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3301      	adds	r3, #1
 8000a06:	683a      	ldr	r2, [r7, #0]
 8000a08:	4413      	add	r3, r2
 8000a0a:	b2ca      	uxtb	r2, r1
 8000a0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	0c19      	lsrs	r1, r3, #16
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3302      	adds	r3, #2
 8000a16:	683a      	ldr	r2, [r7, #0]
 8000a18:	4413      	add	r3, r2
 8000a1a:	b2ca      	uxtb	r2, r1
 8000a1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	0e19      	lsrs	r1, r3, #24
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3303      	adds	r3, #3
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	4413      	add	r3, r2
 8000a2a:	b2ca      	uxtb	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3304      	adds	r3, #4
 8000a32:	61fb      	str	r3, [r7, #28]
      return offset;
 8000a34:	69fb      	ldr	r3, [r7, #28]
    }
 8000a36:	4618      	mov	r0, r3
 8000a38:	3720      	adds	r7, #32
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b08a      	sub	sp, #40	; 0x28
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	683a      	ldr	r2, [r7, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	889b      	ldrh	r3, [r3, #4]
 8000a5e:	b21a      	sxth	r2, r3
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	3301      	adds	r3, #1
 8000a64:	6839      	ldr	r1, [r7, #0]
 8000a66:	440b      	add	r3, r1
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	b21b      	sxth	r3, r3
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	683a      	ldr	r2, [r7, #0]
 8000a82:	441a      	add	r2, r3
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4611      	mov	r1, r2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 ff48 	bl	8001920 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	3304      	adds	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d20c      	bcs.n	8000ac0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	441a      	add	r2, r3
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	6839      	ldr	r1, [r7, #0]
 8000ab2:	440b      	add	r3, r1
 8000ab4:	7812      	ldrb	r2, [r2, #0]
 8000ab6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aba:	3301      	adds	r3, #1
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
 8000abe:	e7ec      	b.n	8000a9a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	441a      	add	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	441a      	add	r2, r3
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 ff15 	bl	8001920 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	3304      	adds	r3, #4
 8000afa:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	4413      	add	r3, r2
 8000b06:	6a3a      	ldr	r2, [r7, #32]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d20c      	bcs.n	8000b26 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	6a3b      	ldr	r3, [r7, #32]
 8000b10:	441a      	add	r2, r3
 8000b12:	6a3b      	ldr	r3, [r7, #32]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	6839      	ldr	r1, [r7, #0]
 8000b18:	440b      	add	r3, r1
 8000b1a:	7812      	ldrb	r2, [r2, #0]
 8000b1c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	3301      	adds	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
 8000b24:	e7ec      	b.n	8000b00 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	4413      	add	r3, r2
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	683a      	ldr	r2, [r7, #0]
 8000b3c:	441a      	add	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	4413      	add	r3, r2
 8000b48:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	441a      	add	r2, r3
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 fee2 	bl	8001920 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	3304      	adds	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	69fa      	ldr	r2, [r7, #28]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d20c      	bcs.n	8000b8c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	441a      	add	r2, r3
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6839      	ldr	r1, [r7, #0]
 8000b7e:	440b      	add	r3, r1
 8000b80:	7812      	ldrb	r2, [r2, #0]
 8000b82:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	3301      	adds	r3, #1
 8000b88:	61fb      	str	r3, [r7, #28]
 8000b8a:	e7ec      	b.n	8000b66 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4413      	add	r3, r2
 8000b92:	3b01      	subs	r3, #1
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	441a      	add	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4413      	add	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	6839      	ldr	r1, [r7, #0]
 8000bba:	440a      	add	r2, r1
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	6839      	ldr	r1, [r7, #0]
 8000bca:	440b      	add	r3, r1
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	021b      	lsls	r3, r3, #8
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	3302      	adds	r3, #2
 8000bda:	6839      	ldr	r1, [r7, #0]
 8000bdc:	440b      	add	r3, r1
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	041b      	lsls	r3, r3, #16
 8000be2:	4313      	orrs	r3, r2
 8000be4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	3303      	adds	r3, #3
 8000bec:	6839      	ldr	r1, [r7, #0]
 8000bee:	440b      	add	r3, r1
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	061b      	lsls	r3, r3, #24
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	3304      	adds	r3, #4
 8000c02:	61bb      	str	r3, [r7, #24]
     return offset;
 8000c04:	69bb      	ldr	r3, [r7, #24]
    }
 8000c06:	4618      	mov	r0, r3
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	080055a4 	.word	0x080055a4

08000c2c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	080055c0 	.word	0x080055c0

08000c48 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fd34 	bl	80006c0 <_ZN3ros3MsgC1Ev>
 8000c58:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	711a      	strb	r2, [r3, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000c68:	609a      	str	r2, [r3, #8]
    {
    }
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	08005734 	.word	0x08005734
 8000c78:	080055a0 	.word	0x080055a0

08000c7c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	7912      	ldrb	r2, [r2, #4]
 8000c94:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fa91 	bl	80001c8 <strlen>
 8000ca6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	68b9      	ldr	r1, [r7, #8]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 fe17 	bl	80018e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	18d0      	adds	r0, r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f004 faab 	bl	8005224 <memcpy>
      offset += length_msg;
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
      return offset;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    }
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	781a      	ldrb	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	441a      	add	r2, r3
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fe07 	bl	8001920 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	3304      	adds	r3, #4
 8000d16:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4413      	add	r3, r2
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d20c      	bcs.n	8000d42 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	441a      	add	r2, r3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	6839      	ldr	r1, [r7, #0]
 8000d34:	440b      	add	r3, r1
 8000d36:	7812      	ldrb	r2, [r2, #0]
 8000d38:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	e7ec      	b.n	8000d1c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	441a      	add	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
     return offset;
 8000d66:	693b      	ldr	r3, [r7, #16]
    }
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	080055e4 	.word	0x080055e4

08000d8c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	080055f8 	.word	0x080055f8

08000da8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fc84 	bl	80006c0 <_ZN3ros3MsgC1Ev>
 8000db8:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	0800571c 	.word	0x0800571c

08000e04 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6859      	ldr	r1, [r3, #4]
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b2ca      	uxtb	r2, r1
 8000e1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	0a19      	lsrs	r1, r3, #8
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	3301      	adds	r3, #1
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b2ca      	uxtb	r2, r1
 8000e30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	0c19      	lsrs	r1, r3, #16
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	b2ca      	uxtb	r2, r1
 8000e42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	0e19      	lsrs	r1, r3, #24
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	3303      	adds	r3, #3
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	4413      	add	r3, r2
 8000e52:	b2ca      	uxtb	r2, r1
 8000e54:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	3304      	adds	r3, #4
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	6a3a      	ldr	r2, [r7, #32]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d22b      	bcs.n	8000ec2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000e78:	6939      	ldr	r1, [r7, #16]
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	b2ca      	uxtb	r2, r1
 8000e82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	0a19      	lsrs	r1, r3, #8
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	b2ca      	uxtb	r2, r1
 8000e92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	0c19      	lsrs	r1, r3, #16
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	b2ca      	uxtb	r2, r1
 8000ea2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	0e19      	lsrs	r1, r3, #24
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eaa:	3303      	adds	r3, #3
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	b2ca      	uxtb	r2, r1
 8000eb2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000eba:	6a3b      	ldr	r3, [r7, #32]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	623b      	str	r3, [r7, #32]
 8000ec0:	e7ce      	b.n	8000e60 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6919      	ldr	r1, [r3, #16]
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	b2ca      	uxtb	r2, r1
 8000ece:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	0a19      	lsrs	r1, r3, #8
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	3301      	adds	r3, #1
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	4413      	add	r3, r2
 8000ede:	b2ca      	uxtb	r2, r1
 8000ee0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	0c19      	lsrs	r1, r3, #16
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eea:	3302      	adds	r3, #2
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	b2ca      	uxtb	r2, r1
 8000ef2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	0e19      	lsrs	r1, r3, #24
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	3303      	adds	r3, #3
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	4413      	add	r3, r2
 8000f02:	b2ca      	uxtb	r2, r1
 8000f04:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	3304      	adds	r3, #4
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	691b      	ldr	r3, [r3, #16]
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d22b      	bcs.n	8000f72 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	699a      	ldr	r2, [r3, #24]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000f28:	68f9      	ldr	r1, [r7, #12]
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	b2ca      	uxtb	r2, r1
 8000f32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	0a19      	lsrs	r1, r3, #8
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b2ca      	uxtb	r2, r1
 8000f42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	0c19      	lsrs	r1, r3, #16
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	b2ca      	uxtb	r2, r1
 8000f52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	0e19      	lsrs	r1, r3, #24
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	3303      	adds	r3, #3
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	b2ca      	uxtb	r2, r1
 8000f62:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	3304      	adds	r3, #4
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
 8000f70:	e7ce      	b.n	8000f10 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69d9      	ldr	r1, [r3, #28]
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b2ca      	uxtb	r2, r1
 8000f7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	0a19      	lsrs	r1, r3, #8
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	3301      	adds	r3, #1
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b2ca      	uxtb	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	0c19      	lsrs	r1, r3, #16
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b2ca      	uxtb	r2, r1
 8000fa2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	0e19      	lsrs	r1, r3, #24
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	3303      	adds	r3, #3
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b2ca      	uxtb	r2, r1
 8000fb4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	3304      	adds	r3, #4
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d228      	bcs.n	800101c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff f8f6 	bl	80001c8 <strlen>
 8000fdc:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	6979      	ldr	r1, [r7, #20]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fc7c 	bl	80018e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	3304      	adds	r3, #4
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	18d0      	adds	r0, r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	4619      	mov	r1, r3
 8001008:	f004 f90c 	bl	8005224 <memcpy>
      offset += length_stringsi;
 800100c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	4413      	add	r3, r2
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	3301      	adds	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	e7d1      	b.n	8000fc0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800101e:	4618      	mov	r0, r3
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001026:	b580      	push	{r7, lr}
 8001028:	b08e      	sub	sp, #56	; 0x38
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	4413      	add	r3, r2
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800103e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001040:	3301      	adds	r3, #1
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	4413      	add	r3, r2
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	6a3a      	ldr	r2, [r7, #32]
 800104c:	4313      	orrs	r3, r2
 800104e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001052:	3302      	adds	r3, #2
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	4413      	add	r3, r2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	6a3a      	ldr	r2, [r7, #32]
 800105e:	4313      	orrs	r3, r2
 8001060:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001064:	3303      	adds	r3, #3
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	4413      	add	r3, r2
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	061b      	lsls	r3, r3, #24
 800106e:	6a3a      	ldr	r2, [r7, #32]
 8001070:	4313      	orrs	r3, r2
 8001072:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001076:	3304      	adds	r3, #4
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	6a3a      	ldr	r2, [r7, #32]
 8001080:	429a      	cmp	r2, r3
 8001082:	d90a      	bls.n	800109a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4619      	mov	r1, r3
 800108e:	4610      	mov	r0, r2
 8001090:	f004 f8de 	bl	8005250 <realloc>
 8001094:	4602      	mov	r2, r0
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a3a      	ldr	r2, [r7, #32]
 800109e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80010a0:	2300      	movs	r3, #0
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d236      	bcs.n	800111c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010b6:	6839      	ldr	r1, [r7, #0]
 80010b8:	440a      	add	r2, r1
 80010ba:	7812      	ldrb	r2, [r2, #0]
 80010bc:	4313      	orrs	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c4:	3301      	adds	r3, #1
 80010c6:	6839      	ldr	r1, [r7, #0]
 80010c8:	440b      	add	r3, r1
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	4313      	orrs	r3, r2
 80010d0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d6:	3302      	adds	r3, #2
 80010d8:	6839      	ldr	r1, [r7, #0]
 80010da:	440b      	add	r3, r1
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	4313      	orrs	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e8:	3303      	adds	r3, #3
 80010ea:	6839      	ldr	r1, [r7, #0]
 80010ec:	440b      	add	r3, r1
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	061b      	lsls	r3, r3, #24
 80010f2:	4313      	orrs	r3, r2
 80010f4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80010fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fe:	3304      	adds	r3, #4
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001116:	3301      	adds	r3, #1
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
 800111a:	e7c3      	b.n	80010a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800111c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	4413      	add	r3, r2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001128:	3301      	adds	r3, #1
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	4413      	add	r3, r2
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	69fa      	ldr	r2, [r7, #28]
 8001134:	4313      	orrs	r3, r2
 8001136:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800113a:	3302      	adds	r3, #2
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	4413      	add	r3, r2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	041b      	lsls	r3, r3, #16
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	4313      	orrs	r3, r2
 8001148:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800114a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800114c:	3303      	adds	r3, #3
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	4413      	add	r3, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	061b      	lsls	r3, r3, #24
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	4313      	orrs	r3, r2
 800115a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800115c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800115e:	3304      	adds	r3, #4
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	429a      	cmp	r2, r3
 800116a:	d90a      	bls.n	8001182 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	699a      	ldr	r2, [r3, #24]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4619      	mov	r1, r3
 8001176:	4610      	mov	r0, r2
 8001178:	f004 f86a 	bl	8005250 <realloc>
 800117c:	4602      	mov	r2, r0
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001192:	429a      	cmp	r2, r3
 8001194:	d236      	bcs.n	8001204 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	440a      	add	r2, r1
 80011a2:	7812      	ldrb	r2, [r2, #0]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ac:	3301      	adds	r3, #1
 80011ae:	6839      	ldr	r1, [r7, #0]
 80011b0:	440b      	add	r3, r1
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011be:	3302      	adds	r3, #2
 80011c0:	6839      	ldr	r1, [r7, #0]
 80011c2:	440b      	add	r3, r1
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	041b      	lsls	r3, r3, #16
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d0:	3303      	adds	r3, #3
 80011d2:	6839      	ldr	r1, [r7, #0]
 80011d4:	440b      	add	r3, r1
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	061b      	lsls	r3, r3, #24
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80011e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e6:	3304      	adds	r3, #4
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	699a      	ldr	r2, [r3, #24]
 80011ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	3214      	adds	r2, #20
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80011fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fe:	3301      	adds	r3, #1
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001202:	e7c3      	b.n	800118c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	4413      	add	r3, r2
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800120e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001210:	3301      	adds	r3, #1
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001222:	3302      	adds	r3, #2
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	4413      	add	r3, r2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	041b      	lsls	r3, r3, #16
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001234:	3303      	adds	r3, #3
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	061b      	lsls	r3, r3, #24
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001246:	3304      	adds	r3, #4
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	429a      	cmp	r2, r3
 8001252:	d90a      	bls.n	800126a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4619      	mov	r1, r3
 800125e:	4610      	mov	r0, r2
 8001260:	f003 fff6 	bl	8005250 <realloc>
 8001264:	4602      	mov	r2, r0
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800127a:	429a      	cmp	r2, r3
 800127c:	d23f      	bcs.n	80012fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800127e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	441a      	add	r2, r3
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fb48 	bl	8001920 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001292:	3304      	adds	r3, #4
 8001294:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d20c      	bcs.n	80012c0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	441a      	add	r2, r3
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6839      	ldr	r1, [r7, #0]
 80012b2:	440b      	add	r3, r1
 80012b4:	7812      	ldrb	r2, [r2, #0]
 80012b6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	3301      	adds	r3, #1
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
 80012be:	e7ec      	b.n	800129a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80012c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4413      	add	r3, r2
 80012c6:	3b01      	subs	r3, #1
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80012d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d2:	3b01      	subs	r3, #1
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	441a      	add	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80012dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	3220      	adds	r2, #32
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	3301      	adds	r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80012fc:	e7ba      	b.n	8001274 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80012fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001300:	4618      	mov	r0, r3
 8001302:	3738      	adds	r7, #56	; 0x38
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	080056b8 	.word	0x080056b8

08001324 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	0800561c 	.word	0x0800561c

08001340 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68d8      	ldr	r0, [r3, #12]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6891      	ldr	r1, [r2, #8]
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	4798      	blx	r3
 800138c:	4603      	mov	r3, r0
  };
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
  }
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80013c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <_ZN13STM32HardwareC1Ev+0x34>)
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	200000a8 	.word	0x200000a8

0800140c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f804 	bl	8001422 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3304      	adds	r3, #4
 8001432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001436:	4619      	mov	r1, r3
 8001438:	f002 fd9e 	bl	8003f78 <HAL_UART_Receive_DMA>
    }
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ffa8 	bl	80013ae <_ZN13STM32Hardware10getRdmaIndEv>
 800145e:	4603      	mov	r3, r0
 8001460:	429c      	cmp	r4, r3
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d012      	beq.n	8001494 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001474:	1c59      	adds	r1, r3, #1
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	791b      	ldrb	r3, [r3, #4]
 8001482:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800148a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001494:	68fb      	ldr	r3, [r7, #12]
    }
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bd90      	pop	{r4, r7, pc}
	...

080014a0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b20      	cmp	r3, #32
 80014b4:	d108      	bne.n	80014c8 <_ZN13STM32Hardware5flushEv+0x28>
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <_ZN13STM32Hardware5flushEv+0xb8>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	f083 0301 	eor.w	r3, r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <_ZN13STM32Hardware5flushEv+0x28>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <_ZN13STM32Hardware5flushEv+0x2a>
 80014c8:	2300      	movs	r3, #0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d03f      	beq.n	800154e <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <_ZN13STM32Hardware5flushEv+0xb8>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d031      	beq.n	8001548 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d20a      	bcs.n	800150a <_ZN13STM32Hardware5flushEv+0x6a>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001502:	b29b      	uxth	r3, r3
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	b29b      	uxth	r3, r3
 8001508:	e006      	b.n	8001518 <_ZN13STM32Hardware5flushEv+0x78>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001510:	b29b      	uxth	r3, r3
 8001512:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001516:	b29b      	uxth	r3, r3
 8001518:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001524:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	89fa      	ldrh	r2, [r7, #14]
 800152e:	4619      	mov	r1, r3
 8001530:	f002 fca4 	bl	8003e7c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	4413      	add	r3, r2
 800153e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <_ZN13STM32Hardware5flushEv+0xb8>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
      }
    }
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200001ac 	.word	0x200001ac

0800155c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
      int n = length;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001572:	bfa8      	it	ge
 8001574:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001578:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001580:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	4293      	cmp	r3, r2
 8001588:	bf28      	it	cs
 800158a:	4613      	movcs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001594:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68b9      	ldr	r1, [r7, #8]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fe3f 	bl	8005224 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	4413      	add	r3, r2
 80015b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d00b      	beq.n	80015da <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	18d1      	adds	r1, r2, r3
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	f003 fe25 	bl	8005224 <memcpy>
      }

      flush();
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f7ff ff60 	bl	80014a0 <_ZN13STM32Hardware5flushEv>
    }
 80015e0:	bf00      	nop
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	f001 f8be 	bl	8002770 <HAL_GetTick>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
      data("")
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff f858 	bl	80006c0 <_ZN3ros3MsgC1Ev>
 8001610:	4a05      	ldr	r2, [pc, #20]	; (8001628 <_ZN8std_msgs6StringC1Ev+0x28>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <_ZN8std_msgs6StringC1Ev+0x2c>)
 800161a:	605a      	str	r2, [r3, #4]
    {
    }
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	080056f0 	.word	0x080056f0
 800162c:	080055a0 	.word	0x080055a0

08001630 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fdc0 	bl	80001c8 <strlen>
 8001648:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	4413      	add	r3, r2
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f946 	bl	80018e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3304      	adds	r3, #4
 800165c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	18d0      	adds	r0, r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	4619      	mov	r1, r3
 800166c:	f003 fdda 	bl	8005224 <memcpy>
      offset += length_data;
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	4413      	add	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
      return offset;
 8001678:	68fb      	ldr	r3, [r7, #12]
    }
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	441a      	add	r2, r3
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f000 f93f 	bl	8001920 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	3304      	adds	r3, #4
 80016a6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4413      	add	r3, r2
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d20c      	bcs.n	80016d2 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	441a      	add	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	6839      	ldr	r1, [r7, #0]
 80016c4:	440b      	add	r3, r1
 80016c6:	7812      	ldrb	r2, [r2, #0]
 80016c8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e7ec      	b.n	80016ac <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	3b01      	subs	r3, #1
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	4413      	add	r3, r2
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	441a      	add	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4413      	add	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
     return offset;
 80016f6:	693b      	ldr	r3, [r7, #16]
    }
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <_ZN8std_msgs6String7getTypeEv+0x18>)
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	08005640 	.word	0x08005640

0800171c <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	08005650 	.word	0x08005650

08001738 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	08005708 	.word	0x08005708

08001758 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ffe8 	bl	8001738 <_ZN3ros15NodeHandleBase_C1Ev>
 8001768:	4a36      	ldr	r2, [pc, #216]	; (8001844 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3304      	adds	r3, #4
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fe2e 	bl	80013d4 <_ZN13STM32HardwareC1Ev>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800179e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f003 fd4b 	bl	8005240 <memset>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80017b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 fd42 	bl	8005240 <memset>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80017c2:	2264      	movs	r2, #100	; 0x64
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fd3a 	bl	8005240 <memset>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80017d2:	2264      	movs	r2, #100	; 0x64
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 fd32 	bl	8005240 <memset>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fab8 	bl	8000da8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	080056dc 	.word	0x080056dc

08001848 <HAL_UART_TxCpltCallback>:

std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world from STM32!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_UART_TxCpltCallback+0x20>)
 8001852:	f000 f88a 	bl	800196a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001856:	4603      	mov	r3, r0
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fe21 	bl	80014a0 <_ZN13STM32Hardware5flushEv>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200001b0 	.word	0x200001b0

0800186c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_UART_RxCpltCallback+0x20>)
 8001876:	f000 f878 	bl	800196a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800187a:	4603      	mov	r3, r0
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fdd0 	bl	8001422 <_ZN13STM32Hardware10reset_rbufEv>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200001b0 	.word	0x200001b0

08001890 <setup>:

void setup(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  nh.initNode();
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <setup+0x18>)
 8001896:	f000 f874 	bl	8001982 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 800189a:	4904      	ldr	r1, [pc, #16]	; (80018ac <setup+0x1c>)
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <setup+0x18>)
 800189e:	f000 f88d 	bl	80019bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200001b0 	.word	0x200001b0
 80018ac:	20000af4 	.word	0x20000af4

080018b0 <loop>:

void loop(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  str_msg.data = hello;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <loop+0x24>)
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <loop+0x28>)
 80018b8:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 80018ba:	4906      	ldr	r1, [pc, #24]	; (80018d4 <loop+0x24>)
 80018bc:	4807      	ldr	r0, [pc, #28]	; (80018dc <loop+0x2c>)
 80018be:	f7ff fd56 	bl	800136e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <loop+0x30>)
 80018c4:	f000 f8aa 	bl	8001a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(1000);
 80018c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018cc:	f000 ff5c 	bl	8002788 <HAL_Delay>
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000aec 	.word	0x20000aec
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000af4 	.word	0x20000af4
 80018e0:	200001b0 	.word	0x200001b0

080018e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d80d      	bhi.n	8001914 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	fa22 f103 	lsr.w	r1, r2, r3
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	b2ca      	uxtb	r2, r1
 800190a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3301      	adds	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	e7ee      	b.n	80018f2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d811      	bhi.n	800195e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	440a      	add	r2, r1
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	4611      	mov	r1, r2
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	00d2      	lsls	r2, r2, #3
 800194c:	fa01 f202 	lsl.w	r2, r1, r2
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	e7ea      	b.n	8001934 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3304      	adds	r3, #4
  }
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3304      	adds	r3, #4
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fd3c 	bl	800140c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b18      	cmp	r3, #24
 80019ce:	dc1e      	bgt.n	8001a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d111      	bne.n	8001a06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	60da      	str	r2, [r3, #12]
        return true;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e004      	b.n	8001a10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	e7dd      	b.n	80019ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8001a0e:	2300      	movs	r3, #0
  }
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3304      	adds	r3, #4
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fddd 	bl	80015e8 <_ZN13STM32Hardware4timeEv>
 8001a2e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d903      	bls.n	8001a4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d009      	beq.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d903      	bls.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d014      	beq.n	8001a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3304      	adds	r3, #4
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fdb6 	bl	80015e8 <_ZN13STM32Hardware4timeEv>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad2      	subs	r2, r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	bf8c      	ite	hi
 8001a8c:	2301      	movhi	r3, #1
 8001a8e:	2300      	movls	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001a96:	f06f 0301 	mvn.w	r3, #1
 8001a9a:	e194      	b.n	8001dc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fccf 	bl	8001444 <_ZN13STM32Hardware4readEv>
 8001aa6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f2c0 8174 	blt.w	8001d98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	441a      	add	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ac6:	2b07      	cmp	r3, #7
 8001ac8:	d11e      	bne.n	8001b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001ad0:	1c59      	adds	r1, r3, #1
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	b2d1      	uxtb	r1, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001aec:	1e5a      	subs	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1b4      	bne.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2208      	movs	r2, #8
 8001b02:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001b06:	e7af      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d128      	bne.n	8001b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2bff      	cmp	r3, #255	; 0xff
 8001b16:	d10d      	bne.n	8001b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f103 0214 	add.w	r2, r3, #20
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001b32:	e799      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3304      	adds	r3, #4
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fd55 	bl	80015e8 <_ZN13STM32Hardware4timeEv>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	bf8c      	ite	hi
 8001b4c:	2301      	movhi	r3, #1
 8001b4e:	2300      	movls	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d088      	beq.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001b5e:	f06f 0301 	mvn.w	r3, #1
 8001b62:	e130      	b.n	8001dc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d118      	bne.n	8001ba0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2bfe      	cmp	r3, #254	; 0xfe
 8001b72:	d107      	bne.n	8001b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001b82:	e771      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f47f af68 	bne.w	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f918 	bl	8001dce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001b9e:	e763      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d113      	bne.n	8001bd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001bd0:	e74a      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d110      	bne.n	8001bfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	441a      	add	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001bfc:	e734      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d116      	bne.n	8001c36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001c0e:	425a      	negs	r2, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	bf58      	it	pl
 8001c16:	4253      	negpl	r3, r2
 8001c18:	2bff      	cmp	r3, #255	; 0xff
 8001c1a:	d107      	bne.n	8001c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c2a:	e71d      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c34:	e718      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d10f      	bne.n	8001c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001c5e:	e703      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c66:	2b06      	cmp	r3, #6
 8001c68:	d117      	bne.n	8001c9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	441a      	add	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2207      	movs	r2, #7
 8001c80:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f47f aeec 	bne.w	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2208      	movs	r2, #8
 8001c94:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c98:	e6e6      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	f47f aee1 	bne.w	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001cb4:	425a      	negs	r2, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	bf58      	it	pl
 8001cbc:	4253      	negpl	r3, r2
 8001cbe:	2bff      	cmp	r3, #255	; 0xff
 8001cc0:	f47f aed2 	bne.w	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d110      	bne.n	8001cf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f87d 	bl	8001dce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f898 	bl	8001e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	e06a      	b.n	8001dc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001cf6:	2b0a      	cmp	r3, #10
 8001cf8:	d107      	bne.n	8001d0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001d00:	4619      	mov	r1, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f960 	bl	8001fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001d08:	e6ae      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	d10e      	bne.n	8001d32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001d20:	4619      	mov	r1, r3
 8001d22:	4610      	mov	r0, r2
 8001d24:	f7ff f97f 	bl	8001026 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001d30:	e69a      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d38:	2b0b      	cmp	r3, #11
 8001d3a:	d104      	bne.n	8001d46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001d44:	e690      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d4c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f43f ae84 	beq.w	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d66:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d70:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d7a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001d92:	4611      	mov	r1, r2
 8001d94:	4798      	blx	r3
    while (true)
 8001d96:	e667      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001d98:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00f      	beq.n	8001dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d906      	bls.n	8001dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f809 	bl	8001dce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001dc4:	2300      	movs	r3, #0
  }
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fc80 	bl	80006e0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f107 020c 	add.w	r2, r7, #12
 8001dea:	210a      	movs	r1, #10
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
    rt_time = hardware_.time();
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3304      	adds	r3, #4
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fbf7 	bl	80015e8 <_ZN13STM32Hardware4timeEv>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001e0a:	b590      	push	{r4, r7, lr}
 8001e0c:	b08b      	sub	sp, #44	; 0x2c
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fd52 	bl	80008c0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	2b18      	cmp	r3, #24
 8001e24:	dc63      	bgt.n	8001eee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d056      	beq.n	8001ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	6859      	ldr	r1, [r3, #4]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	3308      	adds	r3, #8
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4608      	mov	r0, r1
 8001e86:	4798      	blx	r3
 8001e88:	4603      	mov	r3, r0
 8001e8a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	330c      	adds	r3, #12
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4608      	mov	r0, r1
 8001eb4:	4798      	blx	r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebe:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681c      	ldr	r4, [r3, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fa5e 	bl	8001396 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001eda:	4601      	mov	r1, r0
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	3301      	adds	r3, #1
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
 8001eec:	e798      	b.n	8001e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	2b18      	cmp	r3, #24
 8001ef6:	dc5f      	bgt.n	8001fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d053      	beq.n	8001fb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f32:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	3308      	adds	r3, #8
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4608      	mov	r0, r1
 8001f4a:	4798      	blx	r3
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f54:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f60:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	330c      	adds	r3, #12
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4608      	mov	r0, r1
 8001f70:	4798      	blx	r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f7a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681c      	ldr	r4, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f86:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f92:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4608      	mov	r0, r1
 8001fa2:	4798      	blx	r3
 8001fa4:	4601      	mov	r1, r0
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	461a      	mov	r2, r3
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb6:	e79c      	b.n	8001ef2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8001fc0:	bf00      	nop
 8001fc2:	372c      	adds	r7, #44	; 0x2c
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd90      	pop	{r4, r7, pc}

08001fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fb82 	bl	80006e0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fb01 	bl	80015e8 <_ZN13STM32Hardware4timeEv>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001ff2:	f107 0308 	add.w	r3, r7, #8
 8001ff6:	6839      	ldr	r1, [r7, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fbe1 	bl	80007c0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	4915      	ldr	r1, [pc, #84]	; (8002058 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002004:	fba1 1303 	umull	r1, r3, r1, r3
 8002008:	099b      	lsrs	r3, r3, #6
 800200a:	4413      	add	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800200e:	6939      	ldr	r1, [r7, #16]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002014:	fba3 0302 	umull	r0, r3, r3, r2
 8002018:	099b      	lsrs	r3, r3, #6
 800201a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800201e:	fb00 f303 	mul.w	r3, r0, r3
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	4a0d      	ldr	r2, [pc, #52]	; (800205c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	440b      	add	r3, r1
 800202c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	3304      	adds	r3, #4
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f8a6 	bl	8002188 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3304      	adds	r3, #4
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fad1 	bl	80015e8 <_ZN13STM32Hardware4timeEv>
 8002046:	4602      	mov	r2, r0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800204e:	bf00      	nop
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	10624dd3 	.word	0x10624dd3
 800205c:	000f4240 	.word	0x000f4240

08002060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b63      	cmp	r3, #99	; 0x63
 8002070:	dd09      	ble.n	8002086 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002078:	f083 0301 	eor.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002082:	2300      	movs	r3, #0
 8002084:	e079      	b.n	800217a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002092:	3207      	adds	r2, #7
 8002094:	4611      	mov	r1, r2
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	4798      	blx	r3
 800209a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	22ff      	movs	r2, #255	; 0xff
 80020a0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	22fe      	movs	r2, #254	; 0xfe
 80020a8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	b29b      	uxth	r3, r3
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80020d2:	4413      	add	r3, r2
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	121b      	asrs	r3, r3, #8
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80020fe:	2305      	movs	r3, #5
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3306      	adds	r3, #6
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	429a      	cmp	r2, r3
 800210a:	dc0d      	bgt.n	8002128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	4413      	add	r3, r2
 8002112:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	4413      	add	r3, r2
 800211e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	3301      	adds	r3, #1
 8002124:	61bb      	str	r3, [r7, #24]
 8002126:	e7ec      	b.n	8002102 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3307      	adds	r3, #7
 800212c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	425a      	negs	r2, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	bf58      	it	pl
 8002138:	4253      	negpl	r3, r2
 800213a:	b2da      	uxtb	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	1c59      	adds	r1, r3, #1
 8002140:	6179      	str	r1, [r7, #20]
 8002142:	43d2      	mvns	r2, r2
 8002144:	b2d1      	uxtb	r1, r2
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4413      	add	r3, r2
 800214a:	460a      	mov	r2, r1
 800214c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002156:	dc0a      	bgt.n	800216e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1d18      	adds	r0, r3, #4
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4619      	mov	r1, r3
 8002166:	f7ff f9f9 	bl	800155c <_ZN13STM32Hardware5writeEPhi>
      return l;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	e005      	b.n	800217a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800216e:	4905      	ldr	r1, [pc, #20]	; (8002184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f849 	bl	8002208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800217a:	4618      	mov	r0, r3
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	08005674 	.word	0x08005674

08002188 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3304      	adds	r3, #4
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fa26 	bl	80015e8 <_ZN13STM32Hardware4timeEv>
 800219c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4915      	ldr	r1, [pc, #84]	; (80021fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80021a6:	fba1 1303 	umull	r1, r3, r1, r3
 80021aa:	099b      	lsrs	r3, r3, #6
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	1e5a      	subs	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6859      	ldr	r1, [r3, #4]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80021be:	fba3 0302 	umull	r0, r3, r3, r2
 80021c2:	099b      	lsrs	r3, r3, #6
 80021c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021c8:	fb00 f303 	mul.w	r3, r0, r3
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	1aca      	subs	r2, r1, r3
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80021d8:	4413      	add	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80021ec:	4619      	mov	r1, r3
 80021ee:	4610      	mov	r0, r2
 80021f0:	f000 fa02 	bl	80025f8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80021f4:	bf00      	nop
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	10624dd3 	.word	0x10624dd3
 8002200:	000f4240 	.word	0x000f4240
 8002204:	3b9aca00 	.word	0x3b9aca00

08002208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	2103      	movs	r1, #3
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f804 	bl	8002224 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	460b      	mov	r3, r1
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fd06 	bl	8000c48 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800223c:	7afb      	ldrb	r3, [r7, #11]
 800223e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f107 0214 	add.w	r2, r7, #20
 800224e:	2107      	movs	r1, #7
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	4798      	blx	r3
  }
 8002254:	bf00      	nop
 8002256:	3720      	adds	r7, #32
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_Z41__static_initialization_and_destruction_0ii>:
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d110      	bne.n	800228e <_Z41__static_initialization_and_destruction_0ii+0x32>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002272:	4293      	cmp	r3, r2
 8002274:	d10b      	bne.n	800228e <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8002276:	4808      	ldr	r0, [pc, #32]	; (8002298 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002278:	f7ff fa6e 	bl	8001758 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 800227c:	4807      	ldr	r0, [pc, #28]	; (800229c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800227e:	f7ff f9bf 	bl	8001600 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8002282:	2300      	movs	r3, #0
 8002284:	4a05      	ldr	r2, [pc, #20]	; (800229c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002286:	4906      	ldr	r1, [pc, #24]	; (80022a0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002288:	4806      	ldr	r0, [pc, #24]	; (80022a4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800228a:	f7ff f859 	bl	8001340 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200001b0 	.word	0x200001b0
 800229c:	20000aec 	.word	0x20000aec
 80022a0:	080056b0 	.word	0x080056b0
 80022a4:	20000af4 	.word	0x20000af4

080022a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    return configured_;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <_GLOBAL__sub_I_nh>:
 80022c2:	b580      	push	{r7, lr}
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022ca:	2001      	movs	r0, #1
 80022cc:	f7ff ffc6 	bl	800225c <_Z41__static_initialization_and_destruction_0ii>
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_MspInit+0x4c>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <HAL_MspInit+0x4c>)
 80022e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_MspInit+0x4c>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_MspInit+0x4c>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a08      	ldr	r2, [pc, #32]	; (8002320 <HAL_MspInit+0x4c>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_MspInit+0x4c>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800

08002324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a4d      	ldr	r2, [pc, #308]	; (8002478 <HAL_UART_MspInit+0x154>)
 8002342:	4293      	cmp	r3, r2
 8002344:	f040 8093 	bne.w	800246e <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	4b4b      	ldr	r3, [pc, #300]	; (800247c <HAL_UART_MspInit+0x158>)
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	4a4a      	ldr	r2, [pc, #296]	; (800247c <HAL_UART_MspInit+0x158>)
 8002352:	f043 0310 	orr.w	r3, r3, #16
 8002356:	6453      	str	r3, [r2, #68]	; 0x44
 8002358:	4b48      	ldr	r3, [pc, #288]	; (800247c <HAL_UART_MspInit+0x158>)
 800235a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	4b44      	ldr	r3, [pc, #272]	; (800247c <HAL_UART_MspInit+0x158>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	4a43      	ldr	r2, [pc, #268]	; (800247c <HAL_UART_MspInit+0x158>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6313      	str	r3, [r2, #48]	; 0x30
 8002374:	4b41      	ldr	r3, [pc, #260]	; (800247c <HAL_UART_MspInit+0x158>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002380:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238e:	2303      	movs	r3, #3
 8002390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002392:	2307      	movs	r3, #7
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	4838      	ldr	r0, [pc, #224]	; (8002480 <HAL_UART_MspInit+0x15c>)
 800239e:	f000 ff2b 	bl	80031f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80023a2:	4b38      	ldr	r3, [pc, #224]	; (8002484 <HAL_UART_MspInit+0x160>)
 80023a4:	4a38      	ldr	r2, [pc, #224]	; (8002488 <HAL_UART_MspInit+0x164>)
 80023a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80023a8:	4b36      	ldr	r3, [pc, #216]	; (8002484 <HAL_UART_MspInit+0x160>)
 80023aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023b0:	4b34      	ldr	r3, [pc, #208]	; (8002484 <HAL_UART_MspInit+0x160>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b6:	4b33      	ldr	r3, [pc, #204]	; (8002484 <HAL_UART_MspInit+0x160>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023bc:	4b31      	ldr	r3, [pc, #196]	; (8002484 <HAL_UART_MspInit+0x160>)
 80023be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023c4:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <HAL_UART_MspInit+0x160>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ca:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <HAL_UART_MspInit+0x160>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80023d0:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <HAL_UART_MspInit+0x160>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80023d6:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <HAL_UART_MspInit+0x160>)
 80023d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023dc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <HAL_UART_MspInit+0x160>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80023e4:	4827      	ldr	r0, [pc, #156]	; (8002484 <HAL_UART_MspInit+0x160>)
 80023e6:	f000 fb05 	bl	80029f4 <HAL_DMA_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80023f0:	f7fe f950 	bl	8000694 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a23      	ldr	r2, [pc, #140]	; (8002484 <HAL_UART_MspInit+0x160>)
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38
 80023fa:	4a22      	ldr	r2, [pc, #136]	; (8002484 <HAL_UART_MspInit+0x160>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002400:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_UART_MspInit+0x168>)
 8002402:	4a23      	ldr	r2, [pc, #140]	; (8002490 <HAL_UART_MspInit+0x16c>)
 8002404:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <HAL_UART_MspInit+0x168>)
 8002408:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800240c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HAL_UART_MspInit+0x168>)
 8002410:	2240      	movs	r2, #64	; 0x40
 8002412:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002414:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_UART_MspInit+0x168>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <HAL_UART_MspInit+0x168>)
 800241c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002420:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002422:	4b1a      	ldr	r3, [pc, #104]	; (800248c <HAL_UART_MspInit+0x168>)
 8002424:	2200      	movs	r2, #0
 8002426:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_UART_MspInit+0x168>)
 800242a:	2200      	movs	r2, #0
 800242c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800242e:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_UART_MspInit+0x168>)
 8002430:	2200      	movs	r2, #0
 8002432:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002434:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_UART_MspInit+0x168>)
 8002436:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800243a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_UART_MspInit+0x168>)
 800243e:	2200      	movs	r2, #0
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002442:	4812      	ldr	r0, [pc, #72]	; (800248c <HAL_UART_MspInit+0x168>)
 8002444:	f000 fad6 	bl	80029f4 <HAL_DMA_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800244e:	f7fe f921 	bl	8000694 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <HAL_UART_MspInit+0x168>)
 8002456:	635a      	str	r2, [r3, #52]	; 0x34
 8002458:	4a0c      	ldr	r2, [pc, #48]	; (800248c <HAL_UART_MspInit+0x168>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	2025      	movs	r0, #37	; 0x25
 8002464:	f000 fa8f 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002468:	2025      	movs	r0, #37	; 0x25
 800246a:	f000 faa8 	bl	80029be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800246e:	bf00      	nop
 8002470:	3728      	adds	r7, #40	; 0x28
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40011000 	.word	0x40011000
 800247c:	40023800 	.word	0x40023800
 8002480:	40020000 	.word	0x40020000
 8002484:	200000ec 	.word	0x200000ec
 8002488:	40026440 	.word	0x40026440
 800248c:	2000014c 	.word	0x2000014c
 8002490:	400264b8 	.word	0x400264b8

08002494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <NMI_Handler+0x4>

0800249a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800249e:	e7fe      	b.n	800249e <HardFault_Handler+0x4>

080024a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <MemManage_Handler+0x4>

080024a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024aa:	e7fe      	b.n	80024aa <BusFault_Handler+0x4>

080024ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <UsageFault_Handler+0x4>

080024b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e0:	f000 f932 	bl	8002748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <USART1_IRQHandler+0x10>)
 80024ee:	f001 fd73 	bl	8003fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200000a8 	.word	0x200000a8

080024fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <DMA2_Stream2_IRQHandler+0x10>)
 8002502:	f000 fc0f 	bl	8002d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200000ec 	.word	0x200000ec

08002510 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <DMA2_Stream7_IRQHandler+0x10>)
 8002516:	f000 fc05 	bl	8002d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	2000014c 	.word	0x2000014c

08002524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
	return 1;
 8002528:	2301      	movs	r3, #1
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <_kill>:

int _kill(int pid, int sig)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800253e:	f002 fe47 	bl	80051d0 <__errno>
 8002542:	4603      	mov	r3, r0
 8002544:	2216      	movs	r2, #22
 8002546:	601a      	str	r2, [r3, #0]
	return -1;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_exit>:

void _exit (int status)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800255c:	f04f 31ff 	mov.w	r1, #4294967295
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ffe7 	bl	8002534 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002566:	e7fe      	b.n	8002566 <_exit+0x12>

08002568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002570:	4a14      	ldr	r2, [pc, #80]	; (80025c4 <_sbrk+0x5c>)
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <_sbrk+0x60>)
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <_sbrk+0x64>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <_sbrk+0x64>)
 8002586:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <_sbrk+0x68>)
 8002588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <_sbrk+0x64>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	429a      	cmp	r2, r3
 8002596:	d207      	bcs.n	80025a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002598:	f002 fe1a 	bl	80051d0 <__errno>
 800259c:	4603      	mov	r3, r0
 800259e:	220c      	movs	r2, #12
 80025a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295
 80025a6:	e009      	b.n	80025bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ae:	4b07      	ldr	r3, [pc, #28]	; (80025cc <_sbrk+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	4a05      	ldr	r2, [pc, #20]	; (80025cc <_sbrk+0x64>)
 80025b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ba:	68fb      	ldr	r3, [r7, #12]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20020000 	.word	0x20020000
 80025c8:	00000400 	.word	0x00000400
 80025cc:	20000b08 	.word	0x20000b08
 80025d0:	20000b20 	.word	0x20000b20

080025d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <SystemInit+0x20>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <SystemInit+0x20>)
 80025e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0a5a      	lsrs	r2, r3, #9
 8002608:	490f      	ldr	r1, [pc, #60]	; (8002648 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800260a:	fba1 1202 	umull	r1, r2, r1, r2
 800260e:	09d2      	lsrs	r2, r2, #7
 8002610:	490e      	ldr	r1, [pc, #56]	; (800264c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8002612:	fb01 f202 	mul.w	r2, r1, r2
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	0a5b      	lsrs	r3, r3, #9
 8002620:	4a09      	ldr	r2, [pc, #36]	; (8002648 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	09db      	lsrs	r3, r3, #7
 8002628:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	601a      	str	r2, [r3, #0]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	00044b83 	.word	0x00044b83
 800264c:	3b9aca00 	.word	0x3b9aca00

08002650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002688 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002654:	480d      	ldr	r0, [pc, #52]	; (800268c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002656:	490e      	ldr	r1, [pc, #56]	; (8002690 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002658:	4a0e      	ldr	r2, [pc, #56]	; (8002694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800265c:	e002      	b.n	8002664 <LoopCopyDataInit>

0800265e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002662:	3304      	adds	r3, #4

08002664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002668:	d3f9      	bcc.n	800265e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800266a:	4a0b      	ldr	r2, [pc, #44]	; (8002698 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800266c:	4c0b      	ldr	r4, [pc, #44]	; (800269c <LoopFillZerobss+0x26>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002670:	e001      	b.n	8002676 <LoopFillZerobss>

08002672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002674:	3204      	adds	r2, #4

08002676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002678:	d3fb      	bcc.n	8002672 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800267a:	f7ff ffab 	bl	80025d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800267e:	f002 fdad 	bl	80051dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002682:	f7fd ff2b 	bl	80004dc <main>
  bx  lr    
 8002686:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800268c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002690:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002694:	080057c0 	.word	0x080057c0
  ldr r2, =_sbss
 8002698:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800269c:	20000b20 	.word	0x20000b20

080026a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026a0:	e7fe      	b.n	80026a0 <ADC_IRQHandler>
	...

080026a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <HAL_Init+0x40>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <HAL_Init+0x40>)
 80026ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_Init+0x40>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <HAL_Init+0x40>)
 80026ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c0:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <HAL_Init+0x40>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a07      	ldr	r2, [pc, #28]	; (80026e4 <HAL_Init+0x40>)
 80026c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026cc:	2003      	movs	r0, #3
 80026ce:	f000 f94f 	bl	8002970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026d2:	200f      	movs	r0, #15
 80026d4:	f000 f808 	bl	80026e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026d8:	f7ff fdfc 	bl	80022d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023c00 	.word	0x40023c00

080026e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_InitTick+0x54>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_InitTick+0x58>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f967 	bl	80029da <HAL_SYSTICK_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e00e      	b.n	8002734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b0f      	cmp	r3, #15
 800271a:	d80a      	bhi.n	8002732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800271c:	2200      	movs	r2, #0
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f000 f92f 	bl	8002986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002728:	4a06      	ldr	r2, [pc, #24]	; (8002744 <HAL_InitTick+0x5c>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000018 	.word	0x20000018
 8002740:	20000020 	.word	0x20000020
 8002744:	2000001c 	.word	0x2000001c

08002748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_IncTick+0x20>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_IncTick+0x24>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4413      	add	r3, r2
 8002758:	4a04      	ldr	r2, [pc, #16]	; (800276c <HAL_IncTick+0x24>)
 800275a:	6013      	str	r3, [r2, #0]
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000020 	.word	0x20000020
 800276c:	20000b0c 	.word	0x20000b0c

08002770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return uwTick;
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_GetTick+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000b0c 	.word	0x20000b0c

08002788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7ff ffee 	bl	8002770 <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d005      	beq.n	80027ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_Delay+0x44>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027ae:	bf00      	nop
 80027b0:	f7ff ffde 	bl	8002770 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d8f7      	bhi.n	80027b0 <HAL_Delay+0x28>
  {
  }
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000020 	.word	0x20000020

080027d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027ec:	4013      	ands	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002802:	4a04      	ldr	r2, [pc, #16]	; (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	60d3      	str	r3, [r2, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800281c:	4b04      	ldr	r3, [pc, #16]	; (8002830 <__NVIC_GetPriorityGrouping+0x18>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	f003 0307 	and.w	r3, r3, #7
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	2b00      	cmp	r3, #0
 8002844:	db0b      	blt.n	800285e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	f003 021f 	and.w	r2, r3, #31
 800284c:	4907      	ldr	r1, [pc, #28]	; (800286c <__NVIC_EnableIRQ+0x38>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2001      	movs	r0, #1
 8002856:	fa00 f202 	lsl.w	r2, r0, r2
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000e100 	.word	0xe000e100

08002870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	6039      	str	r1, [r7, #0]
 800287a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002880:	2b00      	cmp	r3, #0
 8002882:	db0a      	blt.n	800289a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	b2da      	uxtb	r2, r3
 8002888:	490c      	ldr	r1, [pc, #48]	; (80028bc <__NVIC_SetPriority+0x4c>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	0112      	lsls	r2, r2, #4
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	440b      	add	r3, r1
 8002894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002898:	e00a      	b.n	80028b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4908      	ldr	r1, [pc, #32]	; (80028c0 <__NVIC_SetPriority+0x50>)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	3b04      	subs	r3, #4
 80028a8:	0112      	lsls	r2, r2, #4
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	440b      	add	r3, r1
 80028ae:	761a      	strb	r2, [r3, #24]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000e100 	.word	0xe000e100
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b089      	sub	sp, #36	; 0x24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f1c3 0307 	rsb	r3, r3, #7
 80028de:	2b04      	cmp	r3, #4
 80028e0:	bf28      	it	cs
 80028e2:	2304      	movcs	r3, #4
 80028e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3304      	adds	r3, #4
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d902      	bls.n	80028f4 <NVIC_EncodePriority+0x30>
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3b03      	subs	r3, #3
 80028f2:	e000      	b.n	80028f6 <NVIC_EncodePriority+0x32>
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f8:	f04f 32ff 	mov.w	r2, #4294967295
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43da      	mvns	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	401a      	ands	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800290c:	f04f 31ff 	mov.w	r1, #4294967295
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	43d9      	mvns	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	4313      	orrs	r3, r2
         );
}
 800291e:	4618      	mov	r0, r3
 8002920:	3724      	adds	r7, #36	; 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800293c:	d301      	bcc.n	8002942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293e:	2301      	movs	r3, #1
 8002940:	e00f      	b.n	8002962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <SysTick_Config+0x40>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294a:	210f      	movs	r1, #15
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	f7ff ff8e 	bl	8002870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <SysTick_Config+0x40>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295a:	4b04      	ldr	r3, [pc, #16]	; (800296c <SysTick_Config+0x40>)
 800295c:	2207      	movs	r2, #7
 800295e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	e000e010 	.word	0xe000e010

08002970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ff29 	bl	80027d0 <__NVIC_SetPriorityGrouping>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002986:	b580      	push	{r7, lr}
 8002988:	b086      	sub	sp, #24
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002998:	f7ff ff3e 	bl	8002818 <__NVIC_GetPriorityGrouping>
 800299c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	6978      	ldr	r0, [r7, #20]
 80029a4:	f7ff ff8e 	bl	80028c4 <NVIC_EncodePriority>
 80029a8:	4602      	mov	r2, r0
 80029aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff5d 	bl	8002870 <__NVIC_SetPriority>
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff31 	bl	8002834 <__NVIC_EnableIRQ>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ffa2 	bl	800292c <SysTick_Config>
 80029e8:	4603      	mov	r3, r0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff feb6 	bl	8002770 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e099      	b.n	8002b44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a30:	e00f      	b.n	8002a52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a32:	f7ff fe9d 	bl	8002770 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d908      	bls.n	8002a52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2203      	movs	r2, #3
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e078      	b.n	8002b44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e8      	bne.n	8002a32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <HAL_DMA_Init+0x158>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d107      	bne.n	8002abc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0307 	bic.w	r3, r3, #7
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d117      	bne.n	8002b16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00e      	beq.n	8002b16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fb01 	bl	8003100 <DMA_CheckFifoParam>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2240      	movs	r2, #64	; 0x40
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b12:	2301      	movs	r3, #1
 8002b14:	e016      	b.n	8002b44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fab8 	bl	8003094 <DMA_CalcBaseAndBitshift>
 8002b24:	4603      	mov	r3, r0
 8002b26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	223f      	movs	r2, #63	; 0x3f
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	f010803f 	.word	0xf010803f

08002b50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_DMA_Start_IT+0x26>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e040      	b.n	8002bf8 <HAL_DMA_Start_IT+0xa8>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d12f      	bne.n	8002bea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fa4a 	bl	8003038 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	223f      	movs	r2, #63	; 0x3f
 8002baa:	409a      	lsls	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0216 	orr.w	r2, r2, #22
 8002bbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d007      	beq.n	8002bd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0208 	orr.w	r2, r2, #8
 8002bd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e005      	b.n	8002bf6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c0e:	f7ff fdaf 	bl	8002770 <HAL_GetTick>
 8002c12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d008      	beq.n	8002c32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e052      	b.n	8002cd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0216 	bic.w	r2, r2, #22
 8002c40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <HAL_DMA_Abort+0x62>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0208 	bic.w	r2, r2, #8
 8002c70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c82:	e013      	b.n	8002cac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c84:	f7ff fd74 	bl	8002770 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b05      	cmp	r3, #5
 8002c90:	d90c      	bls.n	8002cac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e015      	b.n	8002cd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1e4      	bne.n	8002c84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	223f      	movs	r2, #63	; 0x3f
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d004      	beq.n	8002cfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00c      	b.n	8002d18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2205      	movs	r2, #5
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d30:	4b8e      	ldr	r3, [pc, #568]	; (8002f6c <HAL_DMA_IRQHandler+0x248>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a8e      	ldr	r2, [pc, #568]	; (8002f70 <HAL_DMA_IRQHandler+0x24c>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	0a9b      	lsrs	r3, r3, #10
 8002d3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	2208      	movs	r2, #8
 8002d50:	409a      	lsls	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01a      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0204 	bic.w	r2, r2, #4
 8002d76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	2201      	movs	r2, #1
 8002d96:	409a      	lsls	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d012      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db2:	2201      	movs	r2, #1
 8002db4:	409a      	lsls	r2, r3
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbe:	f043 0202 	orr.w	r2, r3, #2
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dca:	2204      	movs	r2, #4
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d012      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00b      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	2204      	movs	r2, #4
 8002dea:	409a      	lsls	r2, r3
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	f043 0204 	orr.w	r2, r3, #4
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	2210      	movs	r2, #16
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d043      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d03c      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	2210      	movs	r2, #16
 8002e20:	409a      	lsls	r2, r3
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d018      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d108      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d024      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
 8002e52:	e01f      	b.n	8002e94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01b      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
 8002e64:	e016      	b.n	8002e94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0208 	bic.w	r2, r2, #8
 8002e82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e98:	2220      	movs	r2, #32
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 808f 	beq.w	8002fc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8087 	beq.w	8002fc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	2220      	movs	r2, #32
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b05      	cmp	r3, #5
 8002ecc:	d136      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0216 	bic.w	r2, r2, #22
 8002edc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d103      	bne.n	8002efe <HAL_DMA_IRQHandler+0x1da>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0208 	bic.w	r2, r2, #8
 8002f0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	223f      	movs	r2, #63	; 0x3f
 8002f14:	409a      	lsls	r2, r3
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d07e      	beq.n	8003030 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	4798      	blx	r3
        }
        return;
 8002f3a:	e079      	b.n	8003030 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01d      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10d      	bne.n	8002f74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d031      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
 8002f68:	e02c      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x2a0>
 8002f6a:	bf00      	nop
 8002f6c:	20000018 	.word	0x20000018
 8002f70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d023      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	4798      	blx	r3
 8002f84:	e01e      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10f      	bne.n	8002fb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0210 	bic.w	r2, r2, #16
 8002fa2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d032      	beq.n	8003032 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d022      	beq.n	800301e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2205      	movs	r2, #5
 8002fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d307      	bcc.n	800300c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f2      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x2cc>
 800300a:	e000      	b.n	800300e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800300c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
 800302e:	e000      	b.n	8003032 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003030:	bf00      	nop
    }
  }
}
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003054:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	d108      	bne.n	8003078 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003076:	e007      	b.n	8003088 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	60da      	str	r2, [r3, #12]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	3b10      	subs	r3, #16
 80030a4:	4a14      	ldr	r2, [pc, #80]	; (80030f8 <DMA_CalcBaseAndBitshift+0x64>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030ae:	4a13      	ldr	r2, [pc, #76]	; (80030fc <DMA_CalcBaseAndBitshift+0x68>)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d909      	bls.n	80030d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	1d1a      	adds	r2, r3, #4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	659a      	str	r2, [r3, #88]	; 0x58
 80030d4:	e007      	b.n	80030e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030de:	f023 0303 	bic.w	r3, r3, #3
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	aaaaaaab 	.word	0xaaaaaaab
 80030fc:	080057a4 	.word	0x080057a4

08003100 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d11f      	bne.n	800315a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d856      	bhi.n	80031ce <DMA_CheckFifoParam+0xce>
 8003120:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <DMA_CheckFifoParam+0x28>)
 8003122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003126:	bf00      	nop
 8003128:	08003139 	.word	0x08003139
 800312c:	0800314b 	.word	0x0800314b
 8003130:	08003139 	.word	0x08003139
 8003134:	080031cf 	.word	0x080031cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d046      	beq.n	80031d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003148:	e043      	b.n	80031d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003152:	d140      	bne.n	80031d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003158:	e03d      	b.n	80031d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003162:	d121      	bne.n	80031a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d837      	bhi.n	80031da <DMA_CheckFifoParam+0xda>
 800316a:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <DMA_CheckFifoParam+0x70>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	08003181 	.word	0x08003181
 8003174:	08003187 	.word	0x08003187
 8003178:	08003181 	.word	0x08003181
 800317c:	08003199 	.word	0x08003199
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	e030      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d025      	beq.n	80031de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003196:	e022      	b.n	80031de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031a0:	d11f      	bne.n	80031e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031a6:	e01c      	b.n	80031e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d903      	bls.n	80031b6 <DMA_CheckFifoParam+0xb6>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d003      	beq.n	80031bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031b4:	e018      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
      break;
 80031ba:	e015      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00e      	beq.n	80031e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      break;
 80031cc:	e00b      	b.n	80031e6 <DMA_CheckFifoParam+0xe6>
      break;
 80031ce:	bf00      	nop
 80031d0:	e00a      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;
 80031d2:	bf00      	nop
 80031d4:	e008      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;
 80031d6:	bf00      	nop
 80031d8:	e006      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;
 80031da:	bf00      	nop
 80031dc:	e004      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;
 80031de:	bf00      	nop
 80031e0:	e002      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80031e2:	bf00      	nop
 80031e4:	e000      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;
 80031e6:	bf00      	nop
    }
  } 
  
  return status; 
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop

080031f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	; 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	e16b      	b.n	80034ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003214:	2201      	movs	r2, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	429a      	cmp	r2, r3
 800322e:	f040 815a 	bne.w	80034e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d005      	beq.n	800324a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003246:	2b02      	cmp	r3, #2
 8003248:	d130      	bne.n	80032ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	2203      	movs	r2, #3
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003280:	2201      	movs	r2, #1
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 0201 	and.w	r2, r3, #1
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d017      	beq.n	80032e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2203      	movs	r2, #3
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d123      	bne.n	800333c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	08da      	lsrs	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3208      	adds	r2, #8
 80032fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	220f      	movs	r2, #15
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	08da      	lsrs	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3208      	adds	r2, #8
 8003336:	69b9      	ldr	r1, [r7, #24]
 8003338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0203 	and.w	r2, r3, #3
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80b4 	beq.w	80034e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	4b60      	ldr	r3, [pc, #384]	; (8003504 <HAL_GPIO_Init+0x30c>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	4a5f      	ldr	r2, [pc, #380]	; (8003504 <HAL_GPIO_Init+0x30c>)
 8003388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800338c:	6453      	str	r3, [r2, #68]	; 0x44
 800338e:	4b5d      	ldr	r3, [pc, #372]	; (8003504 <HAL_GPIO_Init+0x30c>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800339a:	4a5b      	ldr	r2, [pc, #364]	; (8003508 <HAL_GPIO_Init+0x310>)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3302      	adds	r3, #2
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a52      	ldr	r2, [pc, #328]	; (800350c <HAL_GPIO_Init+0x314>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d02b      	beq.n	800341e <HAL_GPIO_Init+0x226>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a51      	ldr	r2, [pc, #324]	; (8003510 <HAL_GPIO_Init+0x318>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d025      	beq.n	800341a <HAL_GPIO_Init+0x222>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a50      	ldr	r2, [pc, #320]	; (8003514 <HAL_GPIO_Init+0x31c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01f      	beq.n	8003416 <HAL_GPIO_Init+0x21e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4f      	ldr	r2, [pc, #316]	; (8003518 <HAL_GPIO_Init+0x320>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d019      	beq.n	8003412 <HAL_GPIO_Init+0x21a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4e      	ldr	r2, [pc, #312]	; (800351c <HAL_GPIO_Init+0x324>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <HAL_GPIO_Init+0x216>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4d      	ldr	r2, [pc, #308]	; (8003520 <HAL_GPIO_Init+0x328>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00d      	beq.n	800340a <HAL_GPIO_Init+0x212>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4c      	ldr	r2, [pc, #304]	; (8003524 <HAL_GPIO_Init+0x32c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d007      	beq.n	8003406 <HAL_GPIO_Init+0x20e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4b      	ldr	r2, [pc, #300]	; (8003528 <HAL_GPIO_Init+0x330>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d101      	bne.n	8003402 <HAL_GPIO_Init+0x20a>
 80033fe:	2307      	movs	r3, #7
 8003400:	e00e      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003402:	2308      	movs	r3, #8
 8003404:	e00c      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003406:	2306      	movs	r3, #6
 8003408:	e00a      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800340a:	2305      	movs	r3, #5
 800340c:	e008      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800340e:	2304      	movs	r3, #4
 8003410:	e006      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003412:	2303      	movs	r3, #3
 8003414:	e004      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003416:	2302      	movs	r3, #2
 8003418:	e002      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800341e:	2300      	movs	r3, #0
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	f002 0203 	and.w	r2, r2, #3
 8003426:	0092      	lsls	r2, r2, #2
 8003428:	4093      	lsls	r3, r2
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003430:	4935      	ldr	r1, [pc, #212]	; (8003508 <HAL_GPIO_Init+0x310>)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800343e:	4b3b      	ldr	r3, [pc, #236]	; (800352c <HAL_GPIO_Init+0x334>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003462:	4a32      	ldr	r2, [pc, #200]	; (800352c <HAL_GPIO_Init+0x334>)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003468:	4b30      	ldr	r3, [pc, #192]	; (800352c <HAL_GPIO_Init+0x334>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800348c:	4a27      	ldr	r2, [pc, #156]	; (800352c <HAL_GPIO_Init+0x334>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_GPIO_Init+0x334>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034b6:	4a1d      	ldr	r2, [pc, #116]	; (800352c <HAL_GPIO_Init+0x334>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_GPIO_Init+0x334>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034e0:	4a12      	ldr	r2, [pc, #72]	; (800352c <HAL_GPIO_Init+0x334>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3301      	adds	r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	2b0f      	cmp	r3, #15
 80034f0:	f67f ae90 	bls.w	8003214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	3724      	adds	r7, #36	; 0x24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	40013800 	.word	0x40013800
 800350c:	40020000 	.word	0x40020000
 8003510:	40020400 	.word	0x40020400
 8003514:	40020800 	.word	0x40020800
 8003518:	40020c00 	.word	0x40020c00
 800351c:	40021000 	.word	0x40021000
 8003520:	40021400 	.word	0x40021400
 8003524:	40021800 	.word	0x40021800
 8003528:	40021c00 	.word	0x40021c00
 800352c:	40013c00 	.word	0x40013c00

08003530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e267      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d075      	beq.n	800363a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800354e:	4b88      	ldr	r3, [pc, #544]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b04      	cmp	r3, #4
 8003558:	d00c      	beq.n	8003574 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355a:	4b85      	ldr	r3, [pc, #532]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003562:	2b08      	cmp	r3, #8
 8003564:	d112      	bne.n	800358c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003566:	4b82      	ldr	r3, [pc, #520]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003572:	d10b      	bne.n	800358c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	4b7e      	ldr	r3, [pc, #504]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d05b      	beq.n	8003638 <HAL_RCC_OscConfig+0x108>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d157      	bne.n	8003638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e242      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003594:	d106      	bne.n	80035a4 <HAL_RCC_OscConfig+0x74>
 8003596:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a75      	ldr	r2, [pc, #468]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e01d      	b.n	80035e0 <HAL_RCC_OscConfig+0xb0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x98>
 80035ae:	4b70      	ldr	r3, [pc, #448]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a6f      	ldr	r2, [pc, #444]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b6d      	ldr	r3, [pc, #436]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a6c      	ldr	r2, [pc, #432]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e00b      	b.n	80035e0 <HAL_RCC_OscConfig+0xb0>
 80035c8:	4b69      	ldr	r3, [pc, #420]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a68      	ldr	r2, [pc, #416]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b66      	ldr	r3, [pc, #408]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a65      	ldr	r2, [pc, #404]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d013      	beq.n	8003610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7ff f8c2 	bl	8002770 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f0:	f7ff f8be 	bl	8002770 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e207      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0xc0>
 800360e:	e014      	b.n	800363a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7ff f8ae 	bl	8002770 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003618:	f7ff f8aa 	bl	8002770 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e1f3      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362a:	4b51      	ldr	r3, [pc, #324]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0xe8>
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d063      	beq.n	800370e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003646:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003652:	4b47      	ldr	r3, [pc, #284]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800365a:	2b08      	cmp	r3, #8
 800365c:	d11c      	bne.n	8003698 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365e:	4b44      	ldr	r3, [pc, #272]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d116      	bne.n	8003698 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366a:	4b41      	ldr	r3, [pc, #260]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_RCC_OscConfig+0x152>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e1c7      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4937      	ldr	r1, [pc, #220]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	e03a      	b.n	800370e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d020      	beq.n	80036e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a0:	4b34      	ldr	r3, [pc, #208]	; (8003774 <HAL_RCC_OscConfig+0x244>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7ff f863 	bl	8002770 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ae:	f7ff f85f 	bl	8002770 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e1a8      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c0:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036cc:	4b28      	ldr	r3, [pc, #160]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4925      	ldr	r1, [pc, #148]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	600b      	str	r3, [r1, #0]
 80036e0:	e015      	b.n	800370e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e2:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCC_OscConfig+0x244>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7ff f842 	bl	8002770 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f0:	f7ff f83e 	bl	8002770 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e187      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003702:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d036      	beq.n	8003788 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HAL_RCC_OscConfig+0x248>)
 8003724:	2201      	movs	r2, #1
 8003726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003728:	f7ff f822 	bl	8002770 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003730:	f7ff f81e 	bl	8002770 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e167      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0x200>
 800374e:	e01b      	b.n	8003788 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_RCC_OscConfig+0x248>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003756:	f7ff f80b 	bl	8002770 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375c:	e00e      	b.n	800377c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375e:	f7ff f807 	bl	8002770 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d907      	bls.n	800377c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e150      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
 8003770:	40023800 	.word	0x40023800
 8003774:	42470000 	.word	0x42470000
 8003778:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800377c:	4b88      	ldr	r3, [pc, #544]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800377e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1ea      	bne.n	800375e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8097 	beq.w	80038c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003796:	2300      	movs	r3, #0
 8003798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379a:	4b81      	ldr	r3, [pc, #516]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10f      	bne.n	80037c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	4b7d      	ldr	r3, [pc, #500]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	4a7c      	ldr	r2, [pc, #496]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80037b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b4:	6413      	str	r3, [r2, #64]	; 0x40
 80037b6:	4b7a      	ldr	r3, [pc, #488]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c2:	2301      	movs	r3, #1
 80037c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c6:	4b77      	ldr	r3, [pc, #476]	; (80039a4 <HAL_RCC_OscConfig+0x474>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d118      	bne.n	8003804 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037d2:	4b74      	ldr	r3, [pc, #464]	; (80039a4 <HAL_RCC_OscConfig+0x474>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a73      	ldr	r2, [pc, #460]	; (80039a4 <HAL_RCC_OscConfig+0x474>)
 80037d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037de:	f7fe ffc7 	bl	8002770 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e6:	f7fe ffc3 	bl	8002770 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e10c      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f8:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <HAL_RCC_OscConfig+0x474>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x2ea>
 800380c:	4b64      	ldr	r3, [pc, #400]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a63      	ldr	r2, [pc, #396]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
 8003818:	e01c      	b.n	8003854 <HAL_RCC_OscConfig+0x324>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b05      	cmp	r3, #5
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0x30c>
 8003822:	4b5f      	ldr	r3, [pc, #380]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	4a5e      	ldr	r2, [pc, #376]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003828:	f043 0304 	orr.w	r3, r3, #4
 800382c:	6713      	str	r3, [r2, #112]	; 0x70
 800382e:	4b5c      	ldr	r3, [pc, #368]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	4a5b      	ldr	r2, [pc, #364]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6713      	str	r3, [r2, #112]	; 0x70
 800383a:	e00b      	b.n	8003854 <HAL_RCC_OscConfig+0x324>
 800383c:	4b58      	ldr	r3, [pc, #352]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	4a57      	ldr	r2, [pc, #348]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	6713      	str	r3, [r2, #112]	; 0x70
 8003848:	4b55      	ldr	r3, [pc, #340]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	4a54      	ldr	r2, [pc, #336]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800384e:	f023 0304 	bic.w	r3, r3, #4
 8003852:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d015      	beq.n	8003888 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7fe ff88 	bl	8002770 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003862:	e00a      	b.n	800387a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003864:	f7fe ff84 	bl	8002770 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e0cb      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387a:	4b49      	ldr	r3, [pc, #292]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0ee      	beq.n	8003864 <HAL_RCC_OscConfig+0x334>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003888:	f7fe ff72 	bl	8002770 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003890:	f7fe ff6e 	bl	8002770 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0b5      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a6:	4b3e      	ldr	r3, [pc, #248]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1ee      	bne.n	8003890 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d105      	bne.n	80038c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b8:	4b39      	ldr	r3, [pc, #228]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	4a38      	ldr	r2, [pc, #224]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80038be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80a1 	beq.w	8003a10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ce:	4b34      	ldr	r3, [pc, #208]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d05c      	beq.n	8003994 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d141      	bne.n	8003966 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e2:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <HAL_RCC_OscConfig+0x478>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7fe ff42 	bl	8002770 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f0:	f7fe ff3e 	bl	8002770 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e087      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	019b      	lsls	r3, r3, #6
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	3b01      	subs	r3, #1
 8003928:	041b      	lsls	r3, r3, #16
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	491b      	ldr	r1, [pc, #108]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003938:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <HAL_RCC_OscConfig+0x478>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393e:	f7fe ff17 	bl	8002770 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003946:	f7fe ff13 	bl	8002770 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e05c      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003958:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x416>
 8003964:	e054      	b.n	8003a10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <HAL_RCC_OscConfig+0x478>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7fe ff00 	bl	8002770 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003974:	f7fe fefc 	bl	8002770 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e045      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x444>
 8003992:	e03d      	b.n	8003a10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d107      	bne.n	80039ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e038      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40007000 	.word	0x40007000
 80039a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039ac:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <HAL_RCC_OscConfig+0x4ec>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d028      	beq.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d121      	bne.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d11a      	bne.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039dc:	4013      	ands	r3, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d111      	bne.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	085b      	lsrs	r3, r3, #1
 80039f4:	3b01      	subs	r3, #1
 80039f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d107      	bne.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800

08003a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0cc      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a34:	4b68      	ldr	r3, [pc, #416]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d90c      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b65      	ldr	r3, [pc, #404]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0b8      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a74:	4b59      	ldr	r3, [pc, #356]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a58      	ldr	r2, [pc, #352]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a8c:	4b53      	ldr	r3, [pc, #332]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a52      	ldr	r2, [pc, #328]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a98:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	494d      	ldr	r1, [pc, #308]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d044      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d119      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e07f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ade:	4b3f      	ldr	r3, [pc, #252]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e06f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aee:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e067      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afe:	4b37      	ldr	r3, [pc, #220]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f023 0203 	bic.w	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4934      	ldr	r1, [pc, #208]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b10:	f7fe fe2e 	bl	8002770 <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b18:	f7fe fe2a 	bl	8002770 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e04f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 020c 	and.w	r2, r3, #12
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d1eb      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b40:	4b25      	ldr	r3, [pc, #148]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d20c      	bcs.n	8003b68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e032      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4916      	ldr	r1, [pc, #88]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b92:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	490e      	ldr	r1, [pc, #56]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ba6:	f000 f821 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003baa:	4602      	mov	r2, r0
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	490a      	ldr	r1, [pc, #40]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb8:	5ccb      	ldrb	r3, [r1, r3]
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fd8e 	bl	80026e8 <HAL_InitTick>

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40023c00 	.word	0x40023c00
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	0800578c 	.word	0x0800578c
 8003be4:	20000018 	.word	0x20000018
 8003be8:	2000001c 	.word	0x2000001c

08003bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf0:	b090      	sub	sp, #64	; 0x40
 8003bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c04:	4b59      	ldr	r3, [pc, #356]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d00d      	beq.n	8003c2c <HAL_RCC_GetSysClockFreq+0x40>
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	f200 80a1 	bhi.w	8003d58 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_RCC_GetSysClockFreq+0x34>
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d003      	beq.n	8003c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c1e:	e09b      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c20:	4b53      	ldr	r3, [pc, #332]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c22:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c24:	e09b      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c26:	4b53      	ldr	r3, [pc, #332]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c2a:	e098      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c2c:	4b4f      	ldr	r3, [pc, #316]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c34:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c36:	4b4d      	ldr	r3, [pc, #308]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d028      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c42:	4b4a      	ldr	r3, [pc, #296]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	2200      	movs	r2, #0
 8003c4a:	623b      	str	r3, [r7, #32]
 8003c4c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c54:	2100      	movs	r1, #0
 8003c56:	4b47      	ldr	r3, [pc, #284]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c58:	fb03 f201 	mul.w	r2, r3, r1
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	fb00 f303 	mul.w	r3, r0, r3
 8003c62:	4413      	add	r3, r2
 8003c64:	4a43      	ldr	r2, [pc, #268]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c66:	fba0 1202 	umull	r1, r2, r0, r2
 8003c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c6c:	460a      	mov	r2, r1
 8003c6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c72:	4413      	add	r3, r2
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c78:	2200      	movs	r2, #0
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	61fa      	str	r2, [r7, #28]
 8003c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c86:	f7fc faa7 	bl	80001d8 <__aeabi_uldivmod>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4613      	mov	r3, r2
 8003c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c92:	e053      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c94:	4b35      	ldr	r3, [pc, #212]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	099b      	lsrs	r3, r3, #6
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	617a      	str	r2, [r7, #20]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ca6:	f04f 0b00 	mov.w	fp, #0
 8003caa:	4652      	mov	r2, sl
 8003cac:	465b      	mov	r3, fp
 8003cae:	f04f 0000 	mov.w	r0, #0
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	0159      	lsls	r1, r3, #5
 8003cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cbc:	0150      	lsls	r0, r2, #5
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	ebb2 080a 	subs.w	r8, r2, sl
 8003cc6:	eb63 090b 	sbc.w	r9, r3, fp
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cde:	ebb2 0408 	subs.w	r4, r2, r8
 8003ce2:	eb63 0509 	sbc.w	r5, r3, r9
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	00eb      	lsls	r3, r5, #3
 8003cf0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cf4:	00e2      	lsls	r2, r4, #3
 8003cf6:	4614      	mov	r4, r2
 8003cf8:	461d      	mov	r5, r3
 8003cfa:	eb14 030a 	adds.w	r3, r4, sl
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	eb45 030b 	adc.w	r3, r5, fp
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d12:	4629      	mov	r1, r5
 8003d14:	028b      	lsls	r3, r1, #10
 8003d16:	4621      	mov	r1, r4
 8003d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	028a      	lsls	r2, r1, #10
 8003d20:	4610      	mov	r0, r2
 8003d22:	4619      	mov	r1, r3
 8003d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d26:	2200      	movs	r2, #0
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	60fa      	str	r2, [r7, #12]
 8003d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d30:	f7fc fa52 	bl	80001d8 <__aeabi_uldivmod>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4613      	mov	r3, r2
 8003d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	0c1b      	lsrs	r3, r3, #16
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	3301      	adds	r3, #1
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d56:	e002      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3740      	adds	r7, #64	; 0x40
 8003d64:	46bd      	mov	sp, r7
 8003d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	00f42400 	.word	0x00f42400
 8003d74:	017d7840 	.word	0x017d7840

08003d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20000018 	.word	0x20000018

08003d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d94:	f7ff fff0 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	0a9b      	lsrs	r3, r3, #10
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	4903      	ldr	r1, [pc, #12]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40023800 	.word	0x40023800
 8003db4:	0800579c 	.word	0x0800579c

08003db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dbc:	f7ff ffdc 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	0b5b      	lsrs	r3, r3, #13
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4903      	ldr	r1, [pc, #12]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	0800579c 	.word	0x0800579c

08003de0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e03f      	b.n	8003e72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fe fa8c 	bl	8002324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2224      	movs	r2, #36	; 0x24
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 ff43 	bl	8004cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08c      	sub	sp, #48	; 0x30
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d165      	bne.n	8003f62 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_UART_Transmit_DMA+0x26>
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e05e      	b.n	8003f64 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_UART_Transmit_DMA+0x38>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e057      	b.n	8003f64 <HAL_UART_Transmit_DMA+0xe8>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	88fa      	ldrh	r2, [r7, #6]
 8003ec6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2221      	movs	r2, #33	; 0x21
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee0:	4a22      	ldr	r2, [pc, #136]	; (8003f6c <HAL_UART_Transmit_DMA+0xf0>)
 8003ee2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee8:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <HAL_UART_Transmit_DMA+0xf4>)
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef0:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <HAL_UART_Transmit_DMA+0xf8>)
 8003ef2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef8:	2200      	movs	r2, #0
 8003efa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003efc:	f107 0308 	add.w	r3, r7, #8
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	6819      	ldr	r1, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	461a      	mov	r2, r3
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	f7fe fe1c 	bl	8002b50 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f20:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3314      	adds	r3, #20
 8003f30:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	617b      	str	r3, [r7, #20]
   return(result);
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3314      	adds	r3, #20
 8003f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f4a:	627a      	str	r2, [r7, #36]	; 0x24
 8003f4c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6a39      	ldr	r1, [r7, #32]
 8003f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e5      	bne.n	8003f2a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e000      	b.n	8003f64 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003f62:	2302      	movs	r3, #2
  }
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3730      	adds	r7, #48	; 0x30
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	08004549 	.word	0x08004549
 8003f70:	080045e3 	.word	0x080045e3
 8003f74:	0800475b 	.word	0x0800475b

08003f78 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	4613      	mov	r3, r2
 8003f84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d11d      	bne.n	8003fce <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_UART_Receive_DMA+0x26>
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e016      	b.n	8003fd0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_UART_Receive_DMA+0x38>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e00f      	b.n	8003fd0 <HAL_UART_Receive_DMA+0x58>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 fc13 	bl	80047f0 <UART_Start_Receive_DMA>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	e000      	b.n	8003fd0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003fce:	2302      	movs	r3, #2
  }
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b0ba      	sub	sp, #232	; 0xe8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004004:	2300      	movs	r3, #0
 8004006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800400a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10f      	bne.n	800403e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800401e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <HAL_UART_IRQHandler+0x66>
 800402a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fd7f 	bl	8004b3a <UART_Receive_IT>
      return;
 800403c:	e256      	b.n	80044ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800403e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 80de 	beq.w	8004204 <HAL_UART_IRQHandler+0x22c>
 8004048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d106      	bne.n	8004062 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004058:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 80d1 	beq.w	8004204 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_UART_IRQHandler+0xae>
 800406e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f043 0201 	orr.w	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <HAL_UART_IRQHandler+0xd2>
 8004092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f043 0202 	orr.w	r2, r3, #2
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_UART_IRQHandler+0xf6>
 80040b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f043 0204 	orr.w	r2, r3, #4
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d011      	beq.n	80040fe <HAL_UART_IRQHandler+0x126>
 80040da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d105      	bne.n	80040f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f043 0208 	orr.w	r2, r3, #8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 81ed 	beq.w	80044e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_UART_IRQHandler+0x14e>
 8004114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fd0a 	bl	8004b3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b40      	cmp	r3, #64	; 0x40
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d103      	bne.n	8004152 <HAL_UART_IRQHandler+0x17a>
 800414a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d04f      	beq.n	80041f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fc12 	bl	800497c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004162:	2b40      	cmp	r3, #64	; 0x40
 8004164:	d141      	bne.n	80041ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3314      	adds	r3, #20
 800416c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800417c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3314      	adds	r3, #20
 800418e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004192:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800419e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1d9      	bne.n	8004166 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d013      	beq.n	80041e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	4a7d      	ldr	r2, [pc, #500]	; (80043b4 <HAL_UART_IRQHandler+0x3dc>)
 80041c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe fd8a 	bl	8002ce0 <HAL_DMA_Abort_IT>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d016      	beq.n	8004200 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041dc:	4610      	mov	r0, r2
 80041de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e0:	e00e      	b.n	8004200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f99a 	bl	800451c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e8:	e00a      	b.n	8004200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f996 	bl	800451c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f0:	e006      	b.n	8004200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f992 	bl	800451c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041fe:	e170      	b.n	80044e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004200:	bf00      	nop
    return;
 8004202:	e16e      	b.n	80044e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	2b01      	cmp	r3, #1
 800420a:	f040 814a 	bne.w	80044a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800420e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8143 	beq.w	80044a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800421c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 813c 	beq.w	80044a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	f040 80b4 	bne.w	80043b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800425c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 8140 	beq.w	80044e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800426a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800426e:	429a      	cmp	r2, r3
 8004270:	f080 8139 	bcs.w	80044e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800427a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004286:	f000 8088 	beq.w	800439a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80042b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1d9      	bne.n	800428a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3314      	adds	r3, #20
 80042dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3314      	adds	r3, #20
 80042f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004302:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800430c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e1      	bne.n	80042d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3314      	adds	r3, #20
 8004318:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004336:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004338:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800433c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e3      	bne.n	8004312 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800436a:	f023 0310 	bic.w	r3, r3, #16
 800436e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800437c:	65ba      	str	r2, [r7, #88]	; 0x58
 800437e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004382:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800438a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e3      	bne.n	8004358 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	4618      	mov	r0, r3
 8004396:	f7fe fc33 	bl	8002c00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f8c0 	bl	8004530 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043b0:	e099      	b.n	80044e6 <HAL_UART_IRQHandler+0x50e>
 80043b2:	bf00      	nop
 80043b4:	08004a43 	.word	0x08004a43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 808b 	beq.w	80044ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80043d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8086 	beq.w	80044ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	330c      	adds	r3, #12
 80043e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004402:	647a      	str	r2, [r7, #68]	; 0x44
 8004404:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e3      	bne.n	80043de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	623b      	str	r3, [r7, #32]
   return(result);
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3314      	adds	r3, #20
 8004436:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800443a:	633a      	str	r2, [r7, #48]	; 0x30
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e3      	bne.n	8004416 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	60fb      	str	r3, [r7, #12]
   return(result);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0310 	bic.w	r3, r3, #16
 8004472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	330c      	adds	r3, #12
 800447c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004480:	61fa      	str	r2, [r7, #28]
 8004482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	69b9      	ldr	r1, [r7, #24]
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	617b      	str	r3, [r7, #20]
   return(result);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e3      	bne.n	800445c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f848 	bl	8004530 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044a0:	e023      	b.n	80044ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_UART_IRQHandler+0x4ea>
 80044ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fad5 	bl	8004a6a <UART_Transmit_IT>
    return;
 80044c0:	e014      	b.n	80044ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00e      	beq.n	80044ec <HAL_UART_IRQHandler+0x514>
 80044ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fb15 	bl	8004b0a <UART_EndTransmit_IT>
    return;
 80044e0:	e004      	b.n	80044ec <HAL_UART_IRQHandler+0x514>
    return;
 80044e2:	bf00      	nop
 80044e4:	e002      	b.n	80044ec <HAL_UART_IRQHandler+0x514>
      return;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <HAL_UART_IRQHandler+0x514>
      return;
 80044ea:	bf00      	nop
  }
}
 80044ec:	37e8      	adds	r7, #232	; 0xe8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop

080044f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b090      	sub	sp, #64	; 0x40
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d137      	bne.n	80045d4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004566:	2200      	movs	r2, #0
 8004568:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800456a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3314      	adds	r3, #20
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	623b      	str	r3, [r7, #32]
   return(result);
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004580:	63bb      	str	r3, [r7, #56]	; 0x38
 8004582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3314      	adds	r3, #20
 8004588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800458a:	633a      	str	r2, [r7, #48]	; 0x30
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e5      	bne.n	800456a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800459e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	330c      	adds	r3, #12
 80045a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045b4:	637b      	str	r3, [r7, #52]	; 0x34
 80045b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	330c      	adds	r3, #12
 80045bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045be:	61fa      	str	r2, [r7, #28]
 80045c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	69b9      	ldr	r1, [r7, #24]
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	617b      	str	r3, [r7, #20]
   return(result);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e5      	bne.n	800459e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045d2:	e002      	b.n	80045da <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80045d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80045d6:	f7fd f937 	bl	8001848 <HAL_UART_TxCpltCallback>
}
 80045da:	bf00      	nop
 80045dc:	3740      	adds	r7, #64	; 0x40
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7ff ff7f 	bl	80044f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b09c      	sub	sp, #112	; 0x70
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004616:	2b00      	cmp	r3, #0
 8004618:	d172      	bne.n	8004700 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800461a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461c:	2200      	movs	r2, #0
 800461e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004632:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004636:	66bb      	str	r3, [r7, #104]	; 0x68
 8004638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004640:	65ba      	str	r2, [r7, #88]	; 0x58
 8004642:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004646:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800464e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e5      	bne.n	8004620 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3314      	adds	r3, #20
 800465a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	667b      	str	r3, [r7, #100]	; 0x64
 800466c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3314      	adds	r3, #20
 8004672:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004674:	647a      	str	r2, [r7, #68]	; 0x44
 8004676:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800467a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e5      	bne.n	8004654 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3314      	adds	r3, #20
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	623b      	str	r3, [r7, #32]
   return(result);
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469e:	663b      	str	r3, [r7, #96]	; 0x60
 80046a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3314      	adds	r3, #20
 80046a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046a8:	633a      	str	r2, [r7, #48]	; 0x30
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e5      	bne.n	8004688 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d119      	bne.n	8004700 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	60fb      	str	r3, [r7, #12]
   return(result);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0310 	bic.w	r3, r3, #16
 80046e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046ec:	61fa      	str	r2, [r7, #28]
 80046ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f0:	69b9      	ldr	r1, [r7, #24]
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	e841 2300 	strex	r3, r2, [r1]
 80046f8:	617b      	str	r3, [r7, #20]
   return(result);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e5      	bne.n	80046cc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	2b01      	cmp	r3, #1
 8004706:	d106      	bne.n	8004716 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800470c:	4619      	mov	r1, r3
 800470e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004710:	f7ff ff0e 	bl	8004530 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004714:	e002      	b.n	800471c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004716:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004718:	f7fd f8a8 	bl	800186c <HAL_UART_RxCpltCallback>
}
 800471c:	bf00      	nop
 800471e:	3770      	adds	r7, #112	; 0x70
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	2b01      	cmp	r3, #1
 8004738:	d108      	bne.n	800474c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	b29b      	uxth	r3, r3
 8004742:	4619      	mov	r1, r3
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f7ff fef3 	bl	8004530 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800474a:	e002      	b.n	8004752 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7ff fedb 	bl	8004508 <HAL_UART_RxHalfCpltCallback>
}
 8004752:	bf00      	nop
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004776:	2b80      	cmp	r3, #128	; 0x80
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b21      	cmp	r3, #33	; 0x21
 800478c:	d108      	bne.n	80047a0 <UART_DMAError+0x46>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2200      	movs	r2, #0
 8004798:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800479a:	68b8      	ldr	r0, [r7, #8]
 800479c:	f000 f8c6 	bl	800492c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047aa:	2b40      	cmp	r3, #64	; 0x40
 80047ac:	bf0c      	ite	eq
 80047ae:	2301      	moveq	r3, #1
 80047b0:	2300      	movne	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b22      	cmp	r3, #34	; 0x22
 80047c0:	d108      	bne.n	80047d4 <UART_DMAError+0x7a>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2200      	movs	r2, #0
 80047cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80047ce:	68b8      	ldr	r0, [r7, #8]
 80047d0:	f000 f8d4 	bl	800497c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	f043 0210 	orr.w	r2, r3, #16
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e0:	68b8      	ldr	r0, [r7, #8]
 80047e2:	f7ff fe9b 	bl	800451c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b098      	sub	sp, #96	; 0x60
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	4613      	mov	r3, r2
 80047fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	88fa      	ldrh	r2, [r7, #6]
 8004808:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2222      	movs	r2, #34	; 0x22
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	4a40      	ldr	r2, [pc, #256]	; (8004920 <UART_Start_Receive_DMA+0x130>)
 800481e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	4a3f      	ldr	r2, [pc, #252]	; (8004924 <UART_Start_Receive_DMA+0x134>)
 8004826:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	4a3e      	ldr	r2, [pc, #248]	; (8004928 <UART_Start_Receive_DMA+0x138>)
 800482e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	2200      	movs	r2, #0
 8004836:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004838:	f107 0308 	add.w	r3, r7, #8
 800483c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	f7fe f97e 	bl	8002b50 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d019      	beq.n	80048ae <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800488a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004890:	65bb      	str	r3, [r7, #88]	; 0x58
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	330c      	adds	r3, #12
 8004898:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800489a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800489c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80048a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80048a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e5      	bne.n	800487a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3314      	adds	r3, #20
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	657b      	str	r3, [r7, #84]	; 0x54
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048ce:	63ba      	str	r2, [r7, #56]	; 0x38
 80048d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80048d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e5      	bne.n	80048ae <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3314      	adds	r3, #20
 80048e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	617b      	str	r3, [r7, #20]
   return(result);
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048f8:	653b      	str	r3, [r7, #80]	; 0x50
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3314      	adds	r3, #20
 8004900:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004902:	627a      	str	r2, [r7, #36]	; 0x24
 8004904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6a39      	ldr	r1, [r7, #32]
 8004908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e5      	bne.n	80048e2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3760      	adds	r7, #96	; 0x60
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	080045ff 	.word	0x080045ff
 8004924:	08004725 	.word	0x08004725
 8004928:	0800475b 	.word	0x0800475b

0800492c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800492c:	b480      	push	{r7}
 800492e:	b089      	sub	sp, #36	; 0x24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	60bb      	str	r3, [r7, #8]
   return(result);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	330c      	adds	r3, #12
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	61ba      	str	r2, [r7, #24]
 8004956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	6979      	ldr	r1, [r7, #20]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	e841 2300 	strex	r3, r2, [r1]
 8004960:	613b      	str	r3, [r7, #16]
   return(result);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e5      	bne.n	8004934 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004970:	bf00      	nop
 8004972:	3724      	adds	r7, #36	; 0x24
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800497c:	b480      	push	{r7}
 800497e:	b095      	sub	sp, #84	; 0x54
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	330c      	adds	r3, #12
 800498a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498e:	e853 3f00 	ldrex	r3, [r3]
 8004992:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800499a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049a4:	643a      	str	r2, [r7, #64]	; 0x40
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e5      	bne.n	8004984 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3314      	adds	r3, #20
 80049be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3314      	adds	r3, #20
 80049d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e5      	bne.n	80049b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d119      	bne.n	8004a28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f023 0310 	bic.w	r3, r3, #16
 8004a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	330c      	adds	r3, #12
 8004a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a14:	61ba      	str	r2, [r7, #24]
 8004a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6979      	ldr	r1, [r7, #20]
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	613b      	str	r3, [r7, #16]
   return(result);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e5      	bne.n	80049f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a36:	bf00      	nop
 8004a38:	3754      	adds	r7, #84	; 0x54
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7ff fd5d 	bl	800451c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a62:	bf00      	nop
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b21      	cmp	r3, #33	; 0x21
 8004a7c:	d13e      	bne.n	8004afc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a86:	d114      	bne.n	8004ab2 <UART_Transmit_IT+0x48>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d110      	bne.n	8004ab2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aa4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	1c9a      	adds	r2, r3, #2
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	621a      	str	r2, [r3, #32]
 8004ab0:	e008      	b.n	8004ac4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	1c59      	adds	r1, r3, #1
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6211      	str	r1, [r2, #32]
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10f      	bne.n	8004af8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ae6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004af6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	e000      	b.n	8004afe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004afc:	2302      	movs	r3, #2
  }
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fc fe8c 	bl	8001848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b08c      	sub	sp, #48	; 0x30
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b22      	cmp	r3, #34	; 0x22
 8004b4c:	f040 80ab 	bne.w	8004ca6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b58:	d117      	bne.n	8004b8a <UART_Receive_IT+0x50>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d113      	bne.n	8004b8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	1c9a      	adds	r2, r3, #2
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28
 8004b88:	e026      	b.n	8004bd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9c:	d007      	beq.n	8004bae <UART_Receive_IT+0x74>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10a      	bne.n	8004bbc <UART_Receive_IT+0x82>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	e008      	b.n	8004bce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	4619      	mov	r1, r3
 8004be6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d15a      	bne.n	8004ca2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0220 	bic.w	r2, r2, #32
 8004bfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d135      	bne.n	8004c98 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	613b      	str	r3, [r7, #16]
   return(result);
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f023 0310 	bic.w	r3, r3, #16
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	330c      	adds	r3, #12
 8004c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c52:	623a      	str	r2, [r7, #32]
 8004c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	69f9      	ldr	r1, [r7, #28]
 8004c58:	6a3a      	ldr	r2, [r7, #32]
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e5      	bne.n	8004c32 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d10a      	bne.n	8004c8a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fc4d 	bl	8004530 <HAL_UARTEx_RxEventCallback>
 8004c96:	e002      	b.n	8004c9e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7fc fde7 	bl	800186c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e002      	b.n	8004ca8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e000      	b.n	8004ca8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ca6:	2302      	movs	r3, #2
  }
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3730      	adds	r7, #48	; 0x30
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb4:	b0c0      	sub	sp, #256	; 0x100
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ccc:	68d9      	ldr	r1, [r3, #12]
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	ea40 0301 	orr.w	r3, r0, r1
 8004cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d08:	f021 010c 	bic.w	r1, r1, #12
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d16:	430b      	orrs	r3, r1
 8004d18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2a:	6999      	ldr	r1, [r3, #24]
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	ea40 0301 	orr.w	r3, r0, r1
 8004d36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b8f      	ldr	r3, [pc, #572]	; (8004f7c <UART_SetConfig+0x2cc>)
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d005      	beq.n	8004d50 <UART_SetConfig+0xa0>
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b8d      	ldr	r3, [pc, #564]	; (8004f80 <UART_SetConfig+0x2d0>)
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d104      	bne.n	8004d5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d50:	f7ff f832 	bl	8003db8 <HAL_RCC_GetPCLK2Freq>
 8004d54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d58:	e003      	b.n	8004d62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d5a:	f7ff f819 	bl	8003d90 <HAL_RCC_GetPCLK1Freq>
 8004d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d6c:	f040 810c 	bne.w	8004f88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d82:	4622      	mov	r2, r4
 8004d84:	462b      	mov	r3, r5
 8004d86:	1891      	adds	r1, r2, r2
 8004d88:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d8a:	415b      	adcs	r3, r3
 8004d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d92:	4621      	mov	r1, r4
 8004d94:	eb12 0801 	adds.w	r8, r2, r1
 8004d98:	4629      	mov	r1, r5
 8004d9a:	eb43 0901 	adc.w	r9, r3, r1
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004db2:	4690      	mov	r8, r2
 8004db4:	4699      	mov	r9, r3
 8004db6:	4623      	mov	r3, r4
 8004db8:	eb18 0303 	adds.w	r3, r8, r3
 8004dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	eb49 0303 	adc.w	r3, r9, r3
 8004dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dde:	460b      	mov	r3, r1
 8004de0:	18db      	adds	r3, r3, r3
 8004de2:	653b      	str	r3, [r7, #80]	; 0x50
 8004de4:	4613      	mov	r3, r2
 8004de6:	eb42 0303 	adc.w	r3, r2, r3
 8004dea:	657b      	str	r3, [r7, #84]	; 0x54
 8004dec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004df4:	f7fb f9f0 	bl	80001d8 <__aeabi_uldivmod>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4b61      	ldr	r3, [pc, #388]	; (8004f84 <UART_SetConfig+0x2d4>)
 8004dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	011c      	lsls	r4, r3, #4
 8004e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	1891      	adds	r1, r2, r2
 8004e1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e20:	415b      	adcs	r3, r3
 8004e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e28:	4641      	mov	r1, r8
 8004e2a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e2e:	4649      	mov	r1, r9
 8004e30:	eb43 0b01 	adc.w	fp, r3, r1
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e48:	4692      	mov	sl, r2
 8004e4a:	469b      	mov	fp, r3
 8004e4c:	4643      	mov	r3, r8
 8004e4e:	eb1a 0303 	adds.w	r3, sl, r3
 8004e52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e56:	464b      	mov	r3, r9
 8004e58:	eb4b 0303 	adc.w	r3, fp, r3
 8004e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e74:	460b      	mov	r3, r1
 8004e76:	18db      	adds	r3, r3, r3
 8004e78:	643b      	str	r3, [r7, #64]	; 0x40
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	eb42 0303 	adc.w	r3, r2, r3
 8004e80:	647b      	str	r3, [r7, #68]	; 0x44
 8004e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e8a:	f7fb f9a5 	bl	80001d8 <__aeabi_uldivmod>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	4b3b      	ldr	r3, [pc, #236]	; (8004f84 <UART_SetConfig+0x2d4>)
 8004e96:	fba3 2301 	umull	r2, r3, r3, r1
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	2264      	movs	r2, #100	; 0x64
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	1acb      	subs	r3, r1, r3
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004eaa:	4b36      	ldr	r3, [pc, #216]	; (8004f84 <UART_SetConfig+0x2d4>)
 8004eac:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004eb8:	441c      	add	r4, r3
 8004eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	1891      	adds	r1, r2, r2
 8004ed2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ed4:	415b      	adcs	r3, r3
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004edc:	4641      	mov	r1, r8
 8004ede:	1851      	adds	r1, r2, r1
 8004ee0:	6339      	str	r1, [r7, #48]	; 0x30
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	414b      	adcs	r3, r1
 8004ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	00cb      	lsls	r3, r1, #3
 8004ef8:	4651      	mov	r1, sl
 8004efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efe:	4651      	mov	r1, sl
 8004f00:	00ca      	lsls	r2, r1, #3
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	4603      	mov	r3, r0
 8004f08:	4642      	mov	r2, r8
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f10:	464b      	mov	r3, r9
 8004f12:	460a      	mov	r2, r1
 8004f14:	eb42 0303 	adc.w	r3, r2, r3
 8004f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f30:	460b      	mov	r3, r1
 8004f32:	18db      	adds	r3, r3, r3
 8004f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f36:	4613      	mov	r3, r2
 8004f38:	eb42 0303 	adc.w	r3, r2, r3
 8004f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f46:	f7fb f947 	bl	80001d8 <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	; (8004f84 <UART_SetConfig+0x2d4>)
 8004f50:	fba3 1302 	umull	r1, r3, r3, r2
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	2164      	movs	r1, #100	; 0x64
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	3332      	adds	r3, #50	; 0x32
 8004f62:	4a08      	ldr	r2, [pc, #32]	; (8004f84 <UART_SetConfig+0x2d4>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	f003 0207 	and.w	r2, r3, #7
 8004f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4422      	add	r2, r4
 8004f76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f78:	e105      	b.n	8005186 <UART_SetConfig+0x4d6>
 8004f7a:	bf00      	nop
 8004f7c:	40011000 	.word	0x40011000
 8004f80:	40011400 	.word	0x40011400
 8004f84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f9a:	4642      	mov	r2, r8
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	1891      	adds	r1, r2, r2
 8004fa0:	6239      	str	r1, [r7, #32]
 8004fa2:	415b      	adcs	r3, r3
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004faa:	4641      	mov	r1, r8
 8004fac:	1854      	adds	r4, r2, r1
 8004fae:	4649      	mov	r1, r9
 8004fb0:	eb43 0501 	adc.w	r5, r3, r1
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	00eb      	lsls	r3, r5, #3
 8004fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fc2:	00e2      	lsls	r2, r4, #3
 8004fc4:	4614      	mov	r4, r2
 8004fc6:	461d      	mov	r5, r3
 8004fc8:	4643      	mov	r3, r8
 8004fca:	18e3      	adds	r3, r4, r3
 8004fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fd0:	464b      	mov	r3, r9
 8004fd2:	eb45 0303 	adc.w	r3, r5, r3
 8004fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fe6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	008b      	lsls	r3, r1, #2
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005000:	4621      	mov	r1, r4
 8005002:	008a      	lsls	r2, r1, #2
 8005004:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005008:	f7fb f8e6 	bl	80001d8 <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4b60      	ldr	r3, [pc, #384]	; (8005194 <UART_SetConfig+0x4e4>)
 8005012:	fba3 2302 	umull	r2, r3, r3, r2
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	011c      	lsls	r4, r3, #4
 800501a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800501e:	2200      	movs	r2, #0
 8005020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005024:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005028:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800502c:	4642      	mov	r2, r8
 800502e:	464b      	mov	r3, r9
 8005030:	1891      	adds	r1, r2, r2
 8005032:	61b9      	str	r1, [r7, #24]
 8005034:	415b      	adcs	r3, r3
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800503c:	4641      	mov	r1, r8
 800503e:	1851      	adds	r1, r2, r1
 8005040:	6139      	str	r1, [r7, #16]
 8005042:	4649      	mov	r1, r9
 8005044:	414b      	adcs	r3, r1
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005054:	4659      	mov	r1, fp
 8005056:	00cb      	lsls	r3, r1, #3
 8005058:	4651      	mov	r1, sl
 800505a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800505e:	4651      	mov	r1, sl
 8005060:	00ca      	lsls	r2, r1, #3
 8005062:	4610      	mov	r0, r2
 8005064:	4619      	mov	r1, r3
 8005066:	4603      	mov	r3, r0
 8005068:	4642      	mov	r2, r8
 800506a:	189b      	adds	r3, r3, r2
 800506c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005070:	464b      	mov	r3, r9
 8005072:	460a      	mov	r2, r1
 8005074:	eb42 0303 	adc.w	r3, r2, r3
 8005078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	67bb      	str	r3, [r7, #120]	; 0x78
 8005086:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005094:	4649      	mov	r1, r9
 8005096:	008b      	lsls	r3, r1, #2
 8005098:	4641      	mov	r1, r8
 800509a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800509e:	4641      	mov	r1, r8
 80050a0:	008a      	lsls	r2, r1, #2
 80050a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050a6:	f7fb f897 	bl	80001d8 <__aeabi_uldivmod>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4b39      	ldr	r3, [pc, #228]	; (8005194 <UART_SetConfig+0x4e4>)
 80050b0:	fba3 1302 	umull	r1, r3, r3, r2
 80050b4:	095b      	lsrs	r3, r3, #5
 80050b6:	2164      	movs	r1, #100	; 0x64
 80050b8:	fb01 f303 	mul.w	r3, r1, r3
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	3332      	adds	r3, #50	; 0x32
 80050c2:	4a34      	ldr	r2, [pc, #208]	; (8005194 <UART_SetConfig+0x4e4>)
 80050c4:	fba2 2303 	umull	r2, r3, r2, r3
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ce:	441c      	add	r4, r3
 80050d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d4:	2200      	movs	r2, #0
 80050d6:	673b      	str	r3, [r7, #112]	; 0x70
 80050d8:	677a      	str	r2, [r7, #116]	; 0x74
 80050da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050de:	4642      	mov	r2, r8
 80050e0:	464b      	mov	r3, r9
 80050e2:	1891      	adds	r1, r2, r2
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	415b      	adcs	r3, r3
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050ee:	4641      	mov	r1, r8
 80050f0:	1851      	adds	r1, r2, r1
 80050f2:	6039      	str	r1, [r7, #0]
 80050f4:	4649      	mov	r1, r9
 80050f6:	414b      	adcs	r3, r1
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005106:	4659      	mov	r1, fp
 8005108:	00cb      	lsls	r3, r1, #3
 800510a:	4651      	mov	r1, sl
 800510c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005110:	4651      	mov	r1, sl
 8005112:	00ca      	lsls	r2, r1, #3
 8005114:	4610      	mov	r0, r2
 8005116:	4619      	mov	r1, r3
 8005118:	4603      	mov	r3, r0
 800511a:	4642      	mov	r2, r8
 800511c:	189b      	adds	r3, r3, r2
 800511e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005120:	464b      	mov	r3, r9
 8005122:	460a      	mov	r2, r1
 8005124:	eb42 0303 	adc.w	r3, r2, r3
 8005128:	66fb      	str	r3, [r7, #108]	; 0x6c
 800512a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	663b      	str	r3, [r7, #96]	; 0x60
 8005134:	667a      	str	r2, [r7, #100]	; 0x64
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005142:	4649      	mov	r1, r9
 8005144:	008b      	lsls	r3, r1, #2
 8005146:	4641      	mov	r1, r8
 8005148:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800514c:	4641      	mov	r1, r8
 800514e:	008a      	lsls	r2, r1, #2
 8005150:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005154:	f7fb f840 	bl	80001d8 <__aeabi_uldivmod>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <UART_SetConfig+0x4e4>)
 800515e:	fba3 1302 	umull	r1, r3, r3, r2
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	2164      	movs	r1, #100	; 0x64
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	3332      	adds	r3, #50	; 0x32
 8005170:	4a08      	ldr	r2, [pc, #32]	; (8005194 <UART_SetConfig+0x4e4>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	f003 020f 	and.w	r2, r3, #15
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4422      	add	r2, r4
 8005184:	609a      	str	r2, [r3, #8]
}
 8005186:	bf00      	nop
 8005188:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800518c:	46bd      	mov	sp, r7
 800518e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005192:	bf00      	nop
 8005194:	51eb851f 	.word	0x51eb851f

08005198 <__cxa_pure_virtual>:
 8005198:	b508      	push	{r3, lr}
 800519a:	f000 f80d 	bl	80051b8 <_ZSt9terminatev>

0800519e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800519e:	b508      	push	{r3, lr}
 80051a0:	4780      	blx	r0
 80051a2:	f000 f80e 	bl	80051c2 <abort>
	...

080051a8 <_ZSt13get_terminatev>:
 80051a8:	4b02      	ldr	r3, [pc, #8]	; (80051b4 <_ZSt13get_terminatev+0xc>)
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	f3bf 8f5b 	dmb	ish
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000024 	.word	0x20000024

080051b8 <_ZSt9terminatev>:
 80051b8:	b508      	push	{r3, lr}
 80051ba:	f7ff fff5 	bl	80051a8 <_ZSt13get_terminatev>
 80051be:	f7ff ffee 	bl	800519e <_ZN10__cxxabiv111__terminateEPFvvE>

080051c2 <abort>:
 80051c2:	b508      	push	{r3, lr}
 80051c4:	2006      	movs	r0, #6
 80051c6:	f000 f873 	bl	80052b0 <raise>
 80051ca:	2001      	movs	r0, #1
 80051cc:	f7fd f9c2 	bl	8002554 <_exit>

080051d0 <__errno>:
 80051d0:	4b01      	ldr	r3, [pc, #4]	; (80051d8 <__errno+0x8>)
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20000028 	.word	0x20000028

080051dc <__libc_init_array>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	4d0d      	ldr	r5, [pc, #52]	; (8005214 <__libc_init_array+0x38>)
 80051e0:	4c0d      	ldr	r4, [pc, #52]	; (8005218 <__libc_init_array+0x3c>)
 80051e2:	1b64      	subs	r4, r4, r5
 80051e4:	10a4      	asrs	r4, r4, #2
 80051e6:	2600      	movs	r6, #0
 80051e8:	42a6      	cmp	r6, r4
 80051ea:	d109      	bne.n	8005200 <__libc_init_array+0x24>
 80051ec:	4d0b      	ldr	r5, [pc, #44]	; (800521c <__libc_init_array+0x40>)
 80051ee:	4c0c      	ldr	r4, [pc, #48]	; (8005220 <__libc_init_array+0x44>)
 80051f0:	f000 f9b0 	bl	8005554 <_init>
 80051f4:	1b64      	subs	r4, r4, r5
 80051f6:	10a4      	asrs	r4, r4, #2
 80051f8:	2600      	movs	r6, #0
 80051fa:	42a6      	cmp	r6, r4
 80051fc:	d105      	bne.n	800520a <__libc_init_array+0x2e>
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
 8005200:	f855 3b04 	ldr.w	r3, [r5], #4
 8005204:	4798      	blx	r3
 8005206:	3601      	adds	r6, #1
 8005208:	e7ee      	b.n	80051e8 <__libc_init_array+0xc>
 800520a:	f855 3b04 	ldr.w	r3, [r5], #4
 800520e:	4798      	blx	r3
 8005210:	3601      	adds	r6, #1
 8005212:	e7f2      	b.n	80051fa <__libc_init_array+0x1e>
 8005214:	080057b4 	.word	0x080057b4
 8005218:	080057b4 	.word	0x080057b4
 800521c:	080057b4 	.word	0x080057b4
 8005220:	080057bc 	.word	0x080057bc

08005224 <memcpy>:
 8005224:	440a      	add	r2, r1
 8005226:	4291      	cmp	r1, r2
 8005228:	f100 33ff 	add.w	r3, r0, #4294967295
 800522c:	d100      	bne.n	8005230 <memcpy+0xc>
 800522e:	4770      	bx	lr
 8005230:	b510      	push	{r4, lr}
 8005232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800523a:	4291      	cmp	r1, r2
 800523c:	d1f9      	bne.n	8005232 <memcpy+0xe>
 800523e:	bd10      	pop	{r4, pc}

08005240 <memset>:
 8005240:	4402      	add	r2, r0
 8005242:	4603      	mov	r3, r0
 8005244:	4293      	cmp	r3, r2
 8005246:	d100      	bne.n	800524a <memset+0xa>
 8005248:	4770      	bx	lr
 800524a:	f803 1b01 	strb.w	r1, [r3], #1
 800524e:	e7f9      	b.n	8005244 <memset+0x4>

08005250 <realloc>:
 8005250:	4b02      	ldr	r3, [pc, #8]	; (800525c <realloc+0xc>)
 8005252:	460a      	mov	r2, r1
 8005254:	4601      	mov	r1, r0
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	f000 b8da 	b.w	8005410 <_realloc_r>
 800525c:	20000028 	.word	0x20000028

08005260 <_raise_r>:
 8005260:	291f      	cmp	r1, #31
 8005262:	b538      	push	{r3, r4, r5, lr}
 8005264:	4604      	mov	r4, r0
 8005266:	460d      	mov	r5, r1
 8005268:	d904      	bls.n	8005274 <_raise_r+0x14>
 800526a:	2316      	movs	r3, #22
 800526c:	6003      	str	r3, [r0, #0]
 800526e:	f04f 30ff 	mov.w	r0, #4294967295
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005276:	b112      	cbz	r2, 800527e <_raise_r+0x1e>
 8005278:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800527c:	b94b      	cbnz	r3, 8005292 <_raise_r+0x32>
 800527e:	4620      	mov	r0, r4
 8005280:	f000 f830 	bl	80052e4 <_getpid_r>
 8005284:	462a      	mov	r2, r5
 8005286:	4601      	mov	r1, r0
 8005288:	4620      	mov	r0, r4
 800528a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800528e:	f000 b817 	b.w	80052c0 <_kill_r>
 8005292:	2b01      	cmp	r3, #1
 8005294:	d00a      	beq.n	80052ac <_raise_r+0x4c>
 8005296:	1c59      	adds	r1, r3, #1
 8005298:	d103      	bne.n	80052a2 <_raise_r+0x42>
 800529a:	2316      	movs	r3, #22
 800529c:	6003      	str	r3, [r0, #0]
 800529e:	2001      	movs	r0, #1
 80052a0:	e7e7      	b.n	8005272 <_raise_r+0x12>
 80052a2:	2400      	movs	r4, #0
 80052a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80052a8:	4628      	mov	r0, r5
 80052aa:	4798      	blx	r3
 80052ac:	2000      	movs	r0, #0
 80052ae:	e7e0      	b.n	8005272 <_raise_r+0x12>

080052b0 <raise>:
 80052b0:	4b02      	ldr	r3, [pc, #8]	; (80052bc <raise+0xc>)
 80052b2:	4601      	mov	r1, r0
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	f7ff bfd3 	b.w	8005260 <_raise_r>
 80052ba:	bf00      	nop
 80052bc:	20000028 	.word	0x20000028

080052c0 <_kill_r>:
 80052c0:	b538      	push	{r3, r4, r5, lr}
 80052c2:	4d07      	ldr	r5, [pc, #28]	; (80052e0 <_kill_r+0x20>)
 80052c4:	2300      	movs	r3, #0
 80052c6:	4604      	mov	r4, r0
 80052c8:	4608      	mov	r0, r1
 80052ca:	4611      	mov	r1, r2
 80052cc:	602b      	str	r3, [r5, #0]
 80052ce:	f7fd f931 	bl	8002534 <_kill>
 80052d2:	1c43      	adds	r3, r0, #1
 80052d4:	d102      	bne.n	80052dc <_kill_r+0x1c>
 80052d6:	682b      	ldr	r3, [r5, #0]
 80052d8:	b103      	cbz	r3, 80052dc <_kill_r+0x1c>
 80052da:	6023      	str	r3, [r4, #0]
 80052dc:	bd38      	pop	{r3, r4, r5, pc}
 80052de:	bf00      	nop
 80052e0:	20000b18 	.word	0x20000b18

080052e4 <_getpid_r>:
 80052e4:	f7fd b91e 	b.w	8002524 <_getpid>

080052e8 <sbrk_aligned>:
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	4e0e      	ldr	r6, [pc, #56]	; (8005324 <sbrk_aligned+0x3c>)
 80052ec:	460c      	mov	r4, r1
 80052ee:	6831      	ldr	r1, [r6, #0]
 80052f0:	4605      	mov	r5, r0
 80052f2:	b911      	cbnz	r1, 80052fa <sbrk_aligned+0x12>
 80052f4:	f000 f8bc 	bl	8005470 <_sbrk_r>
 80052f8:	6030      	str	r0, [r6, #0]
 80052fa:	4621      	mov	r1, r4
 80052fc:	4628      	mov	r0, r5
 80052fe:	f000 f8b7 	bl	8005470 <_sbrk_r>
 8005302:	1c43      	adds	r3, r0, #1
 8005304:	d00a      	beq.n	800531c <sbrk_aligned+0x34>
 8005306:	1cc4      	adds	r4, r0, #3
 8005308:	f024 0403 	bic.w	r4, r4, #3
 800530c:	42a0      	cmp	r0, r4
 800530e:	d007      	beq.n	8005320 <sbrk_aligned+0x38>
 8005310:	1a21      	subs	r1, r4, r0
 8005312:	4628      	mov	r0, r5
 8005314:	f000 f8ac 	bl	8005470 <_sbrk_r>
 8005318:	3001      	adds	r0, #1
 800531a:	d101      	bne.n	8005320 <sbrk_aligned+0x38>
 800531c:	f04f 34ff 	mov.w	r4, #4294967295
 8005320:	4620      	mov	r0, r4
 8005322:	bd70      	pop	{r4, r5, r6, pc}
 8005324:	20000b14 	.word	0x20000b14

08005328 <_malloc_r>:
 8005328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800532c:	1ccd      	adds	r5, r1, #3
 800532e:	f025 0503 	bic.w	r5, r5, #3
 8005332:	3508      	adds	r5, #8
 8005334:	2d0c      	cmp	r5, #12
 8005336:	bf38      	it	cc
 8005338:	250c      	movcc	r5, #12
 800533a:	2d00      	cmp	r5, #0
 800533c:	4607      	mov	r7, r0
 800533e:	db01      	blt.n	8005344 <_malloc_r+0x1c>
 8005340:	42a9      	cmp	r1, r5
 8005342:	d905      	bls.n	8005350 <_malloc_r+0x28>
 8005344:	230c      	movs	r3, #12
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	2600      	movs	r6, #0
 800534a:	4630      	mov	r0, r6
 800534c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005350:	4e2e      	ldr	r6, [pc, #184]	; (800540c <_malloc_r+0xe4>)
 8005352:	f000 f89d 	bl	8005490 <__malloc_lock>
 8005356:	6833      	ldr	r3, [r6, #0]
 8005358:	461c      	mov	r4, r3
 800535a:	bb34      	cbnz	r4, 80053aa <_malloc_r+0x82>
 800535c:	4629      	mov	r1, r5
 800535e:	4638      	mov	r0, r7
 8005360:	f7ff ffc2 	bl	80052e8 <sbrk_aligned>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	4604      	mov	r4, r0
 8005368:	d14d      	bne.n	8005406 <_malloc_r+0xde>
 800536a:	6834      	ldr	r4, [r6, #0]
 800536c:	4626      	mov	r6, r4
 800536e:	2e00      	cmp	r6, #0
 8005370:	d140      	bne.n	80053f4 <_malloc_r+0xcc>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	4631      	mov	r1, r6
 8005376:	4638      	mov	r0, r7
 8005378:	eb04 0803 	add.w	r8, r4, r3
 800537c:	f000 f878 	bl	8005470 <_sbrk_r>
 8005380:	4580      	cmp	r8, r0
 8005382:	d13a      	bne.n	80053fa <_malloc_r+0xd2>
 8005384:	6821      	ldr	r1, [r4, #0]
 8005386:	3503      	adds	r5, #3
 8005388:	1a6d      	subs	r5, r5, r1
 800538a:	f025 0503 	bic.w	r5, r5, #3
 800538e:	3508      	adds	r5, #8
 8005390:	2d0c      	cmp	r5, #12
 8005392:	bf38      	it	cc
 8005394:	250c      	movcc	r5, #12
 8005396:	4629      	mov	r1, r5
 8005398:	4638      	mov	r0, r7
 800539a:	f7ff ffa5 	bl	80052e8 <sbrk_aligned>
 800539e:	3001      	adds	r0, #1
 80053a0:	d02b      	beq.n	80053fa <_malloc_r+0xd2>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	442b      	add	r3, r5
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	e00e      	b.n	80053c8 <_malloc_r+0xa0>
 80053aa:	6822      	ldr	r2, [r4, #0]
 80053ac:	1b52      	subs	r2, r2, r5
 80053ae:	d41e      	bmi.n	80053ee <_malloc_r+0xc6>
 80053b0:	2a0b      	cmp	r2, #11
 80053b2:	d916      	bls.n	80053e2 <_malloc_r+0xba>
 80053b4:	1961      	adds	r1, r4, r5
 80053b6:	42a3      	cmp	r3, r4
 80053b8:	6025      	str	r5, [r4, #0]
 80053ba:	bf18      	it	ne
 80053bc:	6059      	strne	r1, [r3, #4]
 80053be:	6863      	ldr	r3, [r4, #4]
 80053c0:	bf08      	it	eq
 80053c2:	6031      	streq	r1, [r6, #0]
 80053c4:	5162      	str	r2, [r4, r5]
 80053c6:	604b      	str	r3, [r1, #4]
 80053c8:	4638      	mov	r0, r7
 80053ca:	f104 060b 	add.w	r6, r4, #11
 80053ce:	f000 f865 	bl	800549c <__malloc_unlock>
 80053d2:	f026 0607 	bic.w	r6, r6, #7
 80053d6:	1d23      	adds	r3, r4, #4
 80053d8:	1af2      	subs	r2, r6, r3
 80053da:	d0b6      	beq.n	800534a <_malloc_r+0x22>
 80053dc:	1b9b      	subs	r3, r3, r6
 80053de:	50a3      	str	r3, [r4, r2]
 80053e0:	e7b3      	b.n	800534a <_malloc_r+0x22>
 80053e2:	6862      	ldr	r2, [r4, #4]
 80053e4:	42a3      	cmp	r3, r4
 80053e6:	bf0c      	ite	eq
 80053e8:	6032      	streq	r2, [r6, #0]
 80053ea:	605a      	strne	r2, [r3, #4]
 80053ec:	e7ec      	b.n	80053c8 <_malloc_r+0xa0>
 80053ee:	4623      	mov	r3, r4
 80053f0:	6864      	ldr	r4, [r4, #4]
 80053f2:	e7b2      	b.n	800535a <_malloc_r+0x32>
 80053f4:	4634      	mov	r4, r6
 80053f6:	6876      	ldr	r6, [r6, #4]
 80053f8:	e7b9      	b.n	800536e <_malloc_r+0x46>
 80053fa:	230c      	movs	r3, #12
 80053fc:	603b      	str	r3, [r7, #0]
 80053fe:	4638      	mov	r0, r7
 8005400:	f000 f84c 	bl	800549c <__malloc_unlock>
 8005404:	e7a1      	b.n	800534a <_malloc_r+0x22>
 8005406:	6025      	str	r5, [r4, #0]
 8005408:	e7de      	b.n	80053c8 <_malloc_r+0xa0>
 800540a:	bf00      	nop
 800540c:	20000b10 	.word	0x20000b10

08005410 <_realloc_r>:
 8005410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005414:	4680      	mov	r8, r0
 8005416:	4614      	mov	r4, r2
 8005418:	460e      	mov	r6, r1
 800541a:	b921      	cbnz	r1, 8005426 <_realloc_r+0x16>
 800541c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005420:	4611      	mov	r1, r2
 8005422:	f7ff bf81 	b.w	8005328 <_malloc_r>
 8005426:	b92a      	cbnz	r2, 8005434 <_realloc_r+0x24>
 8005428:	f000 f83e 	bl	80054a8 <_free_r>
 800542c:	4625      	mov	r5, r4
 800542e:	4628      	mov	r0, r5
 8005430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005434:	f000 f884 	bl	8005540 <_malloc_usable_size_r>
 8005438:	4284      	cmp	r4, r0
 800543a:	4607      	mov	r7, r0
 800543c:	d802      	bhi.n	8005444 <_realloc_r+0x34>
 800543e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005442:	d812      	bhi.n	800546a <_realloc_r+0x5a>
 8005444:	4621      	mov	r1, r4
 8005446:	4640      	mov	r0, r8
 8005448:	f7ff ff6e 	bl	8005328 <_malloc_r>
 800544c:	4605      	mov	r5, r0
 800544e:	2800      	cmp	r0, #0
 8005450:	d0ed      	beq.n	800542e <_realloc_r+0x1e>
 8005452:	42bc      	cmp	r4, r7
 8005454:	4622      	mov	r2, r4
 8005456:	4631      	mov	r1, r6
 8005458:	bf28      	it	cs
 800545a:	463a      	movcs	r2, r7
 800545c:	f7ff fee2 	bl	8005224 <memcpy>
 8005460:	4631      	mov	r1, r6
 8005462:	4640      	mov	r0, r8
 8005464:	f000 f820 	bl	80054a8 <_free_r>
 8005468:	e7e1      	b.n	800542e <_realloc_r+0x1e>
 800546a:	4635      	mov	r5, r6
 800546c:	e7df      	b.n	800542e <_realloc_r+0x1e>
	...

08005470 <_sbrk_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4d06      	ldr	r5, [pc, #24]	; (800548c <_sbrk_r+0x1c>)
 8005474:	2300      	movs	r3, #0
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	f7fd f874 	bl	8002568 <_sbrk>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d102      	bne.n	800548a <_sbrk_r+0x1a>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b103      	cbz	r3, 800548a <_sbrk_r+0x1a>
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	bd38      	pop	{r3, r4, r5, pc}
 800548c:	20000b18 	.word	0x20000b18

08005490 <__malloc_lock>:
 8005490:	4801      	ldr	r0, [pc, #4]	; (8005498 <__malloc_lock+0x8>)
 8005492:	f000 b85d 	b.w	8005550 <__retarget_lock_acquire_recursive>
 8005496:	bf00      	nop
 8005498:	20000b1c 	.word	0x20000b1c

0800549c <__malloc_unlock>:
 800549c:	4801      	ldr	r0, [pc, #4]	; (80054a4 <__malloc_unlock+0x8>)
 800549e:	f000 b858 	b.w	8005552 <__retarget_lock_release_recursive>
 80054a2:	bf00      	nop
 80054a4:	20000b1c 	.word	0x20000b1c

080054a8 <_free_r>:
 80054a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054aa:	2900      	cmp	r1, #0
 80054ac:	d044      	beq.n	8005538 <_free_r+0x90>
 80054ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054b2:	9001      	str	r0, [sp, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f1a1 0404 	sub.w	r4, r1, #4
 80054ba:	bfb8      	it	lt
 80054bc:	18e4      	addlt	r4, r4, r3
 80054be:	f7ff ffe7 	bl	8005490 <__malloc_lock>
 80054c2:	4a1e      	ldr	r2, [pc, #120]	; (800553c <_free_r+0x94>)
 80054c4:	9801      	ldr	r0, [sp, #4]
 80054c6:	6813      	ldr	r3, [r2, #0]
 80054c8:	b933      	cbnz	r3, 80054d8 <_free_r+0x30>
 80054ca:	6063      	str	r3, [r4, #4]
 80054cc:	6014      	str	r4, [r2, #0]
 80054ce:	b003      	add	sp, #12
 80054d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054d4:	f7ff bfe2 	b.w	800549c <__malloc_unlock>
 80054d8:	42a3      	cmp	r3, r4
 80054da:	d908      	bls.n	80054ee <_free_r+0x46>
 80054dc:	6825      	ldr	r5, [r4, #0]
 80054de:	1961      	adds	r1, r4, r5
 80054e0:	428b      	cmp	r3, r1
 80054e2:	bf01      	itttt	eq
 80054e4:	6819      	ldreq	r1, [r3, #0]
 80054e6:	685b      	ldreq	r3, [r3, #4]
 80054e8:	1949      	addeq	r1, r1, r5
 80054ea:	6021      	streq	r1, [r4, #0]
 80054ec:	e7ed      	b.n	80054ca <_free_r+0x22>
 80054ee:	461a      	mov	r2, r3
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	b10b      	cbz	r3, 80054f8 <_free_r+0x50>
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	d9fa      	bls.n	80054ee <_free_r+0x46>
 80054f8:	6811      	ldr	r1, [r2, #0]
 80054fa:	1855      	adds	r5, r2, r1
 80054fc:	42a5      	cmp	r5, r4
 80054fe:	d10b      	bne.n	8005518 <_free_r+0x70>
 8005500:	6824      	ldr	r4, [r4, #0]
 8005502:	4421      	add	r1, r4
 8005504:	1854      	adds	r4, r2, r1
 8005506:	42a3      	cmp	r3, r4
 8005508:	6011      	str	r1, [r2, #0]
 800550a:	d1e0      	bne.n	80054ce <_free_r+0x26>
 800550c:	681c      	ldr	r4, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	6053      	str	r3, [r2, #4]
 8005512:	4421      	add	r1, r4
 8005514:	6011      	str	r1, [r2, #0]
 8005516:	e7da      	b.n	80054ce <_free_r+0x26>
 8005518:	d902      	bls.n	8005520 <_free_r+0x78>
 800551a:	230c      	movs	r3, #12
 800551c:	6003      	str	r3, [r0, #0]
 800551e:	e7d6      	b.n	80054ce <_free_r+0x26>
 8005520:	6825      	ldr	r5, [r4, #0]
 8005522:	1961      	adds	r1, r4, r5
 8005524:	428b      	cmp	r3, r1
 8005526:	bf04      	itt	eq
 8005528:	6819      	ldreq	r1, [r3, #0]
 800552a:	685b      	ldreq	r3, [r3, #4]
 800552c:	6063      	str	r3, [r4, #4]
 800552e:	bf04      	itt	eq
 8005530:	1949      	addeq	r1, r1, r5
 8005532:	6021      	streq	r1, [r4, #0]
 8005534:	6054      	str	r4, [r2, #4]
 8005536:	e7ca      	b.n	80054ce <_free_r+0x26>
 8005538:	b003      	add	sp, #12
 800553a:	bd30      	pop	{r4, r5, pc}
 800553c:	20000b10 	.word	0x20000b10

08005540 <_malloc_usable_size_r>:
 8005540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005544:	1f18      	subs	r0, r3, #4
 8005546:	2b00      	cmp	r3, #0
 8005548:	bfbc      	itt	lt
 800554a:	580b      	ldrlt	r3, [r1, r0]
 800554c:	18c0      	addlt	r0, r0, r3
 800554e:	4770      	bx	lr

08005550 <__retarget_lock_acquire_recursive>:
 8005550:	4770      	bx	lr

08005552 <__retarget_lock_release_recursive>:
 8005552:	4770      	bx	lr

08005554 <_init>:
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	bf00      	nop
 8005558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555a:	bc08      	pop	{r3}
 800555c:	469e      	mov	lr, r3
 800555e:	4770      	bx	lr

08005560 <_fini>:
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005562:	bf00      	nop
 8005564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005566:	bc08      	pop	{r3}
 8005568:	469e      	mov	lr, r3
 800556a:	4770      	bx	lr
